// Compiled by ClojureScript 1.9.93 {:static-fns true, :optimize-constants true}
goog.provide('cljs.js');
goog.require('cljs.core');
goog.require('cljs.compiler');
goog.require('cljs.tools.reader');
goog.require('cljs.tagged_literals');
goog.require('goog.crypt.base64');
goog.require('cljs.tools.reader.reader_types');
goog.require('cljs.env');
goog.require('cljs.analyzer');
goog.require('cljs.source_map');
goog.require('goog.string.StringBuffer');
goog.require('clojure.string');
goog.require("cljs.core$macros");
cljs.js.debug_prn = (function cljs$js$debug_prn(var_args){
var args__7326__auto__ = [];
var len__7319__auto___15991 = arguments.length;
var i__7320__auto___15992 = (0);
while(true){
if((i__7320__auto___15992 < len__7319__auto___15991)){
args__7326__auto__.push((arguments[i__7320__auto___15992]));

var G__15993 = (i__7320__auto___15992 + (1));
i__7320__auto___15992 = G__15993;
continue;
} else {
}
break;
}

var argseq__7327__auto__ = ((((0) < args__7326__auto__.length))?(new cljs.core.IndexedSeq(args__7326__auto__.slice((0)),(0),null)):null);
return cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(argseq__7327__auto__);
});

cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic = (function (args){
var _STAR_print_fn_STAR_15990 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_fn_STAR_ = cljs.core._STAR_print_err_fn_STAR_;

try{return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.println,args);
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15990;
}});

cljs.js.debug_prn.cljs$lang$maxFixedArity = (0);

cljs.js.debug_prn.cljs$lang$applyTo = (function (seq15989){
return cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq15989));
});

/**
 * Given a namespace as a symbol return the relative path sans extension
 */
cljs.js.ns__GT_relpath = (function cljs$js$ns__GT_relpath(ns_sym){
return clojure.string.replace(cljs.analyzer.munge_path(ns_sym),".","/");
});
cljs.js.file__GT_ns = (function cljs$js$file__GT_ns(file){
var lib_name = cljs.core.subs.cljs$core$IFn$_invoke$arity$3(clojure.string.replace(file,"/","."),(0),(cljs.core.count(file) - (5)));
return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.demunge(lib_name));
});
cljs.js.resolve_symbol = (function cljs$js$resolve_symbol(sym){
if(clojure.string.starts_with_QMARK_([cljs.core.str(sym)].join(''),".")){
return sym;
} else {
return cljs.analyzer.resolve_symbol(sym);
}
});
cljs.js.atom_QMARK_ = (function cljs$js$atom_QMARK_(x){
return (x instanceof cljs.core.Atom);
});
cljs.js.valid_name_QMARK_ = (function cljs$js$valid_name_QMARK_(x){
return ((x == null)) || ((x instanceof cljs.core.Symbol)) || (typeof x === 'string');
});
cljs.js.valid_opts_QMARK_ = (function cljs$js$valid_opts_QMARK_(x){
return ((x == null)) || (cljs.core.map_QMARK_(x));
});
if(typeof cljs.js._STAR_load_fn_STAR_ !== 'undefined'){
} else {
/**
 * Each runtime environment provides a different way to load a library.
 *   Whatever function *load-fn* is bound to will be passed two arguments - a
 *   map and a callback function: The map will have the following keys:
 * 
 *   :name   - the name of the library (a symbol)
 *   :macros - modifier signaling a macros namespace load
 *   :path   - munged relative library path (a string)
 * 
 *   It is up to the implementor to correctly resolve the corresponding .cljs,
 *   .cljc, or .js resource (the order must be respected). If :macros is true
 *   resolution should only consider .clj or .cljc resources (the order must be
 *   respected). Upon resolution the callback should be invoked with a map
 *   containing the following keys:
 * 
 *   :lang       - the language, :clj or :js
 *   :source     - the source of the library (a string)
 *   :cache      - optional, if a :clj namespace has been precompiled to :js, can
 *              give an analysis cache for faster loads.
 *   :source-map - optional, if a :clj namespace has been precompiled to :js, can
 *              give a V3 source map JSON
 * 
 *   If the resource could not be resolved, the callback should be invoked with
 *   nil.
 */
cljs.js._STAR_load_fn_STAR_ = (function cljs$js$_STAR_load_fn_STAR_(m,cb){
throw (new Error("No *load-fn* set"));
});
}
if(typeof cljs.js._STAR_eval_fn_STAR_ !== 'undefined'){
} else {
/**
 * Each runtime environment provides various ways to eval JavaScript
 *   source. Whatever function *eval-fn* is bound to will be passed a map
 *   containing the following keys:
 * 
 *   :source - the source of the library (string)
 *   :name   - used to unique identify the script (symbol)
 *   :cache  - if the source was originally ClojureScript, will be given the
 *          analysis cache.
 * 
 *   The result of evaluation should be the return value.
 */
cljs.js._STAR_eval_fn_STAR_ = (function cljs$js$_STAR_eval_fn_STAR_(m){
throw (new Error("No *eval-fn* set"));
});
}
/**
 * A default JavaScript evaluation function.
 */
cljs.js.js_eval = (function cljs$js$js_eval(p__15994){
var map__15997 = p__15994;
var map__15997__$1 = ((((!((map__15997 == null)))?((((map__15997.cljs$lang$protocol_mask$partition0$ & (64))) || (map__15997.cljs$core$ISeq$))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__15997):map__15997);
var resource = map__15997__$1;
var source = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__15997__$1,cljs.core.cst$kw$source);
return eval(source);
});
cljs.js.wrap_error = (function cljs$js$wrap_error(ex){
return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$error,ex], null);
});
/**
 * Construct an empty compiler state. Required to invoke analyze, compile,
 * eval and eval-str.
 */
cljs.js.empty_state = (function cljs$js$empty_state(var_args){
var args15999 = [];
var len__7319__auto___16004 = arguments.length;
var i__7320__auto___16005 = (0);
while(true){
if((i__7320__auto___16005 < len__7319__auto___16004)){
args15999.push((arguments[i__7320__auto___16005]));

var G__16006 = (i__7320__auto___16005 + (1));
i__7320__auto___16005 = G__16006;
continue;
} else {
}
break;
}

var G__16001 = args15999.length;
switch (G__16001) {
case 0:
return cljs.js.empty_state.cljs$core$IFn$_invoke$arity$0();

break;
case 1:
return cljs.js.empty_state.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args15999.length)].join('')));

}
});

cljs.js.empty_state.cljs$core$IFn$_invoke$arity$0 = (function (){
var G__16002 = cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$0();
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(G__16002,((function (G__16002){
return (function (state){
return cljs.core.assoc_in(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,cljs.core.cst$sym$cljs$core], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$use_DASH_macros,cljs.core.cst$kw$excludes,cljs.core.cst$kw$macros,cljs.core.cst$kw$name,cljs.core.cst$kw$imports,cljs.core.cst$kw$requires,cljs.core.cst$kw$uses,cljs.core.cst$kw$defs,cljs.core.cst$kw$require_DASH_macros,cljs.core.cst$kw$cljs$analyzer_SLASH_constants,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashSet.EMPTY,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$sym$unsafe_DASH_bit_DASH_and,cljs.core.cst$sym$macroexpand,cljs.core.cst$sym$unchecked_DASH_remainder_DASH_int,cljs.core.cst$sym$when_DASH_first,cljs.core.cst$sym$cond_DASH__GT__GT_,cljs.core.cst$sym$bit_DASH_set,cljs.core.cst$sym$import_DASH_macros,cljs.core.cst$sym$while,cljs.core.cst$sym$satisfies_QMARK_,cljs.core.cst$sym$unchecked_DASH_subtract_DASH_int,cljs.core.cst$sym$ns_DASH_unmap,cljs.core.cst$sym$bit_DASH_shift_DASH_right,cljs.core.cst$sym$aget,cljs.core.cst$sym$specify,cljs.core.cst$sym$vswap_BANG_,cljs.core.cst$sym$caching_DASH_hash,cljs.core.cst$sym$bit_DASH_shift_DASH_left,cljs.core.cst$sym$coercive_DASH_not,cljs.core.cst$sym$dec,cljs.core.cst$sym$_LT_,cljs.core.cst$sym$this_DASH_as,cljs.core.cst$sym$$$,cljs.core.cst$sym$delay,cljs.core.cst$sym$unchecked_DASH_negate,cljs.core.cst$sym$simple_DASH_benchmark,cljs.core.cst$sym$unchecked_DASH_inc_DASH_int,cljs.core.cst$sym$js_DASH_str,cljs.core.cst$sym$bit_DASH_shift_DASH_right_DASH_zero_DASH_fill,cljs.core.cst$sym$implements_QMARK_,cljs.core.cst$sym$goog_DASH_define,cljs.core.cst$sym$pos_QMARK_,cljs.core.cst$sym$specify_BANG_,cljs.core.cst$sym$if_DASH_not,cljs.core.cst$sym$alength,cljs.core.cst$sym$bit_DASH_xor,cljs.core.cst$sym$doseq,cljs.core.cst$sym$unsigned_DASH_bit_DASH_shift_DASH_right,cljs.core.cst$sym$neg_QMARK_,cljs.core.cst$sym$unchecked_DASH_float,cljs.core.cst$sym$undefined_QMARK_,cljs.core.cst$sym$deftype,cljs.core.cst$sym$mask,cljs.core.cst$sym$when_DASH_let,cljs.core.cst$sym$divide,cljs.core.cst$sym$coercive_DASH_boolean,cljs.core.cst$sym$_LT__EQ_,cljs.core.cst$sym$if_DASH_some,cljs.core.cst$sym$_STAR_,cljs.core.cst$sym$min,cljs.core.cst$sym$lazy_DASH_seq,cljs.core.cst$sym$js_DASH_delete,cljs.core.cst$sym$truth_,cljs.core.cst$sym$defcurried,cljs.core.cst$sym$js_DASH_debugger,cljs.core.cst$sym$let,cljs.core.cst$sym$_DASH__GT_,cljs.core.cst$sym$coercive_DASH_not_EQ_,cljs.core.cst$sym$doto,cljs.core.cst$sym$areduce,cljs.core.cst$sym$double,cljs.core.cst$sym$bit_DASH_and_DASH_not,cljs.core.cst$sym$unchecked_DASH_add_DASH_int,cljs.core.cst$sym$fn,cljs.core.cst$sym$short,cljs.core.cst$sym$js_DASH_this,cljs.core.cst$sym$unchecked_DASH_double,cljs.core.cst$sym$string_QMARK_,cljs.core.cst$sym$js_DASH_arguments,cljs.core.cst$sym$unchecked_DASH_multiply_DASH_int,cljs.core.cst$sym$as_DASH__GT_,cljs.core.cst$sym$when_DASH_not,cljs.core.cst$sym$when,cljs.core.cst$sym$int,cljs.core.cst$sym$_GT_,cljs.core.cst$sym$keyword_QMARK_,cljs.core.cst$sym$unchecked_DASH_multiply,cljs.core.cst$sym$gen_DASH_apply_DASH_to,cljs.core.cst$sym$some_DASH__GT__GT_,cljs.core.cst$sym$unchecked_DASH_dec,cljs.core.cst$sym$defn,cljs.core.cst$sym$float,cljs.core.cst$sym$js_DASH_in,cljs.core.cst$sym$es6_DASH_iterable,cljs.core.cst$sym$amap,cljs.core.cst$sym$declare,cljs.core.cst$sym$_DASH_,cljs.core.cst$sym$hash_DASH_set,cljs.core.cst$sym$or,cljs.core.cst$sym$extend_DASH_type,cljs.core.cst$sym$macroexpand_DASH_1,cljs.core.cst$sym$bit_DASH_test,cljs.core.cst$sym$defmethod,cljs.core.cst$sym$time,cljs.core.cst$sym$zero_QMARK_,cljs.core.cst$sym$unchecked_DASH_dec_DASH_int,cljs.core.cst$sym$memfn,cljs.core.cst$sym$js_DASH_obj,cljs.core.cst$sym$nil_QMARK_,cljs.core.cst$sym$extend_DASH_protocol,cljs.core.cst$sym$cond_DASH__GT_,cljs.core.cst$sym$dotimes,cljs.core.cst$sym$bit_DASH_and,cljs.core.cst$sym$reify,cljs.core.cst$sym$instance_QMARK_,cljs.core.cst$sym$load_DASH_file_STAR_,cljs.core.cst$sym$defonce,cljs.core.cst$sym$unchecked_DASH_add,cljs.core.cst$sym$rfn,cljs.core.cst$sym$identical_QMARK_,cljs.core.cst$sym$unchecked_DASH_divide_DASH_int,cljs.core.cst$sym$defn_DASH_,cljs.core.cst$sym$defprotocol,cljs.core.cst$sym$unchecked_DASH_subtract,cljs.core.cst$sym$assert,cljs.core.cst$sym$true_QMARK_,cljs.core.cst$sym$array,cljs.core.cst$sym$letfn,cljs.core.cst$sym$_SLASH_,cljs.core.cst$sym$bitpos,cljs.core.cst$sym$bit_DASH_or,cljs.core.cst$sym$vector,cljs.core.cst$sym$_GT__EQ_,cljs.core.cst$sym$loop,cljs.core.cst$sym$bit_DASH_flip,cljs.core.cst$sym$js_DASH_mod,cljs.core.cst$sym$with_DASH_out_DASH_str,cljs.core.cst$sym$condp,cljs.core.cst$sym$cond,cljs.core.cst$sym$some_DASH__GT_,cljs.core.cst$sym$ns_DASH_interns,cljs.core.cst$sym$for,cljs.core.cst$sym$binding,cljs.core.cst$sym$array_DASH_map,cljs.core.cst$sym$unchecked_DASH_byte,cljs.core.cst$sym$defmacro,cljs.core.cst$sym$unchecked_DASH_short,cljs.core.cst$sym$inc,cljs.core.cst$sym$with_DASH_redefs,cljs.core.cst$sym$bit_DASH_clear,cljs.core.cst$sym$locking,cljs.core.cst$sym$list,cljs.core.cst$sym$_PLUS_,cljs.core.cst$sym$aset,cljs.core.cst$sym$defmulti,cljs.core.cst$sym$str,cljs.core.cst$sym$coercive_DASH__EQ_,cljs.core.cst$sym$hash_DASH_map,cljs.core.cst$sym$if_DASH_let,cljs.core.cst$sym$false_QMARK_,cljs.core.cst$sym$case,cljs.core.cst$sym$exists_QMARK_,cljs.core.cst$sym$bit_DASH_not,cljs.core.cst$sym$byte,cljs.core.cst$sym$max,cljs.core.cst$sym$_EQ__EQ_,cljs.core.cst$sym$lazy_DASH_cat,cljs.core.cst$sym$comment,cljs.core.cst$sym$copy_DASH_arguments,cljs.core.cst$sym$unsafe_DASH_cast,cljs.core.cst$sym$defrecord,cljs.core.cst$sym$make_DASH_array,cljs.core.cst$sym$unchecked_DASH_negate_DASH_int,cljs.core.cst$sym$unchecked_DASH_inc,cljs.core.cst$sym$and,cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$js_DASH_comment,cljs.core.cst$sym$symbol_QMARK_,cljs.core.cst$sym$when_DASH_some,cljs.core.cst$sym$unchecked_DASH_char,cljs.core.cst$sym$_DASH__GT__GT_,cljs.core.cst$sym$js_DASH_inline_DASH_comment],[new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1108,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unsafe_DASH_bit_DASH_and,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted], null)),cljs.core.cst$kw$doc,"Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms.",cljs.core.cst$kw$line,2716,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_macroexpand,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1015,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_remainder_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"bindings => x xs\n\n  Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,4444,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_first,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$clauses], null)),cljs.core.cst$kw$doc,"Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n  through each form for which the corresponding test expression\n  is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n  after the first true test expression.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,7257,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_cond_DASH__GT__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1148,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_set,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vars], null)], null)),cljs.core.cst$kw$line,60,cljs.core.cst$kw$column,4,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_import_DASH_macros,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$test,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Repeatedly executes body while test expression is true. Presumes\n  some side-effect will cause test to become false/nil. Returns nil",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,6087,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_while,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$psym,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$doc,"Returns true if x satisfies the protocol",cljs.core.cst$kw$line,2000,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_satisfies_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1021,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_subtract_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quote0,cljs.core.cst$sym$ns], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quote1,cljs.core.cst$sym$sym], null)], null)),cljs.core.cst$kw$doc,"Removes the mappings for the symbol from the namespace.",cljs.core.cst$kw$line,2683,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_unmap,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1139,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_right,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$i,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$line,950,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_aget,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"Identical to specify! but does not mutate its first argument. The first\n  argument must be an ICloneable instance.",cljs.core.cst$kw$line,1294,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_specify,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in.",cljs.core.cst$kw$line,2692,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_vswap_BANG_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$hash_DASH_fn,cljs.core.cst$sym$hash_DASH_key], null)),cljs.core.cst$kw$line,1160,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_caching_DASH_hash,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1136,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_left,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,843,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_coercive_DASH_not,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1070,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_dec,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1045,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__LT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Defines a scope where JavaScript's implicit \"this\" is bound to the name provided.",cljs.core.cst$kw$line,1304,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_this_DASH_as,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$form], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$form,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$doc,"form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n  Expands into a member access (.) of the first member on the first\n  argument, followed by the next member on the result, etc. For\n  instance:\n\n  (.. System (getProperties) (get \"os.name\"))\n\n  expands to:\n\n  (. (. System (getProperties)) (get \"os.name\"))\n\n  but is easier to write, read, and understand.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1568,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_$$,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls.",cljs.core.cst$kw$line,2038,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_delay,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1009,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_negate,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$expr,cljs.core.cst$sym$iterations,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$print_DASH_fn], null),cljs.core.cst$kw$or,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$print_DASH_fn,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.cst$sym$println)], null)], null)], null)),cljs.core.cst$kw$doc,"Runs expr iterations times in the context of a let expression with\n  the given bindings, then prints out the bindings and the expr\n  followed by number of iterations and total time. The optional\n  argument print-fn, defaulting to println, sets function used to\n  print the result. expr's string representation will be produced\n  using pr-str in any case.",cljs.core.cst$kw$line,2598,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_simple_DASH_benchmark,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1000,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_inc_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),cljs.core.cst$kw$line,2663,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_str,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1142,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_right_DASH_zero_DASH_fill,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$psym,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$doc,"EXPERIMENTAL",cljs.core.cst$kw$line,1974,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_implements_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$default], null)),cljs.core.cst$kw$doc,"Defines a var using `goog.define`. Passed default value must be\n  string, number or boolean.\n\n  Default value can be overridden at compile time using the\n  compiler option `:closure-defines`.\n\n  Example:\n    (ns your-app.core)\n    (goog-define DEBUG! false)\n    ;; can be overridden with\n    :closure-defines {\"your_app.core.DEBUG_BANG_\" true}\n    or\n    :closure-defines {'your-app.core/DEBUG! true}",cljs.core.cst$kw$line,697,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_goog_DASH_define,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1079,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_pos_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"Identical to reify but mutates its first argument.",cljs.core.cst$kw$line,1286,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_specify_BANG_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$test,cljs.core.cst$sym$then], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$test,cljs.core.cst$sym$then,cljs.core.cst$sym$else], null)),cljs.core.cst$kw$doc,"Evaluates test. If logical false, evaluates and returns then expr, \n  otherwise else expr, if supplied, else nil.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,748,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_if_DASH_not,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a], null)),cljs.core.cst$kw$line,2482,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_alength,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1119,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_xor,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seq_DASH_exprs,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil.",cljs.core.cst$kw$line,2316,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_doseq,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1145,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unsigned_DASH_bit_DASH_shift_DASH_right,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1082,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_neg_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,979,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_float,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$doc,"Return true if argument is identical to the JavaScript undefined value.",cljs.core.cst$kw$line,924,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_undefined_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$t,cljs.core.cst$sym$fields,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"(deftype name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The type will have the (by default, immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly. Fields can be qualified\n  with the metadata :mutable true at which point (set! afield aval) will be\n  supported in method bodies. Note well that mutable fields are extremely\n  difficult to use correctly, and are present only to facilitate the building\n  of higherlevel constructs, such as ClojureScript's reference types, in\n  ClojureScript itself. They are for experts only - if the semantics and\n  implications of :mutable are not immediately apparent to you, you should not\n  be using them.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for methods of Object. Note that\n  a parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  One constructor will be defined, taking the designated fields.  Note\n  that the field names __meta and __extmap are currently reserved and\n  should not be used when defining your own types.\n\n  Given (deftype TypeName ...), a factory function called ->TypeName\n  will be defined, taking positional parameters for the fields",cljs.core.cst$kw$line,1629,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_deftype,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)),cljs.core.cst$kw$line,1152,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_mask,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"bindings => binding-form test\n\n  When test is true, evaluates body with binding-form bound to the value of test",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1769,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_let,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1040,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_divide,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,855,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_coercive_DASH_boolean,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1050,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__LT__EQ_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$then], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$then,cljs.core.cst$sym$else,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$oldform], null)),cljs.core.cst$kw$doc,"bindings => binding-form test\n\n   If test is not nil, evaluates then with binding-form bound to the\n   value of test, if not, yields else",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1784,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_if_DASH_some,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1029,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1091,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_min,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Takes a body of expressions that returns an ISeq or nil, and yields\n  a ISeqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls.",cljs.core.cst$kw$line,2030,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_lazy_DASH_seq,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null)),cljs.core.cst$kw$line,868,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_delete,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,860,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_truth_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$private,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$file,cljs.core.cst$kw$name,cljs.core.cst$kw$ns,cljs.core.cst$kw$macro],[true,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$doc,cljs.core.cst$sym$meta,cljs.core.cst$sym$args,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),"Builds another arity of the fn that returns a fn awaiting the last\n  param",1178,1,"cljs/core.cljc",cljs.core.cst$sym$cljs$core_SLASH_defcurried,cljs.core.cst$sym$cljs$core,true]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$doc,"Emit JavaScript \"debugger;\" statement",cljs.core.cst$kw$line,874,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_debugger,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"binding => binding-form init-expr\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.",cljs.core.cst$kw$line,727,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_let,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"Threads the expr through the forms. Inserts x as the\n  second item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  second item in second form, etc.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1586,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$line,847,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_coercive_DASH_not_EQ_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"Evaluates x then calls all of the methods and functions with the\n  value of x supplied at the front of the given arguments.  The forms\n  are evaluated in order.  Returns x.\n\n  (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,3724,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_doto,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$idx,cljs.core.cst$sym$ret,cljs.core.cst$sym$init,cljs.core.cst$sym$expr], null)),cljs.core.cst$kw$doc,"Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the\n  evaluation of expr at each step, returning ret.",cljs.core.cst$kw$line,2502,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_areduce,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,974,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_double,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1123,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_and_DASH_not,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,985,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_add_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$sigs], null)),cljs.core.cst$kw$doc,"params => positional-params* , or positional-params* & next-param\n  positional-param => binding-form\n  next-param => binding-form\n  name => symbol\n\n  Defines a function",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,4357,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_fn,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,972,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_short,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$line,1301,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_this,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,980,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_double,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,912,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_string_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$line,865,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_arguments,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1006,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_multiply_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$name,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"Binds name to expr, evaluates the first form in the lexical context\n  of that binding, then binds name to that result, repeating for each\n  successive form, returning the result of the last form.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,7274,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_as_DASH__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$test,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Evaluates test. If logical false, evaluates body in an implicit do.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,499,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_not,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$test,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Evaluates test. If logical true, evaluates body in an implicit do.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,493,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1116,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1055,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,947,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_keyword_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1003,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_multiply,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$line,2633,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_gen_DASH_apply_DASH_to,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"When expr is not nil, threads it into the first form (via ->>),\n  and when that result is not nil, through the next etc",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,7300,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_some_DASH__GT__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,988,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_dec,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$doc,"Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions.",cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$doc_DASH_string_QMARK_,cljs.core.cst$sym$attr_DASH_map_QMARK_,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$params_STAR_], null),cljs.core.cst$sym$prepost_DASH_map_QMARK_,cljs.core.cst$sym$body], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$doc_DASH_string_QMARK_,cljs.core.cst$sym$attr_DASH_map_QMARK_,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$params_STAR_], null),cljs.core.cst$sym$prepost_DASH_map_QMARK_,cljs.core.cst$sym$body),cljs.core.cst$sym$_PLUS_,cljs.core.cst$sym$attr_DASH_map_QMARK_], null)),cljs.core.cst$kw$line,2879,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defn,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,973,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_float,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$obj], null)),cljs.core.cst$kw$line,871,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_in,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ty], null)),cljs.core.cst$kw$line,2666,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_es6_DASH_iterable,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$idx,cljs.core.cst$sym$ret,cljs.core.cst$sym$expr], null)),cljs.core.cst$kw$doc,"Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting\n  each element of ret to the evaluation of expr, returning the new\n  array ret.",cljs.core.cst$kw$line,2487,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_amap,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$names], null)),cljs.core.cst$kw$doc,"defs the supplied var names with no bindings, useful for making forward declarations.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,2667,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_declare,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1024,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__DASH_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,2439,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_set,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$next], null)),cljs.core.cst$kw$doc,"Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil.",cljs.core.cst$kw$line,821,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_or,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type_DASH_sym,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"Extend a type to a series of protocols. Useful when you are\n  supplying the definitions explicitly inline. Propagates the\n  type as a type hint on the first argument of all fns.\n\n  type-sym may be\n\n   * default, meaning the definitions will apply for any value,\n     unless an extend-type exists for one of the more specific\n     cases below.\n   * nil, meaning the definitions will apply for the nil value.\n   * any of object, boolean, number, string, array, or function,\n     indicating the definitions will apply for values of the\n     associated base JavaScript types. Note that, for example,\n     string should be used instead of js/String.\n   * a JavaScript type not covered by the previous list, such\n     as js/RegExp.\n   * a type defined by deftype or defrecord.\n\n  (extend-type MyType\n    ICounted\n    (-count [c] ...)\n    Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y & zs] ...))",cljs.core.cst$kw$line,1521,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_extend_DASH_type,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted], null)),cljs.core.cst$kw$doc,"If form represents a macro form, returns its expansion,\n  else returns form.",cljs.core.cst$kw$line,2707,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_macroexpand_DASH_1,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1133,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_test,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fn_DASH_tail], null)),cljs.core.cst$kw$doc,"Creates and installs a new method of multimethod associated with dispatch-value. ",cljs.core.cst$kw$line,2583,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defmethod,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr], null)),cljs.core.cst$kw$doc,"Evaluates expr and prints the time it took. Returns the value of expr.",cljs.core.cst$kw$line,2588,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_time,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1076,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_zero_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,991,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_dec_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Expands into code that creates a fn that expects to be passed an\n  object and any args and calls the named instance method on the\n  object passing the args. Use when you want to treat a Java method as\n  a first-class fn. name may be type-hinted with the method receiver's\n  type in order to avoid reflective calls.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,3741,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_memfn,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$line,2462,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_obj,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,839,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_nil_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$specs], null)),cljs.core.cst$kw$doc,"Useful when you want to provide several implementations of the same\n  protocol all at once. Takes a single protocol and the implementation\n  of that protocol for one or more types. Expands into calls to\n  extend-type:\n\n  (extend-protocol Protocol\n    AType\n      (foo [x] ...)\n      (bar [x y] ...)\n    BType\n      (foo [x] ...)\n      (bar [x y] ...)\n    AClass\n      (foo [x] ...)\n      (bar [x y] ...)\n    nil\n      (foo [x] ...)\n      (bar [x y] ...))\n\n  expands into:\n\n  (do\n   (clojure.core/extend-type AType Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type BType Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type AClass Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type nil Protocol \n     (foo [x] ...) \n     (bar [x y] ...)))",cljs.core.cst$kw$file,"clojure/core_deftype.clj",cljs.core.cst$kw$line,831,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_extend_DASH_protocol,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$clauses], null)),cljs.core.cst$kw$doc,"Takes an expression and a set of test/form pairs. Threads expr (via ->)\n  through each form for which the corresponding test\n  expression is true. Note that, unlike cond branching, cond-> threading does\n  not short circuit after the first true test expression.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,7240,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_cond_DASH__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.",cljs.core.cst$kw$line,2513,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_dotimes,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1103,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_and,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"reify is a macro with the following structure:\n\n (reify options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of the protocol name followed by zero\n  or more method bodies:\n\n  protocol\n  (methodName [args+] body)*\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for Object methods. Note that\n  the first parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls\n  to the method head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  recur works to method heads The method bodies of reify are lexical\n  closures, and can refer to the surrounding local scope:\n\n  (str (let [f \"foo\"]\n       (reify Object\n         (toString [this] f))))\n  == \"foo\"\n\n  (seq (let [f \"foo\"]\n       (reify ISeqable\n         (-seq [this] (-seq f)))))\n  == (\\f \\o \\o))\n\n  reify always implements IMeta and IWithMeta and transfers meta\n  data of the form to the created object.\n\n  (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n  == {:k :v}",cljs.core.cst$kw$line,1226,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_reify,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,932,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_instance_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$line,2704,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_load_DASH_file_STAR_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$init], null)),cljs.core.cst$kw$doc,"defs name to have the root value of init iff the named var has no root value,\n  else init is unevaluated",cljs.core.cst$kw$line,603,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defonce,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,982,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_add,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$private,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$file,cljs.core.cst$kw$name,cljs.core.cst$kw$ns,cljs.core.cst$kw$macro],[true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$k], null),cljs.core.cst$sym$fkv], null)),"Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl.",1195,1,"cljs/core.cljc",cljs.core.cst$sym$cljs$core_SLASH_rfn,cljs.core.cst$sym$cljs$core,true]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$line,929,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_identical_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,994,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_divide_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$decls], null)),cljs.core.cst$kw$doc,"same as defn, yielding non-public def",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,4743,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defn_DASH_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$psym,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$doc_PLUS_methods], null)),cljs.core.cst$kw$doc,"A protocol is a named set of named methods and their signatures:\n\n  (defprotocol AProtocolName\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in\n  JavaScript parlance). defprotocol is dynamic, has no special compile-time\n  effect, and defines no new types.\n\n  (defprotocol P\n    (foo [this])\n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c]\n    P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n\n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo\n    (let [x 42]\n      (reify P\n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17",cljs.core.cst$kw$line,1862,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defprotocol,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1018,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_subtract,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$message], null)),cljs.core.cst$kw$doc,"Evaluates expr and throws an exception if it does not evaluate to\n  logical true.",cljs.core.cst$kw$line,2216,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_assert,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,906,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_true_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$line,2372,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_array,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$fnspecs,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n  Takes a vector of function specs and a body, and generates a set of\n  bindings of functions to their names. All of the names are available\n  in all of the definitions of the functions, as well as the body.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,6297,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_letfn,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1035,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__SLASH_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)),cljs.core.cst$kw$line,1156,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bitpos,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1112,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_or,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,2408,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_vector,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1060,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__GT__EQ_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target.",cljs.core.cst$kw$line,739,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_loop,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1130,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_flip,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$num,cljs.core.cst$sym$div], null)),cljs.core.cst$kw$line,1097,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_mod,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Evaluates exprs in a context in which *print-fn* is bound to .append\n  on a fresh StringBuffer.  Returns the string created by any nested\n  printing calls.",cljs.core.cst$kw$line,2643,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_with_DASH_out_DASH_str,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$added,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$file,cljs.core.cst$kw$name,cljs.core.cst$kw$ns,cljs.core.cst$kw$macro],[cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$clauses], null)),"Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an\n  IllegalArgumentException is thrown.","1.0",2081,1,"cljs/core.cljc",cljs.core.cst$sym$cljs$core_SLASH_condp,cljs.core.cst$sym$cljs$core,true]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$clauses], null)),cljs.core.cst$kw$doc,"Takes a set of test/expr pairs. It evaluates each test one at a\n  time.  If a test returns logical true, cond evaluates and returns\n  the value of the corresponding expr and doesn't evaluate any of the\n  other tests or exprs. (cond) returns nil.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,580,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_cond,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"When expr is not nil, threads it into the first form (via ->),\n  and when that result is not nil, through the next etc",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,7286,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_some_DASH__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quote,cljs.core.cst$sym$ns], null)], null)),cljs.core.cst$kw$doc,"Returns a map of the intern mappings for the namespace.",cljs.core.cst$kw$line,2672,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_interns,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seq_DASH_exprs,cljs.core.cst$sym$body_DASH_expr], null)),cljs.core.cst$kw$doc,"List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)]  [x y]))",cljs.core.cst$kw$line,2229,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_for,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values.",cljs.core.cst$kw$line,2068,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_binding,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$line,2419,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_map,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,976,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_byte,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$doc_DASH_string_QMARK_,cljs.core.cst$sym$attr_DASH_map_QMARK_,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$params_STAR_], null),cljs.core.cst$sym$body], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$doc_DASH_string_QMARK_,cljs.core.cst$sym$attr_DASH_map_QMARK_,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$params_STAR_], null),cljs.core.cst$sym$body),cljs.core.cst$sym$_PLUS_,cljs.core.cst$sym$attr_DASH_map_QMARK_], null)),cljs.core.cst$kw$doc,"Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called.",cljs.core.cst$kw$macro,true,cljs.core.cst$kw$line,2954,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defmacro,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,978,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_short,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1073,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_inc,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"binding => var-symbol temp-value-expr\n\n  Temporarily redefines vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its var.  After the body is\n  executed, the root values of all the vars will be set back to their\n  old values. Useful for mocking out functions during testing.",cljs.core.cst$kw$line,2046,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_with_DASH_redefs,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1127,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_clear,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$line,2699,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_locking,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,2399,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_list,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,965,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__PLUS_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$i,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$line,957,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_aset,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mm_DASH_name,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$options], null)),cljs.core.cst$kw$doc,"Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n    :default    the default dispatch value, defaults to :default\n    :hierarchy  the isa? hierarchy to use for dispatching\n                defaults to the global hierarchy",cljs.core.cst$kw$line,2537,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defmulti,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,789,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_str,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$line,851,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_coercive_DASH__EQ_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$line,2429,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_map,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$then], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$then,cljs.core.cst$sym$else,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$oldform], null)),cljs.core.cst$kw$doc,"bindings => binding-form test\n\n  If test is true, evaluates then with binding-form bound to the value of \n  test, if not, yields else",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1749,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_if_DASH_let,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,909,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_false_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$e,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$clauses], null)),cljs.core.cst$kw$doc,"Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an Error is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (ClojureScript) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type.",cljs.core.cst$kw$line,2145,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_case,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$doc,"Return true if argument exists, analogous to usage of typeof operator\n   in JavaScript.",cljs.core.cst$kw$line,916,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_exists_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1100,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_not,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,971,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_byte,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1085,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_max,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1065,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__EQ__EQ_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$doc,"Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed.\n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))",cljs.core.cst$kw$line,2654,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_lazy_DASH_cat,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Ignores body, yields nil",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,4555,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_comment,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$dest], null)),cljs.core.cst$kw$line,2769,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_copy_DASH_arguments,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$t,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$doc,"EXPERIMENTAL: Subject to change. Unsafely cast a value to a different type.",cljs.core.cst$kw$line,895,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unsafe_DASH_cast,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rsym,cljs.core.cst$sym$fields,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"(defrecord name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The record will have the (immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in JavaScript parlance). Note also\n  that recur calls to the method head should *not* pass the target object, it\n  will be supplied automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  The type will have implementations of several ClojureScript\n  protocol generated automatically: IMeta/IWithMeta (metadata support) and\n  IMap, etc.\n\n  In addition, defrecord will define type-and-value-based =,\n  and will define ClojureScript IHash and IEquiv.\n\n  Two constructors will be defined, one taking the designated fields\n  followed by a metadata map (nil for none) and an extension field\n  map (nil for none), and one taking only the fields (using nil for\n  meta and extension fields). Note that the field names __meta\n  and __extmap are currently reserved and should not be used when\n  defining your own records.\n\n  Given (defrecord TypeName ...), two factory functions will be\n  defined: ->TypeName, taking positional parameters for the fields,\n  and map->TypeName, taking a map of keywords to field values.",cljs.core.cst$kw$line,1793,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defrecord,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),cljs.core.cst$kw$line,2381,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_make_DASH_array,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1012,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_negate_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,997,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_inc,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$next], null)),cljs.core.cst$kw$doc,"Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true.",cljs.core.cst$kw$line,803,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_and,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,941,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_number_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comment], null)),cljs.core.cst$kw$doc,"Emit a top-level JavaScript multi-line comment. New lines will create a\n  new comment line. Comment block will be preceded and followed by a newline",cljs.core.cst$kw$line,881,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_comment,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,944,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_symbol_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"bindings => binding-form test\n\n   When test is not nil, evaluates body with binding-form bound to the\n   value of test",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1804,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_some,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,977,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_char,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$macro,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"Threads the expr through the forms. Inserts x as the\n  last item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  last item in second form, etc.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1602,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comment], null)),cljs.core.cst$kw$doc,"Emit an inline JavaScript comment.",cljs.core.cst$kw$line,901,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_inline_DASH_comment,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null)]),cljs.core.cst$sym$cljs$core,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$StringBuffer,cljs.core.cst$sym$goog$string$StringBuffer], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$sym$goog$math$Long,cljs.core.cst$sym$goog$math$Integer,cljs.core.cst$sym$gstring,cljs.core.cst$sym$goog$string,cljs.core.cst$sym$gobject,cljs.core.cst$sym$goog$object,cljs.core.cst$sym$garray,cljs.core.cst$sym$goog$array,cljs.core.cst$sym$StringBuffer],[cljs.core.cst$sym$goog$math$Long,cljs.core.cst$sym$goog$math$Integer,cljs.core.cst$sym$goog$string,cljs.core.cst$sym$goog$string,cljs.core.cst$sym$goog$object,cljs.core.cst$sym$goog$object,cljs.core.cst$sym$goog$array,cljs.core.cst$sym$goog$array,cljs.core.cst$sym$goog$string$StringBuffer]),null,cljs.core.PersistentHashMap.fromArrays([cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentHashSet,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH__GT_clj,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$sort_DASH_by,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ITransientAssociative,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding associativity to transient collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$t_cljs$core10131,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$print_DASH_meta_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts,cljs.core.cst$sym$obj], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$m3_DASH_hash_DASH_int,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$stepper,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iter], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_str_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$obj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null))], null))),cljs.core.cst$kw$doc,"Support so that collections can implement toString without\n   loading all the printing machinery."], null)),cljs.core.with_meta(cljs.core.cst$sym$eduction,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform_STAR_,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a reducible/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce/iterator is called.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xforms)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xforms], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$branch_QMARK_,cljs.core.cst$sym$children,cljs.core.cst$sym$root], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree."], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_remainder_DASH_int,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$uuid,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$seq,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings."], null)),cljs.core.with_meta(cljs.core.cst$sym$Volatile,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IVolatile,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$IUUID,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"A marker protocol for UUIDs",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.cst$sym$INIT,cljs.core.with_meta(cljs.core.cst$sym$find_DASH_ns,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$contains_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'."], null)),cljs.core.with_meta(cljs.core.cst$sym$every_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if (pred x) is logical true for every x in coll, else\n  false."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ES6IteratorSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$Var,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$keep_DASH_indexed,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentQueueSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$subs,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$doc,"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$set,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a set of the distinct elements of coll."], null)),cljs.core.with_meta(cljs.core.cst$sym$compare_DASH_indexed,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Compare indexed collection.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$take_DASH_last,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec."], null)),cljs.core.with_meta(cljs.core.cst$sym$IndexedSeq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_set,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Set bit at index n"], null)),cljs.core.cst$sym$string_DASH_hash_DASH_cache_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$qualified_DASH_keyword_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a keyword with a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Eduction,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_add,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$found], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ES6SetEntriesIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_with_DASH_meta,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,cljs.core.cst$kw$doc,"Returns a new object with value of o and metadata meta added to it.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$reset_DASH_cache,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$hierarchy], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentArrayMapIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$cnt], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentArrayMapIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$butlast,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return a seq of all but the last item in coll, in linear time"], null)),cljs.core.with_meta(cljs.core.cst$sym$tail_DASH_off,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_subtract_DASH_int,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_iterator,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IIterable,cljs.core.cst$kw$doc,"Returns an iterator for coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$take_DASH_nth,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)))),cljs.core.cst$kw$doc,"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$first,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$native_DASH_satisfies_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Internal - do not use!"], null)),cljs.core.with_meta(cljs.core.cst$sym$seq_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return true if s satisfies ISeq"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_global_DASH_hierarchy,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$UUID,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null,cljs.core.cst$sym$cljs$core_SLASH_IUUID,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq_DASH_from,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$println_DASH_str,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"println to a string, returning it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$inst_DASH_ms,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null))),cljs.core.cst$kw$doc,"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT"], null)),cljs.core.with_meta(cljs.core.cst$sym$linear_DASH_traversal_DASH_nth,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$iterate,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects",cljs.core.cst$kw$added,"1.0"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_empty,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$newline,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a newline using *print-fn*",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ILookup,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for looking up a value in a data structure.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_lookup,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_rest,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$kw$doc,"Return a new collection of coll with the first chunk removed.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$write_DASH_all,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$writer,cljs.core.cst$sym$ss)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$fn_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Return true if f is a JavaScript function or satisfies the Fn protocol."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefer_DASH_method,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,cljs.core.cst$kw$doc,"Returns a new collection of coll with a mapping from key k to\n     value v added to it.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$doall,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$keyword_DASH_identical_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Efficient test to determine that two keywords are identical."], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_err_DASH_fn_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$doc,"Each runtime environment provides a different way to print error output.\n  Whatever function *print-err-fn* is bound to will be passed any\n  Strings which should be printed.",cljs.core.cst$kw$dynamic,true], null)),cljs.core.with_meta(cljs.core.cst$sym$pv_DASH_aset,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$prefers,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, returns a map of preferred value -> set of other values"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_js_DASH__GT_clj,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeClojure,cljs.core.cst$kw$doc,"Transforms JavaScript values to Clojure",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$LazySeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$dedupe,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_editable_DASH_array_DASH_for,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$i], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ES6Iterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$VectorNode,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$dissoc,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$atom,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null))),cljs.core.cst$kw$doc,"Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_shift_DASH_right,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift right"], null)),cljs.core.cst$sym$_STAR_clojurescript_DASH_version_STAR_,cljs.core.with_meta(cljs.core.cst$sym$_DASH_first,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISeq,cljs.core.cst$kw$doc,"Returns the first item in the collection coll. Used by cljs.core/first.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$peek,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$IKVReduce,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for associative types that can reduce themselves\n  via a function of key and val. Called by cljs.core/reduce-kv.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$aget,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))),cljs.core.cst$kw$doc,"Returns the value at the index.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentTreeMapSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_write,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$kw$doc,"Writes s with writer and returns the result.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$mk_DASH_bound_DASH_fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$last,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return the last item in coll, in linear time"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_default_DASH_dispatch_DASH_val,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pr,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_seq_DASH_push,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$namespace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns the namespace String of a symbol or keyword, or nil if not present."], null)),cljs.core.with_meta(cljs.core.cst$sym$empty_DASH_unordered_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$obj_DASH_map,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new object map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$Reduced,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ICollection,cljs.core.cst$kw$doc,"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$NodeSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_EQ_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$ITransientMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding mapping functionality to transient collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll without the mapping for key."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$push_DASH_tail,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tailnode], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$take,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$vector_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IVector"], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of_DASH_equiv_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$bitmap_DASH_indexed_DASH_node_DASH_index,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bitmap,cljs.core.cst$sym$bit], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$boolean,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to boolean"], null)),cljs.core.with_meta(cljs.core.cst$sym$IChunk,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for accessing the items of a chunk.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_drop_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new chunk of coll with the first item removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_shift_DASH_left,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift left"], null)),cljs.core.with_meta(cljs.core.cst$sym$random_DASH_uuid,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$rand_DASH_int,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns a random integer between 0 (inclusive) and n (exclusive)."], null)),cljs.core.with_meta(cljs.core.cst$sym$aclone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null))),cljs.core.cst$kw$doc,"Returns a javascript array, cloned from the passed in array"], null)),cljs.core.with_meta(cljs.core.cst$sym$BlackNode,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$vreset_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$newval], null))),cljs.core.cst$kw$doc,"Sets the value of volatile to newval without regard for the\n   current value. Returns newval."], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$dec,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than num."], null)),cljs.core.with_meta(cljs.core.cst$sym$map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$juxt,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null))),cljs.core.cst$kw$doc,"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentQueueIter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_LT_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$inode_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$obj_DASH_map_DASH__GT_hash_DASH_map,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$test,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception"], null)),cljs.core.with_meta(cljs.core.cst$sym$rest,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument."], null)),cljs.core.with_meta(cljs.core.cst$sym$ex_DASH_data,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentArrayMapSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_drop_DASH_first,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunk,cljs.core.cst$kw$doc,"Return a new chunk of coll with the first item removed.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$isa_QMARK_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null))),cljs.core.cst$kw$doc,"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$boolean_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Boolean"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_clone,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,cljs.core.cst$kw$doc,"Creates a clone of value.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$munge,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$empty_DASH_ordered_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$DEMUNGE_MAP,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ES6IteratorSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_NeverEquiv,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$t_cljs$core10128,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$re_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of successive matches of re in s."], null)),cljs.core.with_meta(cljs.core.cst$sym$char_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript char."], null)),cljs.core.with_meta(cljs.core.cst$sym$make_DASH_hierarchy,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Creates a hierarchy object for use with derive, isa? etc."], null)),cljs.core.with_meta(cljs.core.cst$sym$Symbol,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$t_cljs$core7984,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$tv_DASH_push_DASH_tail,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tail_DASH_node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reduce,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IReduce,cljs.core.cst$kw$doc,"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_count,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ICounted,cljs.core.cst$kw$doc,"Calculates the count of coll in constant time. Used by cljs.core/count.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$keep,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$char,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to char"], null)),cljs.core.with_meta(cljs.core.cst$sym$mapcat,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$added,"1.0",cljs.core.cst$kw$static,true,cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided"], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_long,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to long by stripping decimal places. Identical to `int'."], null)),cljs.core.cst$sym$m3_DASH_seed,cljs.core.with_meta(cljs.core.cst$sym$some_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is not nil, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_negate,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$symbol_DASH_identical_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Efficient test to determine that two symbols are identical."], null)),cljs.core.with_meta(cljs.core.cst$sym$reverse,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reverse order. Not lazy."], null)),cljs.core.with_meta(cljs.core.cst$sym$inst_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies Inst"], null)),cljs.core.with_meta(cljs.core.cst$sym$range,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_count,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Counts the number of bits set in n"], null)),cljs.core.with_meta(cljs.core.cst$sym$create_DASH_node,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$sort,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_MetaFn,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$afn,cljs.core.cst$sym$meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_inc_DASH_int,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_compare,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IComparable,cljs.core.cst$kw$doc,"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$map_DASH_indexed,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_list,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$rand_DASH_nth,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection."], null)),cljs.core.with_meta(cljs.core.cst$sym$comp,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null))),cljs.core.cst$kw$doc,"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_chunk,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$dispatch_DASH_fn,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, return it's dispatch-fn."], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_shift_DASH_right_DASH_zero_DASH_fill,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"DEPRECATED: Bitwise shift right with zero fill"], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_reserved_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_as_DASH_transient,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$dorun,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_sequential_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$simple_DASH_symbol_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol without a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$accumulating_DASH_seq_DASH_count,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IIndexed,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for collections to provide indexed-based access to their items.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_nth,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$disj,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IPrintWithWriter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"The old IPrintable protocol's implementation consisted of building a giant\n   list of strings to concatenate.  This involved lots of concat calls,\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\n   be implemented efficiently in terms of e.g. a StringBuffer append.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_pr_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_UUID,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null,cljs.core.cst$sym$cljs$core_SLASH_IUUID,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uuid,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IVector,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding vector functionality to collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new vector with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IIterable,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for iterating over a collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an iterator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_2,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"bound in a repl thread to the second most recent value printed"], null)),cljs.core.with_meta(cljs.core.cst$sym$Eduction,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pv_DASH_clone_DASH_node,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$cons,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentTreeSet,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_HashSetIter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ns_DASH_lookup,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj,cljs.core.cst$sym$k], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$floats,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$TransientVector,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$pos_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is greater than zero, else false"], null)),cljs.core.with_meta(cljs.core.cst$sym$fnil,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null))),cljs.core.cst$kw$doc,"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$merge_DASH_with,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null))),cljs.core.cst$kw$doc,"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$nthrest,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns the nth rest of coll, coll when n is 0."], null)),cljs.core.with_meta(cljs.core.cst$sym$sequential_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies ISequential"], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_replace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$m3_DASH_mix_DASH_H1,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$k1], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$RecordIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TransientArrayMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$prim_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_level_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$shuffle,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Return a random permutation of coll"], null)),cljs.core.with_meta(cljs.core.cst$sym$ChunkedSeq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_keyword,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$find,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present."], null)),cljs.core.with_meta(cljs.core.cst$sym$alength,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null))),cljs.core.cst$kw$doc,"Returns the length of the array. Works on arrays of all types."], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_xor,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise exclusive or",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_IndexedSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ObjMap,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$unsigned_DASH_bit_DASH_shift_DASH_right,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift right with zero fill"], null)),cljs.core.with_meta(cljs.core.cst$sym$ES6SetEntriesIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$neg_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is less than zero, else false"], null)),cljs.core.with_meta(cljs.core.cst$sym$Cons,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_method,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_StringIter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_invoke,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_List,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$m3_DASH_mix_DASH_K1,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k1], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_float,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$undefined_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x identical to the JavaScript undefined value."], null)),cljs.core.with_meta(cljs.core.cst$sym$IMeta,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for accessing the metadata of an object.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns the metadata of object o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reduced_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$r], null))),cljs.core.cst$kw$doc,"Returns true if x is the result of a call to reduced"], null)),cljs.core.with_meta(cljs.core.cst$sym$apply_DASH_to,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$argc,cljs.core.cst$sym$args], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$disj_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_lookup,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ILookup,cljs.core.cst$kw$doc,"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ICloneable,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for cloning a value.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a clone of value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IEncodeClojure,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,null,cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_js_DASH__GT_clj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms JavaScript values to Clojure"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$booleans,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayList,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$RSeq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$mask,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$int_DASH_array,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$find_DASH_and_DASH_cache_DASH_best_DASH_method,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$set_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x satisfies ISet"], null)),cljs.core.with_meta(cljs.core.cst$sym$iterable_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x implements IIterable protocol."], null)),cljs.core.with_meta(cljs.core.cst$sym$cat,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ES6EntriesIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$divide,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_reserved_DASH_arr,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pr_DASH_writer,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$flush,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$set_DASH_from_DASH_indexed_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iseq], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$take_DASH_while,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$vary_DASH_meta,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$INext,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for accessing the next items of a collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_next,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$is_proto_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.cst$sym$START,cljs.core.with_meta(cljs.core.cst$sym$ICounted,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding the ability to count a collection in constant time.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_count,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Calculates the count of coll in constant time. Used by cljs.core/count."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IMapEntry,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for examining a map entry.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_LT__EQ_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$conj_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IStack,cljs.core.cst$kw$doc,"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of_DASH_identical_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$repeatedly,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$zipmap,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keys,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"Returns a map with the keys mapped to the corresponding vals."], null)),cljs.core.with_meta(cljs.core.cst$sym$IStack,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for collections to provide access to their items as stacks. The top\n  of the stack should be accessed in the most efficient way for the different\n  data structures.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_peek,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the item from the top of the stack. Is used by cljs.core/peek."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_watch,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Removes watcher that corresponds to key from this.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IVolatile,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding volatile functionality.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_vreset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$remove,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_BitmapIndexedNode,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the product of nums. (*) returns 1.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$re_DASH_pattern,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns an instance of RegExp which has compiled the provided string."], null)),cljs.core.with_meta(cljs.core.cst$sym$min,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the least of the nums.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_persistent_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,cljs.core.cst$kw$doc,"Creates a persistent data structure from tcoll and returns it.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_nth,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,cljs.core.cst$kw$doc,"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pop_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),cljs.core.cst$kw$doc,"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns tcoll"], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_append,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b,cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$prn_DASH_str,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as pr-str followed by (newline)",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IReversible,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for reversing a seq.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_rseq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reversed order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reversible_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies? IReversible."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_realized_QMARK_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IPending,cljs.core.cst$kw$doc,"Returns true if a value for x has been produced, false otherwise.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_watch,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref_DASH_with_DASH_timeout,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IDerefWithTimeout,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$conj,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$doc,"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$flatten1,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Take a collection of collections, and return a lazy seq\n  of items from the inner collection"], null)),cljs.core.with_meta(cljs.core.cst$sym$transduce,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.cst$sym$fixture1,cljs.core.with_meta(cljs.core.cst$sym$_DASH_swap_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISwap,cljs.core.cst$kw$doc,"Swaps the value of o to be (apply f current-value-of-atom args).",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_length_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_delete,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null))),cljs.core.cst$kw$doc,"Delete a property from a JavaScript object."], null)),cljs.core.with_meta(cljs.core.cst$sym$truth_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Internal - do not use!"], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_MultiFn,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$key_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_MultiStepper,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IEncodeJS,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,null,cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clj_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Recursively transforms clj values to JavaScript"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_key_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$new_DASH_path,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$compare_DASH_and_DASH_set_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null))),cljs.core.cst$kw$doc,"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false."], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_copy_DASH_downward,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pack_DASH_array_DASH_node,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array_DASH_node,cljs.core.cst$sym$edit,cljs.core.cst$sym$idx], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$interleave,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the first item in each coll, then the second etc.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$print_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$map_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IMap"], null)),cljs.core.cst$sym$m3_DASH_C1,cljs.core.with_meta(cljs.core.cst$sym$get,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$identity,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns its argument."], null)),cljs.core.with_meta(cljs.core.cst$sym$into,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null))),cljs.core.cst$kw$doc,"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$long,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to long by stripping decimal places. Identical to `int'."], null)),cljs.core.with_meta(cljs.core.cst$sym$double,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$volatile_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a volatile."], null)),cljs.core.with_meta(cljs.core.cst$sym$ChunkBuffer,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$HashSetIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_key,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$kw$doc,"Returns the key of the map entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_t_cljs$core7984,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta7985], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$nfirst,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (next (first x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$StringBufferWriter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),cljs.core.cst$kw$doc,"Returns the metadata of obj, returns nil if there is no metadata."], null)),cljs.core.with_meta(cljs.core.cst$sym$tv_DASH_editable_DASH_tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,cljs.core.cst$kw$doc,"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IHash,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding hashing functionality to a type.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the hash code of o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_and_DASH_not,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise and with complement",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$var_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Returns true if v is of type cljs.core.Var"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_comparator,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns the comparator for coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_add_DASH_int,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the sum of nums. (+) returns 0.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_ordered_DASH_coll,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms."], null)),cljs.core.with_meta(cljs.core.cst$sym$extend_DASH_object_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$fn_DASH_map], null))),cljs.core.cst$kw$doc,"Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implicit this (via the this-as macro) will resolve to the\n  object that the function is attached."], null)),cljs.core.with_meta(cljs.core.cst$sym$do_DASH_assoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$reset_DASH_meta_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$m], null))),cljs.core.cst$kw$doc,"Atomically resets the metadata for an atom"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_KeySeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IEquiv,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding value comparison functionality to a type.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_equiv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if o and other are equal, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$cycle,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy (infinite!) sequence of repetitions of the items in coll."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IDeref,cljs.core.cst$kw$doc,"Returns the value of the reference o.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_writer_DASH_ex_DASH_info,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$empty_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$TaggedLiteral,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$short,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_clj_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$kw$doc,"Recursively transforms clj values to JavaScript",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_first,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$kw$doc,"Returns the first chunk in coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$filterv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TaggedLiteral,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$tv_DASH_editable_DASH_root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$hash,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),cljs.core.cst$kw$doc,"Returns the hash code of its argument. Note this is the hash code\n   consistent with =."], null)),cljs.core.with_meta(cljs.core.cst$sym$quot,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"quot[ient] of dividing numerator by denominator."], null)),cljs.core.with_meta(cljs.core.cst$sym$ns_DASH_interns_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_double,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_target_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"Var bound to the name value of the compiler build :target option.\n  For example, if the compiler build :target is :nodejs, *target* will be bound\n  to \"nodejs\". *target* is a Google Closure define and can be set by compiler\n  :closure-defines option.",cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ChunkedCons,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ranged_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ITransientVector,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding vector functionality to transient collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with the last item removed from it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$longs,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$not_EQ_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Same as (not (= obj1 obj2))",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$set_DASH_print_DASH_err_DASH_fn_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Set *print-err-fn* to f."], null)),cljs.core.with_meta(cljs.core.cst$sym$string_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript string."], null)),cljs.core.with_meta(cljs.core.cst$sym$es6_DASH_iterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"EXPERIMENTAL: Return a ES2015 compatible iterator for coll."], null)),cljs.core.with_meta(cljs.core.cst$sym$Delay,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$munge_DASH_str,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_str_DASH_with_DASH_opts,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a sequence of objects to a string, observing all the\n  options given in opts"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_RecordIter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter], null)))], null)),cljs.core.cst$sym$m3_DASH_C2,cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Symbol,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$_meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_newline_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical false will drop newlines from printing calls.\n  This is to work around the implicit newlines emitted by standard JavaScript\n  console objects."], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_multiply_DASH_int,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the product of nums. (*) returns 1.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$remove_DASH_all_DASH_methods,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Removes all of the methods of multimethod."], null)),cljs.core.with_meta(cljs.core.cst$sym$trampoline,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_opts,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_1,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"bound in a repl thread to the most recent value printed"], null)),cljs.core.with_meta(cljs.core.cst$sym$vec,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_meta_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_notify_DASH_watches,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Calls all watchers with this, oldval and newval.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$MultiFn,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$int,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to int by stripping decimal places."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ValSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$rand,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$second,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (next x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$find_DASH_ns_DASH_obj,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$IEditableCollection,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for collections which can transformed to transients.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_as_DASH_transient,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_combine,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seed,cljs.core.cst$sym$hash], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_GT_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_name,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_INamed,cljs.core.cst$kw$doc,"Returns the name String of x.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$replace,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$int_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is an integer"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Subvec,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$associative_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements Associative"], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_int,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to int by stripping decimal places."], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_keys,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj], null))),cljs.core.cst$kw$doc,"Return the JavaScript keys for an object."], null)),cljs.core.with_meta(cljs.core.cst$sym$inst_DASH_ms_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_Inst,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ES6EntriesIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$keyword_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Keyword"], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$force,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is a Delay, returns the (possibly cached) value of its expression, else returns x"], null)),cljs.core.with_meta(cljs.core.cst$sym$group_DASH_by,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_rseq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IReversible,cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reversed order.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$prn,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as pr followed by (newline).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$tv_DASH_pop_DASH_tail,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$default_DASH_dispatch_DASH_val,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, return it's default-dispatch-val."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Atom,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$state,cljs.core.cst$sym$meta,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentHashMap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_multiply,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the product of nums. (*) returns 1.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayNodeSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$even_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is even, throws an exception if n is not an integer"], null)),cljs.core.with_meta(cljs.core.cst$sym$es6_DASH_iterator_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_dec,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than x, an int."], null)),cljs.core.with_meta(cljs.core.cst$sym$Inst,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,null,cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$inst_DASH_ms_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_collision_DASH_node_DASH_find_DASH_index,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$cnt,cljs.core.cst$sym$key], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$persistent_DASH_array_DASH_map_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$RangeIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$MultiStepper,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$tagged_DASH_literal_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Return true if the value is the data representation of a tagged literal"], null)),cljs.core.with_meta(cljs.core.cst$sym$double_DASH_array,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$create_DASH_ns,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null))),cljs.core.cst$kw$doc,"Bootstrap only.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_EmptyList,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$seq_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$spread,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arglist], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$balance_DASH_left,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$ins,cljs.core.cst$sym$right], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$rseq,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rev], null))),cljs.core.cst$kw$doc,"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil"], null)),cljs.core.with_meta(cljs.core.cst$sym$ex_DASH_cause,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$IReset,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding resetting functionality.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of o to new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IEmptyableCollection,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for creating an empty collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_empty,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_map_DASH_index_DASH_of,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ex_DASH_message,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_NodeIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$string_DASH_print,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$float,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.cst$sym$fixture2,cljs.core.with_meta(cljs.core.cst$sym$IRecord,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker interface indicating a record object",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_str,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$first_DASH_array_DASH_for_DASH_longvec,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$es6_DASH_set_DASH_entries_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$concat,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null))),cljs.core.cst$kw$doc,"Returns a lazy seq representing the concatenation of the elements in the supplied colls.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_methods,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_reserved,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|Object}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IDerefWithTimeout,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,null,cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref_DASH_with_DASH_timeout,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$symbol,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null))),cljs.core.cst$kw$doc,"Returns a Symbol with the given namespace and name.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$to_DASH_array_DASH_2d,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll."], null)),cljs.core.with_meta(cljs.core.cst$sym$Subvec,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ExceptionInfo,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@constructor"], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$message,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$mod,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$ISet,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding set functionality to a collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll that does not contain v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pop,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast."], null)),cljs.core.with_meta(cljs.core.cst$sym$IPending,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for types which can have a deferred realization. Currently only\n  implemented by Delay and LazySeq.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_realized_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if a value for x has been produced, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_entry_DASH_key,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns the key for entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$CHAR_MAP,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pop_DASH_tail,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$dissoc_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"Returns a transient map that doesn't contain a mapping for key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reductions,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$indexed_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements nth in constant time"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_equiv,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,cljs.core.cst$kw$doc,"Returns true if o and other are equal, false otherwise.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_RangeIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayNode,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$assoc_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null))),cljs.core.cst$kw$doc,"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_set,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reduce_DASH_kv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals."], null)),cljs.core.with_meta(cljs.core.cst$sym$reset_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null))),cljs.core.cst$kw$doc,"Sets the value of atom to newval without regard for the\n  current value. Returns new-value."], null)),cljs.core.with_meta(cljs.core.cst$sym$name,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_RedNode,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_array_DASH_for,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$Fn,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker protocol",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ffirst,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (first x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayNodeIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$sorted_DASH_set,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new sorted set with supplied keys.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_with_DASH_opts,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a sequence of objects using string-print, observing all\n  the options given in opts"], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentTreeMap,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentTreeMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$cnt,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_reduce,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$counted_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements count in constant time"], null)),cljs.core.with_meta(cljs.core.cst$sym$tagged_DASH_literal,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$symbol_QMARK_,cljs.core.cst$sym$tag)], null)], null)))),cljs.core.cst$kw$doc,"Construct a data representation of a tagged literal from a\n  tag symbol and a form."], null)),cljs.core.with_meta(cljs.core.cst$sym$println,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as print followed by (newline)",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$assoc_DASH_in,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created."], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentHashSet,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_test,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Test bit at index n"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Namespace,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$name], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$TransientHashMap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentHashMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$root,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_extend_DASH_kv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ISwap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding swapping functionality.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_swap_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Swaps the value of o to be (apply f current-value-of-atom args)."], null)),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ChunkedCons,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$memoize,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use."], null)),cljs.core.with_meta(cljs.core.cst$sym$alter_DASH_meta_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_StringBufferWriter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sb], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$zero_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is zero, else false"], null)),cljs.core.with_meta(cljs.core.cst$sym$tv_DASH_ensure_DASH_editable,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$simple_DASH_keyword_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a keyword without a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_indexOf,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_main_DASH_cli_DASH_fn_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"When compiled for a command-line target, whatever function\n  *main-cli-fn* is set to will be called with the command-line\n  argv as arguments"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IVector,cljs.core.cst$kw$doc,"Returns a new vector with value val added at position n.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_dec_DASH_int,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than x, an int."], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_imap,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$dominates,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$persistent_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),cljs.core.cst$kw$doc,"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception."], null)),cljs.core.with_meta(cljs.core.cst$sym$set_DASH_print_DASH_fn_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Set *print-fn* to f."], null)),cljs.core.with_meta(cljs.core.cst$sym$nnext,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (next (next x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$Box,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$balance_DASH_right,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$ins], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$throw_DASH_no_DASH_method_DASH_error,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$demunge_DASH_str,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$munged_DASH_name], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$add_DASH_watch,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1"], null)),cljs.core.with_meta(cljs.core.cst$sym$not_DASH_every_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns false if (pred x) is logical true for every x in\n  coll, else true."], null)),cljs.core.with_meta(cljs.core.cst$sym$rem,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"remainder of dividing numerator by denominator."], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_sb_DASH_with_DASH_opts,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_HashMapIter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$BitmapIndexedNode,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_NodeSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$some,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)"], null)),cljs.core.with_meta(cljs.core.cst$sym$INamed,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding a name.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_name,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the name String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_namespace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the namespace String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Box,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IReduce,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for seq types that can reduce themselves.\n  Called by cljs.core/reduce.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$neg_DASH_int_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a negative integer"], null)),cljs.core.with_meta(cljs.core.cst$sym$drop,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$NodeIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_obj,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"Create JavaSript object from an even number arguments representing\n  interleaved keys and values.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ITransientCollection,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding basic functionality to transient collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Adds value val to tcoll and returns tcoll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_persistent_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a persistent data structure from tcoll and returns it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$Atom,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$nth,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$sorted_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies ISorted"], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is nil, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$split_DASH_at,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of [(take n coll) (drop n coll)]"], null)),cljs.core.with_meta(cljs.core.cst$sym$TransientHashSet,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_e,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"bound in a repl thread to the most recent exception caught by the repl"], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_map_DASH_extend_DASH_kv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$prn_DASH_str_DASH_with_DASH_opts,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Same as pr-str-with-opts followed by (newline)"], null)),cljs.core.cst$sym$not_DASH_native,cljs.core.with_meta(cljs.core.cst$sym$random_DASH_sample,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$select_DASH_keys,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map,cljs.core.cst$sym$keyseq], null))),cljs.core.cst$kw$doc,"Returns a map containing only those entries in map whose key is in keys"], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_and,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise and",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bounded_DASH_count,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq",cljs.core.cst$kw$added,"1.9"], null)),cljs.core.with_meta(cljs.core.cst$sym$update,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$gensym_counter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$find_DASH_macros_DASH_ns,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$list_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of_DASH_keyword_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Keyword,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$update_DASH_in,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$prefer_DASH_method,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val_DASH_x,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null))),cljs.core.cst$kw$doc,"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict"], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_symbol,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ensure_DASH_reduced,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is already reduced?, returns it, else returns (reduced x)"], null)),cljs.core.with_meta(cljs.core.cst$sym$edit_DASH_and_DASH_set,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,6,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentArrayMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$instance_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$mix_DASH_collection_DASH_hash,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_basis,cljs.core.cst$sym$count], null))),cljs.core.cst$kw$doc,"Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms."], null)),cljs.core.with_meta(cljs.core.cst$sym$re_DASH_find,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups."], null)),cljs.core.with_meta(cljs.core.cst$sym$run_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proc,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil"], null)),cljs.core.with_meta(cljs.core.cst$sym$char_DASH_escapes,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$ES6Iterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_t_cljs$core10128,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta10129], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_add,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the sum of nums. (+) returns 0.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$not,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is logical false, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_vreset_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IVolatile,cljs.core.cst$kw$doc,"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$fn_DASH__GT_comparator,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator."], null)),cljs.core.with_meta(cljs.core.cst$sym$with_DASH_meta,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$unreduced,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is reduced?, returns (deref x), else returns x"], null)),cljs.core.with_meta(cljs.core.cst$sym$record_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IRecord"], null)),cljs.core.with_meta(cljs.core.cst$sym$type,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return x's constructor."], null)),cljs.core.with_meta(cljs.core.cst$sym$identical_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Tests if 2 arguments are the same object"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_namespace,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_INamed,cljs.core.cst$kw$doc,"Returns the namespace String of x.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_divide_DASH_int,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ns_DASH_name,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$swap_DASH_global_DASH_hierarchy_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$max_DASH_key,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the x for which (k x), a number, is greatest.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentTreeSet,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$tree_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_out_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ChunkBuffer,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_string,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ValSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefers,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$set_DASH_validator_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$val], null))),cljs.core.cst$kw$doc,"Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed."], null)),cljs.core.with_meta(cljs.core.cst$sym$ident_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_meta,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMeta,cljs.core.cst$kw$doc,"Returns the metadata of object o.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$RedNode,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dispatch_DASH_fn,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_IndexedSeqIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_method,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$balance_DASH_left_DASH_del,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$del,cljs.core.cst$sym$right], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$swap_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$vals,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_next,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first chunk.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_subtract,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$remove_DASH_pair,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding mapping functionality to collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the mapping for key k."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_SeqIter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$sorted_DASH_set_DASH_by,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new sorted set with supplied keys, using the supplied comparator.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentVector,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 23, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 21, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$cloneable_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Return true if x implements ICloneable protocol."], null)),cljs.core.with_meta(cljs.core.cst$sym$qualified_DASH_ident_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword with a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_string_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$key_DASH_test,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$other], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_LazyTransformer,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$stepper,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$true_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is the value true, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$find_DASH_ns_DASH_obj_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ctxt,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$array,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$array,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$var_DASH_args], null))),cljs.core.cst$kw$doc,"Creates a new javascript array.\n@param {...*} var_args"], null)),cljs.core.with_meta(cljs.core.cst$sym$print,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Prints the object(s) using string-print.\n  print and println produce output for human consumption."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_peek,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IStack,cljs.core.cst$kw$doc,"Returns the item from the top of the stack. Is used by cljs.core/peek.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ISeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for collections to provide access to their items as sequences.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first item in the collection coll. Used by cljs.core/first."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_rest,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$empty,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll, or nil"], null)),cljs.core.with_meta(cljs.core.cst$sym$remove_DASH_method,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),cljs.core.cst$kw$doc,"Removes the method of multimethod associated with dispatch-value."], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentQueueSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$balance_DASH_right_DASH_del,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$del], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$volatile_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_SLASH_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bitpos,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_or,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise or",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$m3_DASH_fmix,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$len], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$vector,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Creates a new vector containing the args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_coll,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$clone_DASH_and_DASH_set,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH__GT_transient_DASH_hash_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_GT__EQ_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TransientHashSet,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$drop_DASH_last,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return a lazy sequence of all but the last n (default 1) items in coll",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayIter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$object_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x's constructor is Object"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayNodeSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_append,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$left,cljs.core.cst$sym$right], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$not_DASH_empty,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"If coll is empty, returns nil, else coll"], null)),cljs.core.with_meta(cljs.core.cst$sym$distinct,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$partition,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IMultiFn,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,null,cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentHashMap.fromArrays([cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefer_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_default_DASH_dispatch_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_methods,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefers,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dispatch_DASH_fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_get_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null))],[new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null)])], null)], null)),cljs.core.cst$sym$DEMUNGE_PATTERN,cljs.core.with_meta(cljs.core.cst$sym$fix,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$q], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$EmptyList,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$HashMapIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_t_cljs$core7987,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta7988], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IAssociative,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding associativity to collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_contains_DASH_key_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if k is a key in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with a mapping from key k to\n     value v added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_flip,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Flip bit at index n"], null)),cljs.core.with_meta(cljs.core.cst$sym$long_DASH_array,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$descendants,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$imul,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Delay,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$value,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_for,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$merge,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null))),cljs.core.cst$kw$doc,"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ISeqable,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding the ability to a type to be transformed into a sequence.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a seq of o, or nil if o is empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_mod,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"Modulus of num and div with original javascript behavior. i.e. bug for negative numbers"], null)),cljs.core.with_meta(cljs.core.cst$sym$integer_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is an integer."], null)),cljs.core.with_meta(cljs.core.cst$sym$MetaFn,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$NS_CACHE,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$doc,"Bootstrap only.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$mapv,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$partition_DASH_all,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$partition_DASH_by,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ISequential,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker interface indicating a persistent collection of sequential items",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_LazySeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$equiv_DASH_map,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Assumes y is a map. Returns true if x equals y, otherwise returns\n  false."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Volatile,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IVolatile,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$state,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$object_DASH_array,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$Keyword,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$derive,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null))),cljs.core.cst$kw$doc,"Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$seq_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IChunkedSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for accessing a collection as sequential chunks.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first chunk in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new collection of coll with the first chunk removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$special_DASH_symbol_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x names a special form"], null)),cljs.core.with_meta(cljs.core.cst$sym$compare_DASH_keywords,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ancestors,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$subseq,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null))),cljs.core.cst$kw$doc,"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$LazyTransformer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$gensym,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null))),cljs.core.cst$kw$doc,"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_next,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_INext,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_HashCollisionNode,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$delay_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"returns true if x is a Delay created with delay"], null)),cljs.core.with_meta(cljs.core.cst$sym$create_DASH_inode_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$flatten,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMap,cljs.core.cst$kw$doc,"Returns a new collection of coll without the mapping for key k.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$doubles,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_contains_DASH_key_QMARK_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,cljs.core.cst$kw$doc,"Returns true if k is a key in coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$remove_DASH_watch,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key], null))),cljs.core.cst$kw$doc,"Removes a watch (set by add-watch) from a reference"], null)),cljs.core.with_meta(cljs.core.cst$sym$ex_DASH_info,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null))),cljs.core.cst$kw$doc,"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ifn_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Returns true if f returns true for fn? or satisfies IFn."], null)),cljs.core.with_meta(cljs.core.cst$sym$IAtom,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker protocol indicating an atom.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentQueue,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$nat_DASH_int_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a non-negative integer"], null)),cljs.core.with_meta(cljs.core.cst$sym$IWatchable,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for types that can be watched. Currently only implemented by Atom.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_notify_DASH_watches,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Calls all watchers with this, oldval and newval."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Removes watcher that corresponds to key from this."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Stepper,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iter], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pv_DASH_fresh_DASH_node,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$subvec,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,cljs.core.cst$kw$doc,"Returns tcoll with the last item removed from it.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$partial,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$chunked_DASH_seq_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is satisfies IChunkedSeq."], null)),cljs.core.with_meta(cljs.core.cst$sym$replicate,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"DEPRECATED: Use 'repeat' instead.\n  Returns a lazy seq of n xs."], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentQueue,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$min_DASH_key,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the x for which (k x), a number, is least.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_iset,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$reduced,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Wraps x in a way such that a reduce will terminate with the value x"], null)),cljs.core.with_meta(cljs.core.cst$sym$re_DASH_matches,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns the result of (re-find re s) if re fully matches s."], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_writer_DASH_impl,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_map,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new array map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ITransientSet,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding set functionality to a transient collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll without v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)], null)], true, false)], null)], null)),cljs.core.cst$sym$ITER_SYMBOL,cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_byte,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayNode,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ChunkedSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$every_DASH_pred,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null))),cljs.core.cst$kw$doc,"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$keys,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$missing_DASH_protocol,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proto,cljs.core.cst$sym$obj], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$load_DASH_file,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$file], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentArrayMap,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$distinct_QMARK_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns true if no two of the arguments are =",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pos_DASH_int_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a positive integer"], null)),cljs.core.with_meta(cljs.core.cst$sym$never_DASH_equiv,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$Stepper,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_short,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Range,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$methods,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, returns a map of dispatch values -> dispatch fns"], null)),cljs.core.with_meta(cljs.core.cst$sym$odd_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is odd, throws an exception if n is not an integer"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayChunk,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IChunk,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$lazy_DASH_transformer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$stepper], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$t_cljs$core7987,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ci_DASH_reduce,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null))),cljs.core.cst$kw$doc,"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_3,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"bound in a repl thread to the third most recent value printed"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_get_DASH_method,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Var,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.cst$sym$_meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$frequencies,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a map from distinct items in coll to the number of times\n  they appear."], null)),cljs.core.with_meta(cljs.core.cst$sym$reduceable_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies IReduce"], null)),cljs.core.cst$sym$string_DASH_hash_DASH_cache,cljs.core.with_meta(cljs.core.cst$sym$rsubseq,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null))),cljs.core.cst$kw$doc,"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$inc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one greater than num."], null)),cljs.core.with_meta(cljs.core.cst$sym$type_DASH__GT_str,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ty], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$obj_DASH_clone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$ks], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$get_DASH_method,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),cljs.core.cst$kw$doc,"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default"], null)),cljs.core.with_meta(cljs.core.cst$sym$uuid_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$vector_DASH_index_DASH_out_DASH_of_DASH_bounds,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$i,cljs.core.cst$sym$cnt], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$es6_DASH_entries_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_clear,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Clear bit at index n"], null)),cljs.core.with_meta(cljs.core.cst$sym$Range,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$filter,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentTreeMapSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$cnt,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$create_DASH_array_DASH_node_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,cljs.core.cst$kw$doc,"Returns tcoll with value val added at position n.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IWithMeta,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding metadata to an object.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_with_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new object with value of o and metadata meta added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$list,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_PLUS_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the sum of nums. (+) returns 0.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IndexedSeqIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$split_DASH_with,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of [(take-while pred coll) (drop-while pred coll)]"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_VectorNode,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$arr], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$aset,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))),cljs.core.cst$kw$doc,"Sets the value at the index.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$int_DASH_rotate_DASH_left,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$keyword,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null))),cljs.core.cst$kw$doc,"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Cons,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_ns_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"Var bound to the current namespace. Only used for bootstrapping.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_assert_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$dynamic,true], null)),cljs.core.with_meta(cljs.core.cst$sym$create_DASH_tree_DASH_map_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tree,cljs.core.cst$sym$ascending_QMARK_,cljs.core.cst$sym$cnt], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ICollection,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding to a collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$multi_DASH_stepper,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$chars,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$str,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null))),cljs.core.cst$kw$doc,"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$next,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil"], null)),cljs.core.with_meta(cljs.core.cst$sym$ASeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker protocol indicating an array sequence.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_seq_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$SeqIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$IFn,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding the ability to invoke an object as a function.\n  For example, a vector can also be used to look up a value:\n  ([1 2 3 4] 1) => 2",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_invoke,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$regexp_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript RegExp instance."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_t_cljs$core10131,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta10132], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$underive,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null))),cljs.core.cst$kw$doc,"Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_copy,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$obj_DASH_map_DASH_compare_DASH_keys,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IReset,cljs.core.cst$kw$doc,"Sets the value of o to new-value.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_rest,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISeq,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$false_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is the value false, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$RangedIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_readably_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true"], null)),cljs.core.with_meta(cljs.core.cst$sym$ints,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$some_DASH_fn,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null))),cljs.core.cst$kw$doc,"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$demunge_DASH_pattern,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_flush_DASH_on_DASH_newline_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true."], null)),cljs.core.with_meta(cljs.core.cst$sym$to_DASH_array,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$build_DASH_subvec,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$Namespace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$list_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x implements IList"], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_remove,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$found], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentQueueIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$HashCollisionNode,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$array_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript array."], null)),cljs.core.with_meta(cljs.core.cst$sym$prefers_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$simple_DASH_ident_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword without a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$clone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Clone the supplied value which must implement ICloneable."], null)),cljs.core.with_meta(cljs.core.cst$sym$scan_DASH_array,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$incr,cljs.core.cst$sym$k,cljs.core.cst$sym$array], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$demunge,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_not,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Bitwise complement"], null)),cljs.core.with_meta(cljs.core.cst$sym$quote_DASH_string,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$byte,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$max,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the greatest of the nums.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IComparable,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for values that can be compared.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_compare,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_EQ__EQ_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$parents,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,cljs.core.cst$kw$doc,"Returns tcoll without v.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_loaded_DASH_libs_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TransientHashMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$edit,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of_DASH_symbol_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayChunk,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$sorted_DASH_map_DASH_by,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$apply,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$get_DASH_global_DASH_hierarchy,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$add_DASH_to_DASH_string_DASH_hash_DASH_cache,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$clj_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$TransientArrayMap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TransientVector,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$shift,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IChunkedNext,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for accessing the chunks of a collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns a new collection of coll without the first chunk."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$interpose,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_BlackNode,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$deref,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$pv_DASH_aget,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$assoc,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null))),cljs.core.cst$kw$doc,"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$transient,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISet,cljs.core.cst$kw$doc,"Returns a new collection of coll that does not contain v.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_cons,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$rest], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$comparator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null))),cljs.core.cst$kw$doc,"Returns an JavaScript compatible comparator based upon pred."], null)),cljs.core.with_meta(cljs.core.cst$sym$sorted_DASH_map,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new sorted map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$drop_DASH_while,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IWriter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for writing. Currently only implemented by StringBufferWriter.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_write,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Writes s with writer and returns the result."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_flush,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Flush writer."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$KeySeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$realized_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if a value has been produced for a delay or lazy sequence."], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_fn_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$doc,"Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.",cljs.core.cst$kw$dynamic,true], null)),cljs.core.with_meta(cljs.core.cst$sym$compare,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$complement,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value."], null)),cljs.core.with_meta(cljs.core.cst$sym$lookup_DASH_sentinel,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_dup_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false."], null)),cljs.core.with_meta(cljs.core.cst$sym$string_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_key_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$kw$doc,"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IDeref,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding dereference functionality to a reference.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the reference o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$sequence,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$constantly,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a function that takes any number of arguments and returns x."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_RangedIterator,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$chunked_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$ISorted,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for a collection which can represent their items\n  in a sorted manner. ",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq_DASH_from,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_entry_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key for entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_comparator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the comparator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$make_DASH_array,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$array,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null))),cljs.core.cst$kw$doc,"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$shorts,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.cst$sym$_STAR_unchecked_DASH_if_STAR_,cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_RSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ci,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$enable_DASH_console_DASH_print_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Set *print-fn* to console.log"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_flush,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$kw$doc,"Flush writer.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_lastIndexOf,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$completing,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null))),cljs.core.cst$kw$doc,"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_negate_DASH_int,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentVector,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 23, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 21, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$equiv_DASH_sequential,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_unordered_DASH_coll,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms."], null)),cljs.core.with_meta(cljs.core.cst$sym$repeat,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a lazy (infinite!, or length n if supplied) sequence of xs.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_inc,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$nthnext,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns the nth next of coll, (seq coll) when n is 0."], null)),cljs.core.with_meta(cljs.core.cst$sym$preserving_DASH_reduced,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$get_DASH_validator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref], null))),cljs.core.cst$kw$doc,"Gets the validator-fn for a var/ref/agent/atom."], null)),cljs.core.with_meta(cljs.core.cst$sym$StringIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$number_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript number."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,cljs.core.cst$kw$doc,"Adds value val to tcoll and returns tcoll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentArrayMapSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayList,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$print_DASH_str,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"print to a string, returning it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$not_DASH_any_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns false if (pred x) is logical true for any x in coll,\n  else true."], null)),cljs.core.with_meta(cljs.core.cst$sym$into_DASH_array,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_hash,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IHash,cljs.core.cst$kw$doc,"Returns the hash code of o.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$qualified_DASH_symbol_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol with a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll without the mapping for key.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Reduced,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_buffer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$capacity], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$seqable_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return true if s satisfies ISeqable"], null)),cljs.core.with_meta(cljs.core.cst$sym$symbol_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Symbol"], null)),cljs.core.with_meta(cljs.core.cst$sym$m3_DASH_hash_DASH_unencoded_DASH_chars,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_char,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$system_DASH_time,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Returns highest resolution time offered by host in milliseconds."], null)),cljs.core.with_meta(cljs.core.cst$sym$NeverEquiv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_invoke,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,22,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$coll_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x satisfies ICollection"], null)),cljs.core.with_meta(cljs.core.cst$sym$get_DASH_in,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$added,"1.2",cljs.core.cst$kw$static,true,cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$doc,"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied."], null)),cljs.core.with_meta(cljs.core.cst$sym$fnext,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (next x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$IList,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker interface indicating a persistent list",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayNodeIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$List,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_val,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$kw$doc,"Returns the value of the map entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$bytes,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ObjMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$compare_DASH_symbols,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_seq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,cljs.core.cst$kw$doc,"Returns a seq of o, or nil if o is empty.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null))],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8320,10,8320,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentHashSet,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8320,8320,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9702,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9702,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH__GT_clj,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,9702,9702,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null)),"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2289,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2289,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sort_DASH_by,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2289,2289,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",689,14,689,35,"Protocol for adding associativity to transient collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,"cljs/core.cljs",35,1,689,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)], null)], true, false)], null),null,689,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null], null), null),"Protocol for adding associativity to transient collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3419,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3419,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_first,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,3419,3419,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$type,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core10131,"cljs/core.cljs",true,true,3,3746,false,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9151,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,9151,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts,cljs.core.cst$sym$obj], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_print_DASH_meta_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts,cljs.core.cst$sym$obj], null)),null,cljs.core.list(null,null),1,9151,cljs.core.cst$sym$boolean,9151,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts,cljs.core.cst$sym$obj], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,825,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,825,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_hash_DASH_int,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)),null,cljs.core.list(null,null),1,825,cljs.core.cst$sym$number,825,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3827,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3827,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iter], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_stepper,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iter], null)),null,cljs.core.list(null,null),1,3827,3827,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iter], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,773,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,773,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$obj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null))], null))),cljs.core.cst$kw$doc,"Support so that collections can implement toString without\n   loading all the printing machinery."], null),cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_str_STAR_,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$obj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null))], null)),null,cljs.core.list(null,null),1,773,773,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$obj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null))], null))),"Support so that collections can implement toString without\n   loading all the printing machinery."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9645,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9645,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform_STAR_,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a reducible/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce/iterator is called.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xforms)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xforms], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_eduction,true,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xforms)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xforms], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xforms)], null),null,cljs.core.list(null),1,9645,9645,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xforms], null)),"Returns a reducible/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce/iterator is called."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4701,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4701,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$branch_QMARK_,cljs.core.cst$sym$children,cljs.core.cst$sym$root], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree."], null),cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_seq,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$branch_QMARK_,cljs.core.cst$sym$children,cljs.core.cst$sym$root], null)),null,cljs.core.list(null,null),1,4701,4701,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$branch_QMARK_,cljs.core.cst$sym$children,cljs.core.cst$sym$root], null))),"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2587,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2587,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_remainder_DASH_int,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2587,2587,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10228,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10228,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_uuid,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,10228,10228,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1093,cljs.core.cst$kw$column,12,cljs.core.cst$kw$end_DASH_line,1093,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings."], null),cljs.core.cst$sym$cljs$core_SLASH_seq,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1093,cljs.core.cst$sym$seq,1093,1,cljs.core.cst$sym$seq,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IVolatile,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Volatile,"cljs/core.cljs",18,true,10,4297,false,4297,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2323,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2323,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_reduce,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2323,2323,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),"f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",10200,14,10200,19,"A marker protocol for UUIDs",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IUUID,"cljs/core.cljs",19,1,10200,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,10200,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_UUID,null], null), null),"A marker protocol for UUIDs",cljs.core.list("@interface")]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_INIT,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3776,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,3776,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3776,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,3776,cljs.core.cst$kw$end_DASH_column,10], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10556,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10556,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null),cljs.core.cst$sym$cljs$core_SLASH_find_DASH_ns,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null)),null,cljs.core.list(null,null),1,10556,10556,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),"Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2180,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2180,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'."], null),cljs.core.cst$sym$cljs$core_SLASH_contains_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,2180,cljs.core.cst$sym$boolean,2180,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null))),"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3991,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3991,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if (pred x) is logical true for every x in coll, else\n  false."], null),cljs.core.cst$sym$cljs$core_SLASH_every_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3991,cljs.core.cst$sym$boolean,3991,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns true if (pred x) is logical true for every x in coll, else\n  false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1184,10,1184,24,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ES6IteratorSeq,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1184,1184,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Var,"cljs/core.cljs",13,true,10,1003,false,1003,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4319,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4319,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_keep_DASH_indexed,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4319,4319,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5640,10,5640,28,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentQueueSeq,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5640,5640,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2783,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2783,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$doc,"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_subs,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,2783,2783,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8555,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8555,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a set of the distinct elements of coll."], null),cljs.core.cst$sym$cljs$core_SLASH_set,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,8555,8555,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a set of the distinct elements of coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2243,17,2243,32,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null))),"Compare indexed collection.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_compare_DASH_indexed,false,"cljs/core.cljs",32,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2243,2243,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),"Compare indexed collection."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4537,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4537,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec."], null),cljs.core.cst$sym$cljs$core_SLASH_take_DASH_last,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4537,4537,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1076,cljs.core.cst$kw$column,29,cljs.core.cst$kw$end_DASH_line,1076,cljs.core.cst$kw$end_DASH_column,39,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,"cljs/core.cljs",20,true,10,1459,false,true,1459,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2698,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2698,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Set bit at index n"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_set,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2698,2698,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Set bit at index n"]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_string_DASH_hash_DASH_cache_DASH_count,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,852,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,852,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,852,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,852,cljs.core.cst$kw$end_DASH_column,29], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3188,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3188,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a keyword with a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_qualified_DASH_keyword_QMARK_,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3188,cljs.core.cst$sym$boolean,3188,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a keyword with a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",9619,10,9619,18,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Eduction,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,9619,9619,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7809,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7809,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$found], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_add,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$found], null)),null,cljs.core.list(null,null),1,7809,7809,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$found], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5964,10,5964,31,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ES6SetEntriesIterator,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5964,5964,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",582,9,582,19,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,"Returns a new object with value of o and metadata meta added to it.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,cljs.core.cst$sym$cljs$core_SLASH__DASH_with_DASH_meta,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,580,cljs.core.cst$sym$clj,582,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null))),"Returns a new object with value of o and metadata meta added to it."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9909,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9909,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$hierarchy], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_reset_DASH_cache,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$hierarchy], null)),null,cljs.core.list(null,null),1,9909,9909,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$hierarchy], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6124,10,6124,36,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$cnt], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentArrayMapIterator,false,"cljs/core.cljs",36,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$cnt], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6124,6124,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$cnt], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapIterator,"cljs/core.cljs",36,true,10,6124,false,6124,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8633,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8633,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return a seq of all but the last item in coll, in linear time"], null),cljs.core.cst$sym$cljs$core_SLASH_butlast,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,8633,8633,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Return a seq of all but the last item in coll, in linear time"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4874,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4874,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tail_DASH_off,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)),null,cljs.core.list(null,null),1,4874,4874,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2597,15,2597,37,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_subtract_DASH_int,true,"cljs/core.cljs",37,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2597,cljs.core.cst$sym$number,2597,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,763,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,763,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IIterable,cljs.core.cst$kw$doc,"Returns an iterator for coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IIterable,cljs.core.cst$sym$cljs$core_SLASH__DASH_iterator,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,761,763,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns an iterator for coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8890,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8890,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)))),cljs.core.cst$kw$doc,"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_take_DASH_nth,false,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,8890,8890,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1116,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1116,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_first,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1116,1116,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,235,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,235,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Internal - do not use!"], null),cljs.core.cst$sym$cljs$core_SLASH_native_DASH_satisfies_QMARK_,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,235,cljs.core.cst$sym$boolean,235,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p,cljs.core.cst$sym$x], null))),"Internal - do not use!"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2095,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2095,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return true if s satisfies ISeq"], null),cljs.core.cst$sym$cljs$core_SLASH_seq_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,2095,cljs.core.cst$sym$boolean,2095,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Return true if s satisfies ISeq"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$meta],[cljs.core.cst$sym$cljs$core_SLASH__DASH_global_DASH_hierarchy,"cljs/core.cljs",9796,1,9799,20,true,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9799,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,9799,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null,cljs.core.cst$sym$cljs$core_SLASH_IUUID,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_UUID,"cljs/core.cljs",14,true,10,10202,false,10202,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",634,9,634,25,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ISorted,"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$sym$cljs$core_SLASH__DASH_sorted_DASH_seq_DASH_from,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)),null,cljs.core.list(null,null),1,629,cljs.core.cst$sym$clj,634,3,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null))),"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9320,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9320,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"println to a string, returning it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_println_DASH_str,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,9320,9320,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"println to a string, returning it"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1275,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1275,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null))),cljs.core.cst$kw$doc,"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT"], null),cljs.core.cst$sym$cljs$core_SLASH_inst_DASH_ms,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)),null,cljs.core.list(null,null),1,1275,1275,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null))),"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1711,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1711,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_linear_DASH_traversal_DASH_nth,false,"cljs/core.cljs",28,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,1711,1711,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4599,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4599,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects",cljs.core.cst$kw$added,"1.0"], null),"1.0",cljs.core.cst$sym$cljs$core_SLASH_iterate,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4599,4599,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null))),"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,477,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,477,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,cljs.core.cst$sym$cljs$core_SLASH__DASH_empty,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,475,477,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9275,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9275,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a newline using *print-fn*",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_newline,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9275,9275,1,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),"Prints a newline using *print-fn*"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",519,14,519,21,"Protocol for looking up a value in a data structure.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_lookup,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ILookup,"cljs/core.cljs",21,1,519,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_lookup,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)], null)], true, false)], null),null,519,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_TaggedLiteral,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for looking up a value in a data structure.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,727,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,727,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$kw$doc,"Return a new collection of coll with the first chunk removed.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$sym$cljs$core_SLASH__DASH_chunked_DASH_rest,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,723,727,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Return a new collection of coll with the first chunk removed."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9121,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9121,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$writer,cljs.core.cst$sym$ss)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_write_DASH_all,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$writer,cljs.core.cst$sym$ss)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$writer,cljs.core.cst$sym$ss)], null),null,cljs.core.list(null),1,9121,9121,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1876,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1876,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Return true if f is a JavaScript function or satisfies the Fn protocol."], null),cljs.core.cst$sym$cljs$core_SLASH_fn_QMARK_,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,1876,cljs.core.cst$sym$boolean,1876,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Return true if f is a JavaScript function or satisfies the Fn protocol."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9965,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,9965,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_prefer_DASH_method,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)),null,cljs.core.list(null,null),1,9961,9965,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",530,9,530,15,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,"Returns a new collection of coll with a mapping from key k to\n     value v added to it.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IAssociative,cljs.core.cst$sym$cljs$core_SLASH__DASH_assoc,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,525,cljs.core.cst$sym$clj,530,3,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null))),"Returns a new collection of coll with a mapping from key k to\n     value v added to it."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9031,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9031,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_doall,false,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9031,9031,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3139,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3139,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Efficient test to determine that two keywords are identical."], null),cljs.core.cst$sym$cljs$core_SLASH_keyword_DASH_identical_QMARK_,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,3139,cljs.core.cst$sym$boolean,3139,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Efficient test to determine that two keywords are identical."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,57,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,57,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$doc,"Each runtime environment provides a different way to print error output.\n  Whatever function *print-err-fn* is bound to will be passed any\n  Strings which should be printed.",cljs.core.cst$kw$dynamic,true], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_err_DASH_fn_STAR_,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_], null)),null,cljs.core.List.EMPTY,1,true,53,57,1,true,null,"Each runtime environment provides a different way to print error output.\n  Whatever function *print-err-fn* is bound to will be passed any\n  Strings which should be printed."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4868,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4868,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pv_DASH_aset,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,4868,4868,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10187,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10187,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, returns a map of preferred value -> set of other values"], null),cljs.core.cst$sym$cljs$core_SLASH_prefers,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),null,cljs.core.list(null,null),1,10187,10187,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),"Given a multimethod, returns a map of preferred value -> set of other values"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9700,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,9700,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeClojure,cljs.core.cst$kw$doc,"Transforms JavaScript values to Clojure",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IEncodeClojure,cljs.core.cst$sym$cljs$core_SLASH__DASH_js_DASH__GT_clj,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)),null,cljs.core.list(null,null),1,9699,9700,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null))),"Transforms JavaScript values to Clojure"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_LazySeq,"cljs/core.cljs",17,true,10,3207,false,3207,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9592,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9592,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_dedupe,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9592,9592,1,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5476,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5476,cljs.core.cst$kw$end_DASH_column,36,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$i], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_editable_DASH_array_DASH_for,false,"cljs/core.cljs",36,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,5476,5476,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$i], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1168,10,1168,21,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ES6Iterator,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1168,1168,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$sym$cljs$core_SLASH_VectorNode,"cljs/core.cljs",20,true,10,4860,false,4860,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1862,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1862,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_dissoc,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null,null),1,1862,1862,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s)."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_atom,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6399,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,6399,cljs.core.cst$kw$end_DASH_column,72,cljs.core.cst$kw$declared,true,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6399,cljs.core.cst$kw$column,68,cljs.core.cst$kw$end_DASH_line,6399,cljs.core.cst$kw$end_DASH_column,72,cljs.core.cst$kw$declared,true], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2712,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2712,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift right"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_right,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2712,2712,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Bitwise shift right"]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_clojurescript_DASH_version_STAR_,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,18,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,18,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,18,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,18,cljs.core.cst$kw$end_DASH_column,29], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,503,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,503,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISeq,cljs.core.cst$kw$doc,"Returns the first item in the collection coll. Used by cljs.core/first.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ISeq,cljs.core.cst$sym$cljs$core_SLASH__DASH_first,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,501,503,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the first item in the collection coll. Used by cljs.core/first."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1950,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1950,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_peek,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1950,1950,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",593,14,593,23,"Protocol for associative types that can reduce themselves\n  via a function of key and val. Called by cljs.core/reduce-kv.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,"cljs/core.cljs",23,1,593,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)], null)], true, false)], null),null,593,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null], null), null),"Protocol for associative types that can reduce themselves\n  via a function of key and val. Called by cljs.core/reduce-kv.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,397,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,397,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))),cljs.core.cst$kw$doc,"Returns the value at the index.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_aget,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,397,397,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),"Returns the value at the index."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,"cljs/core.cljs",30,true,10,7377,false,7377,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,648,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,648,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$kw$doc,"Writes s with writer and returns the result.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$sym$cljs$core_SLASH__DASH_write,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,646,648,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null))),"Writes s with writer and returns the result."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3800,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3800,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_iter,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3800,3800,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8737,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8737,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_mk_DASH_bound_DASH_fn,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,8737,8737,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1651,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1651,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return the last item in coll, in linear time"], null),cljs.core.cst$sym$cljs$core_SLASH_last,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,1651,1651,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Return the last item in coll, in linear time"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9969,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,9969,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_default_DASH_dispatch_DASH_val,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)),null,cljs.core.list(null,null),1,9961,9969,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9293,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9293,cljs.core.cst$kw$end_DASH_column,9,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_pr,true,"cljs/core.cljs",9,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,9293,9293,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7370,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7370,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null))], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_seq_DASH_push,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null))], null)),null,cljs.core.list(null,null),1,7370,7370,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null))], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3157,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3157,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns the namespace String of a symbol or keyword, or nil if not present."], null),cljs.core.cst$sym$cljs$core_SLASH_namespace,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3157,3157,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns the namespace String of a symbol or keyword, or nil if not present."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_empty_DASH_unordered_DASH_hash,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1242,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,1242,cljs.core.cst$kw$end_DASH_column,36,cljs.core.cst$kw$private,true,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1242,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1242,cljs.core.cst$kw$end_DASH_column,36,cljs.core.cst$kw$private,true], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8084,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8084,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new object map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_obj_DASH_map,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),null,cljs.core.list(null),1,8084,8084,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new object map with supplied mappings."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Reduced,"cljs/core.cljs",17,true,10,1308,false,1308,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",483,9,483,14,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ICollection,"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ICollection,cljs.core.cst$sym$cljs$core_SLASH__DASH_conj,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,481,cljs.core.cst$sym$clj,483,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null))),"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,"cljs/core.cljs",17,true,10,6963,false,6963,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",1149,16,1149,17,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__EQ_,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,1149,cljs.core.cst$sym$boolean,1149,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",695,14,695,27,"Protocol for adding mapping functionality to transient collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll without the mapping for key."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,"cljs/core.cljs",27,1,695,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll without the mapping for key."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)], null)], true, false)], null),null,695,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null], null), null),"Protocol for adding mapping functionality to transient collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4890,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4890,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tailnode], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_push_DASH_tail,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tailnode], null)),null,cljs.core.list(null,null),1,4890,4890,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tailnode], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4480,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4480,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_take,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4480,4480,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2027,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2027,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IVector"], null),cljs.core.cst$sym$cljs$core_SLASH_vector_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2027,cljs.core.cst$sym$boolean,2027,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies IVector"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6014,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6014,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of_DASH_equiv_QMARK_,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6014,6014,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6425,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6425,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bitmap,cljs.core.cst$sym$bit], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_bitmap_DASH_indexed_DASH_node_DASH_index,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bitmap,cljs.core.cst$sym$bit], null)),null,cljs.core.list(null,null),1,6425,6425,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bitmap,cljs.core.cst$sym$bit], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2107,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2107,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to boolean"], null),cljs.core.cst$sym$cljs$core_SLASH_boolean,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2107,cljs.core.cst$sym$boolean,2107,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to boolean"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",718,14,718,20,"Protocol for accessing the items of a chunk.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_drop_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new chunk of coll with the first item removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IChunk,"cljs/core.cljs",20,1,718,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_drop_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new chunk of coll with the first item removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null),null,718,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ArrayChunk,null], null), null),"Protocol for accessing the items of a chunk.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2708,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2708,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift left"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_left,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2708,2708,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Bitwise shift left"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10231,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10231,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),cljs.core.cst$sym$cljs$core_SLASH_random_DASH_uuid,false,"cljs/core.cljs",18,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,10231,10231,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9769,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9769,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns a random integer between 0 (inclusive) and n (exclusive)."], null),cljs.core.cst$sym$cljs$core_SLASH_rand_DASH_int,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,9769,9769,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),"Returns a random integer between 0 (inclusive) and n (exclusive)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,376,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,376,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null))),cljs.core.cst$kw$doc,"Returns a javascript array, cloned from the passed in array"], null),cljs.core.cst$sym$cljs$core_SLASH_aclone,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null)),null,cljs.core.list(null,null),1,376,376,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null))),"Returns a javascript array, cloned from the passed in array"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7441,cljs.core.cst$kw$column,18,cljs.core.cst$kw$end_DASH_line,7441,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$declared,true], null),5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_BlackNode,"cljs/core.cljs",19,true,10,7544,false,true,7544,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4314,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4314,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$newval], null))),cljs.core.cst$kw$doc,"Sets the value of volatile to newval without regard for the\n   current value. Returns newval."], null),cljs.core.cst$sym$cljs$core_SLASH_vreset_BANG_,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$newval], null)),null,cljs.core.list(null,null),1,4314,4314,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$newval], null))),"Sets the value of volatile to newval without regard for the\n   current value. Returns newval."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3416,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3416,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,3416,3416,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2490,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2490,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than num."], null),cljs.core.cst$sym$cljs$core_SLASH_dec,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2490,2490,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns a number one less than num."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4433,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4433,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_map,true,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),null,cljs.core.list(null,null,null,null,null),1,4433,4433,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8982,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8982,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null))),cljs.core.cst$kw$doc,"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_juxt,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),null,cljs.core.list(null,null,null,null),1,8982,8982,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5625,10,5625,29,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentQueueIter,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5625,5625,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2442,16,2442,17,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__LT_,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2442,cljs.core.cst$sym$boolean,2442,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6442,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6442,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_inode_DASH_kv_DASH_reduce,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),null,cljs.core.list(null,null),1,6442,6442,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5803,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5803,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_obj_DASH_map_DASH__GT_hash_DASH_map,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,5803,5803,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10332,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10332,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception"], null),cljs.core.cst$sym$cljs$core_SLASH_test,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,10332,10332,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),"test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1127,cljs.core.cst$kw$column,12,cljs.core.cst$kw$end_DASH_line,1127,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument."], null),cljs.core.cst$sym$cljs$core_SLASH_rest,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1127,cljs.core.cst$sym$seq,1127,1,cljs.core.cst$sym$seq,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10296,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10296,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_data,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null)),null,cljs.core.list(null,null),1,10296,10296,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,"cljs/core.cljs",31,true,10,6055,false,6055,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,720,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,720,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunk,cljs.core.cst$kw$doc,"Return a new chunk of coll with the first item removed.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IChunk,cljs.core.cst$sym$cljs$core_SLASH__DASH_drop_DASH_first,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,718,720,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Return a new chunk of coll with the first item removed."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",9809,16,9809,20,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null))),"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_isa_QMARK_,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),null,cljs.core.list(null,null),1,9809,cljs.core.cst$sym$boolean,9809,3,cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2086,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2086,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Boolean"], null),cljs.core.cst$sym$cljs$core_SLASH_boolean_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2086,cljs.core.cst$sym$boolean,2086,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a Boolean"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",467,9,467,15,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,"Creates a clone of value.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ICloneable,cljs.core.cst$sym$cljs$core_SLASH__DASH_clone,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)),null,cljs.core.list(null,null),1,465,cljs.core.cst$sym$clj,467,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),"Creates a clone of value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10441,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10441,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_munge,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,10441,10441,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_empty_DASH_ordered_DASH_hash,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1227,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,1227,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$private,true,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1227,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1227,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$private,true], null)], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_DEMUNGE_MAP,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,312,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,313,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null),cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,313,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,313,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null)], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ES6IteratorSeq,"cljs/core.cljs",24,true,10,1184,false,1184,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5758,10,5758,20,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_NeverEquiv,false,"cljs/core.cljs",20,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5758,5758,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$type,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core10128,"cljs/core.cljs",true,true,3,3746,false,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9078,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9078,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of successive matches of re in s."], null),cljs.core.cst$sym$cljs$core_SLASH_re_DASH_seq,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9078,9078,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),"Returns a lazy sequence of successive matches of re in s."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,229,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,229,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript char."], null),cljs.core.cst$sym$cljs$core_SLASH_char_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,229,cljs.core.cst$sym$boolean,229,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a JavaScript char."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9792,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9792,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Creates a hierarchy object for use with derive, isa? etc."], null),cljs.core.cst$sym$cljs$core_SLASH_make_DASH_hierarchy,false,"cljs/core.cljs",21,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,9792,9792,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),"Creates a hierarchy object for use with derive, isa? etc."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,848,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,848,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$declared,true], null),5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Symbol,"cljs/core.cljs",16,true,10,953,false,true,953,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$type,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core7984,"cljs/core.cljs",true,true,3,3746,false,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5450,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5450,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tail_DASH_node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tv_DASH_push_DASH_tail,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tail_DASH_node], null)),null,cljs.core.list(null,null),1,5450,5450,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tail_DASH_node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",588,4,588,11,cljs.core.cst$sym$cljs$core_SLASH_IReduce,"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null))),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_IReduce,cljs.core.cst$sym$cljs$core_SLASH__DASH_reduce,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),null,cljs.core.list(null,null),1,585,588,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",472,12,472,18,cljs.core.cst$sym$number,cljs.core.cst$sym$cljs$core_SLASH_ICounted,"Calculates the count of coll in constant time. Used by cljs.core/count.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ICounted,cljs.core.cst$sym$cljs$core_SLASH__DASH_count,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,470,cljs.core.cst$sym$number,472,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Calculates the count of coll in constant time. Used by cljs.core/count."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4154,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4154,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_keep,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4154,4154,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2510,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2510,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to char"], null),cljs.core.cst$sym$cljs$core_SLASH_char,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2510,2510,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to char"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$static,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$static,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],["1.0","cljs/core.cljs",13,true,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),7,4654,4654,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided"]),"1.0",cljs.core.cst$sym$cljs$core_SLASH_mapcat,true,"cljs/core.cljs",13,true,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,4654,4654,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2624,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2624,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to long by stripping decimal places. Identical to `int'."], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_long,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2624,2624,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to long by stripping decimal places. Identical to `int'."]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_seed,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,806,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,806,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,806,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,806,cljs.core.cst$kw$end_DASH_column,13], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,213,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,213,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is not nil, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_some_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,213,cljs.core.cst$sym$boolean,213,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is not nil, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2579,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2579,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_negate,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2579,2579,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3148,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3148,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Efficient test to determine that two symbols are identical."], null),cljs.core.cst$sym$cljs$core_SLASH_symbol_DASH_identical_QMARK_,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,3148,cljs.core.cst$sym$boolean,3148,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Efficient test to determine that two symbols are identical."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3002,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3002,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reverse order. Not lazy."], null),cljs.core.cst$sym$cljs$core_SLASH_reverse,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3002,3002,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a seq of the items in coll in reverse order. Not lazy."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1280,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1280,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies Inst"], null),cljs.core.cst$sym$cljs$core_SLASH_inst_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1280,cljs.core.cst$sym$boolean,1280,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies Inst"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8881,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8881,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_range,false,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),null,cljs.core.list(null,null,null,null),1,8881,8881,3,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2724,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2724,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Counts the number of bits set in n"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_count,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,2724,2724,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),"Counts the number of bits set in n"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6945,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6945,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,7,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_create_DASH_node,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,7,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null)),null,cljs.core.list(null,null),1,6945,6945,7,true,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2275,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2275,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sort,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2275,2275,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1881,10,1881,16,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$afn,cljs.core.cst$sym$meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_MetaFn,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$afn,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1881,1881,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$afn,cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2562,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2562,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_inc_DASH_int,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2562,2562,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",714,12,714,20,cljs.core.cst$sym$number,cljs.core.cst$sym$cljs$core_SLASH_IComparable,"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IComparable,cljs.core.cst$sym$cljs$core_SLASH__DASH_compare,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,712,cljs.core.cst$sym$number,714,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4126,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4126,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_map_DASH_indexed,false,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4126,4126,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8684,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8684,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_list,false,"cljs/core.cljs",17,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,8684,8684,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9773,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9773,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection."], null),cljs.core.cst$sym$cljs$core_SLASH_rand_DASH_nth,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9773,9773,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4043,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4043,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null))),cljs.core.cst$kw$doc,"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_comp,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),null,cljs.core.list(null,null,null,null,null),1,4043,4043,(3),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3328,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3328,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_chunk,false,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null,null),1,3328,3328,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10195,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10195,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, return it's dispatch-fn."], null),cljs.core.cst$sym$cljs$core_SLASH_dispatch_DASH_fn,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),null,cljs.core.list(null,null),1,10195,10195,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),"Given a multimethod, return it's dispatch-fn."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2716,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2716,cljs.core.cst$kw$end_DASH_column,32,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"DEPRECATED: Bitwise shift right with zero fill"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_right_DASH_zero_DASH_fill,false,"cljs/core.cljs",32,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2716,2716,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"DEPRECATED: Bitwise shift right with zero fill"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10406,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10406,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_reserved_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10406,10406,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",679,9,679,22,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,"Returns a new, transient version of the collection, in constant time.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,cljs.core.cst$sym$cljs$core_SLASH__DASH_as_DASH_transient,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,677,cljs.core.cst$sym$clj,679,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new, transient version of the collection, in constant time."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9018,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9018,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_dorun,false,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9018,9018,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9098,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9098,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$begin,cljs.core.cst$sym$sep,cljs.core.cst$sym$end,cljs.core.cst$sym$opts,cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_sequential_DASH_writer,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$begin,cljs.core.cst$sym$sep,cljs.core.cst$sym$end,cljs.core.cst$sym$opts,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9098,9098,7,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$begin,cljs.core.cst$sym$sep,cljs.core.cst$sym$end,cljs.core.cst$sym$opts,cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3176,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3176,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol without a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_simple_DASH_symbol_QMARK_,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3176,cljs.core.cst$sym$boolean,3176,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a symbol without a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1684,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1684,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_accumulating_DASH_seq_DASH_count,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1684,1684,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",492,14,492,22,"Protocol for collections to provide indexed-based access to their items.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_nth,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,"cljs/core.cljs",22,1,492,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_nth,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)], null)], true, false)], null),null,492,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayChunk,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for collections to provide indexed-based access to their items.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1965,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1965,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_disj,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null,null),1,1965,1965,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),"disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",653,14,653,30,"The old IPrintable protocol's implementation consisted of building a giant\n   list of strings to concatenate.  This involved lots of concat calls,\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\n   be implemented efficiently in terms of e.g. a StringBuffer append.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_pr_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,"cljs/core.cljs",30,1,653,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_pr_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)], null)], true, false)], null),null,653,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 39, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_Eduction,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Volatile,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ExceptionInfo,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_TaggedLiteral,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_ES6IteratorSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_LazyTransformer,null,cljs.core.cst$sym$cljs$core_SLASH_UUID,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"The old IPrintable protocol's implementation consisted of building a giant\n   list of strings to concatenate.  This involved lots of concat calls,\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\n   be implemented efficiently in terms of e.g. a StringBuffer append.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",10202,10,10202,14,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null,cljs.core.cst$sym$cljs$core_SLASH_IUUID,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uuid,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null,cljs.core.cst$sym$cljs$core_SLASH_IUUID,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_UUID,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uuid,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,10202,10202,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uuid,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",562,14,562,21,"Protocol for adding vector functionality to collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new vector with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IVector,"cljs/core.cljs",21,1,562,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new vector with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null)], true, false)], null),null,562,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding vector functionality to collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",761,14,761,23,"Protocol for iterating over a collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an iterator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IIterable,"cljs/core.cljs",23,1,761,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an iterator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null),null,761,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNode,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_HashCollisionNode,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_BitmapIndexedNode,null], null), null),"Protocol for iterating over a collection.",cljs.core.list("@interface")]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_2,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,162,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,164,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the second most recent value printed",cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,164,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,164,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the second most recent value printed"], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Eduction,"cljs/core.cljs",18,true,10,9619,false,9619,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4871,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4871,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pv_DASH_clone_DASH_node,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,4871,4871,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3083,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3083,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a new seq where x is the first element and coll is the rest."], null),cljs.core.cst$sym$cljs$core_SLASH_cons,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3083,3083,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$coll], null))),"Returns a new seq where x is the first element and coll is the rest."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,"cljs/core.cljs",27,true,10,8456,false,8456,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8310,10,8310,21,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_HashSetIter,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8310,8310,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10478,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10478,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj,cljs.core.cst$sym$k], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null),true,cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_lookup,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,10478,10478,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj,cljs.core.cst$sym$k], null))),"Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2634,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2634,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_floats,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2634,2634,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4976,cljs.core.cst$kw$column,44,cljs.core.cst$kw$end_DASH_line,4976,cljs.core.cst$kw$end_DASH_column,59,cljs.core.cst$kw$declared,true], null),4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TransientVector,"cljs/core.cljs",25,true,10,5492,false,true,5492,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2744,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2744,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is greater than zero, else false"], null),cljs.core.cst$sym$cljs$core_SLASH_pos_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2744,cljs.core.cst$sym$boolean,2744,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if num is greater than zero, else false"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4101,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4101,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null))),cljs.core.cst$kw$doc,"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_fnil,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),null,cljs.core.list(null,null,null),1,4101,4101,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8276,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8276,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null))),cljs.core.cst$kw$doc,"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_merge_DASH_with,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$maps)], null),null,cljs.core.list(null),1,8276,8276,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1795,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1795,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns the nth rest of coll, coll when n is 0."], null),cljs.core.cst$sym$cljs$core_SLASH_nthrest,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,1795,1795,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),"Returns the nth rest of coll, coll when n is 0."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2003,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2003,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies ISequential"], null),cljs.core.cst$sym$cljs$core_SLASH_sequential_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2003,cljs.core.cst$sym$boolean,2003,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll satisfies ISequential"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7907,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7907,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_replace,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,7907,7907,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,813,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,813,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$k1], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_mix_DASH_H1,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$k1], null)),null,cljs.core.list(null,null),1,813,cljs.core.cst$sym$number,813,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$k1], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_RecordIter,"cljs/core.cljs",20,true,10,5938,false,5938,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6318,10,6318,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TransientArrayMap,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6318,6318,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1546,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1546,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null))),cljs.core.cst$kw$doc,"Create seq from a primitive JavaScript Array-like.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_prim_DASH_seq,false,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,1546,1546,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),"Create seq from a primitive JavaScript Array-like."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,130,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,130,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_level_STAR_,"cljs/core.cljs",16,1,true,119,130,"*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2316,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2316,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Return a random permutation of coll"], null),cljs.core.cst$sym$cljs$core_SLASH_shuffle,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2316,2316,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Return a random permutation of coll"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2031,cljs.core.cst$kw$column,22,cljs.core.cst$kw$end_DASH_line,2031,cljs.core.cst$kw$end_DASH_column,32,cljs.core.cst$kw$declared,true], null),6,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,"cljs/core.cljs",20,true,10,5209,false,true,5209,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3091,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3091,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_keyword,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,3091,3091,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2191,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2191,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present."], null),cljs.core.cst$sym$cljs$core_SLASH_find,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,2191,2191,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),"Returns the map entry for key, or nil if key not present."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,411,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,411,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null))),cljs.core.cst$kw$doc,"Returns the length of the array. Works on arrays of all types."], null),cljs.core.cst$sym$cljs$core_SLASH_alength,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null)),null,cljs.core.list(null,null),1,411,cljs.core.cst$sym$number,411,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null))),"Returns the length of the array. Works on arrays of all types."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2660,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2660,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise exclusive or",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_xor,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2660,2660,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise exclusive or"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1459,10,1459,20,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_IndexedSeq,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1459,1459,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ObjMap,"cljs/core.cljs",16,true,10,5827,false,5827,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2720,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2720,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift right with zero fill"], null),cljs.core.cst$sym$cljs$core_SLASH_unsigned_DASH_bit_DASH_shift_DASH_right,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2720,2720,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Bitwise shift right with zero fill"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ES6SetEntriesIterator,"cljs/core.cljs",31,true,10,5964,false,5964,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2753,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2753,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is less than zero, else false"], null),cljs.core.cst$sym$cljs$core_SLASH_neg_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2753,cljs.core.cst$sym$boolean,2753,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if num is less than zero, else false"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Cons,"cljs/core.cljs",14,true,10,3026,false,3026,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9964,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,9964,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_remove_DASH_method,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,9961,9964,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3752,10,3752,20,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_StringIter,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3752,3752,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,426,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,426,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH_invoke,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$args)], null),null,cljs.core.list(null),1,426,426,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",2849,10,2849,14,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_List,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,2849,2849,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,810,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,810,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k1], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_mix_DASH_K1,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k1], null)),null,cljs.core.list(null,null),1,810,cljs.core.cst$sym$number,810,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k1], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2525,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2525,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_float,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2525,cljs.core.cst$sym$number,2525,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2090,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2090,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x identical to the JavaScript undefined value."], null),cljs.core.cst$sym$cljs$core_SLASH_undefined_QMARK_,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2090,cljs.core.cst$sym$boolean,2090,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x identical to the JavaScript undefined value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",575,14,575,19,"Protocol for accessing the metadata of an object.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns the metadata of object o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IMeta,"cljs/core.cljs",19,1,575,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns the metadata of object o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)], true, false)], null),null,575,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 37, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core10128,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core10131,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$analyzer_SLASH_t_cljs$analyzer13084,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$function,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_MetaFn,null,cljs.core.cst$sym$cljs$core_SLASH_LazyTransformer,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for accessing the metadata of an object.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1317,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1317,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$r], null))),cljs.core.cst$kw$doc,"Returns true if x is the result of a call to reduced"], null),cljs.core.cst$sym$cljs$core_SLASH_reduced_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$r], null)),null,cljs.core.list(null,null),1,1317,cljs.core.cst$sym$boolean,1317,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$r], null))),"Returns true if x is the result of a call to reduced"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$argc,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$file,"cljs/core.cljs"], null),cljs.core.cst$sym$cljs$core_SLASH_apply_DASH_to,false,"cljs/core.cljs",cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$argc,cljs.core.cst$sym$args], null)),null,cljs.core.list(null,null),1,3667,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$argc,cljs.core.cst$sym$args], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3652,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3652,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_disj_BANG_,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,3652,3652,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),"disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",521,4,521,11,cljs.core.cst$sym$cljs$core_SLASH_ILookup,"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null))),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_ILookup,cljs.core.cst$sym$cljs$core_SLASH__DASH_lookup,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,519,521,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",465,14,465,24,"Protocol for cloning a value.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a clone of value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,"cljs/core.cljs",24,1,465,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a clone of value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)], null)], true, false)], null),null,465,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null], null), null),"Protocol for cloning a value.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",9699,14,9699,28,null,true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_js_DASH__GT_clj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms JavaScript values to Clojure"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IEncodeClojure,"cljs/core.cljs",28,1,9699,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_js_DASH__GT_clj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms JavaScript values to Clojure"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)], null)], true, false)], null),null,9699,cljs.core.PersistentHashSet.EMPTY,null,cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2629,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2629,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_booleans,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2629,2629,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8676,10,8676,19,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayList,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8676,8676,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1406,cljs.core.cst$kw$column,40,cljs.core.cst$kw$end_DASH_line,1406,cljs.core.cst$kw$end_DASH_column,44,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_RSeq,"cljs/core.cljs",14,true,10,1563,false,true,1563,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6407,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6407,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_mask,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)),null,cljs.core.list(null,null),1,6407,6407,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3453,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3453,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_int_DASH_array,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),null,cljs.core.list(null,null),1,3453,3453,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9936,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9936,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_find_DASH_and_DASH_cache_DASH_best_DASH_method,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null)),null,cljs.core.list(null,null),1,9936,9936,7,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1992,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1992,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x satisfies ISet"], null),cljs.core.cst$sym$cljs$core_SLASH_set_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1992,cljs.core.cst$sym$boolean,1992,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x satisfies ISet"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1078,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1078,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x implements IIterable protocol."], null),cljs.core.cst$sym$cljs$core_SLASH_iterable_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1078,cljs.core.cst$sym$boolean,1078,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x implements IIterable protocol."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9580,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9580,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null))),cljs.core.cst$kw$doc,"A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.",cljs.core.cst$kw$added,"1.7"], null),"1.7",cljs.core.cst$sym$cljs$core_SLASH_cat,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)),null,cljs.core.list(null,null),1,9580,9580,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null))),"A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5951,10,5951,28,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ES6EntriesIterator,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5951,5951,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_divide,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2433,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,2433,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$declared,true,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2433,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,2433,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$declared,true], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$meta],[cljs.core.cst$sym$cljs$core_SLASH_js_DASH_reserved_DASH_arr,"cljs/core.cljs",10384,1,10387,18,true,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10387,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,10387,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$private,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,659,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,659,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,cljs.core.cst$sym$cljs$core_SLASH__DASH_pr_DASH_writer,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,653,659,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9129,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9129,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),cljs.core.cst$sym$cljs$core_SLASH_flush,false,"cljs/core.cljs",12,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,9129,9129,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8549,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8549,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iseq], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_set_DASH_from_DASH_indexed_DASH_seq,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iseq], null)),null,cljs.core.list(null,null),1,8549,8549,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iseq], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8718,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8718,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_take_DASH_while,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,8718,8718,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3718,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3718,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_vary_DASH_meta,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null)),null,cljs.core.list(null,null,null,null,null,null),1,3718,3718,(6),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",511,14,511,19,"Protocol for accessing the next items of a collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_next,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_INext,"cljs/core.cljs",19,1,511,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_next,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null),null,511,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_LazyTransformer,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null], null), null),"Protocol for accessing the next items of a collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,245,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,245,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_is_proto_,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,245,245,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_START,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3777,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,3777,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3777,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,3777,cljs.core.cst$kw$end_DASH_column,11], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",470,14,470,22,"Protocol for adding the ability to count a collection in constant time.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_count,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Calculates the count of coll in constant time. Used by cljs.core/count."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ICounted,"cljs/core.cljs",22,1,470,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_count,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Calculates the count of coll in constant time. Used by cljs.core/count."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null),null,470,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 26, [null,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkBuffer,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayChunk,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding the ability to count a collection in constant time.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",540,14,540,23,"Protocol for examining a map entry.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,"cljs/core.cljs",23,1,540,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null),null,540,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for examining a map entry.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2454,16,2454,18,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__LT__EQ_,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2454,cljs.core.cst$sym$boolean,2454,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3611,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3611,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_conj_BANG_,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null,null,null),1,3611,3611,(2),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",558,9,558,13,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IStack,"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IStack,cljs.core.cst$sym$cljs$core_SLASH__DASH_pop,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,552,cljs.core.cst$sym$clj,558,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6006,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6006,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of_DASH_identical_QMARK_,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6006,6006,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4592,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4592,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_repeatedly,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,4592,4592,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8650,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8650,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keys,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"Returns a map with the keys mapped to the corresponding vals."], null),cljs.core.cst$sym$cljs$core_SLASH_zipmap,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keys,cljs.core.cst$sym$vals], null)),null,cljs.core.list(null,null),1,8650,8650,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keys,cljs.core.cst$sym$vals], null))),"Returns a map with the keys mapped to the corresponding vals."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",552,14,552,20,"Protocol for collections to provide access to their items as stacks. The top\n  of the stack should be accessed in the most efficient way for the different\n  data structures.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_peek,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the item from the top of the stack. Is used by cljs.core/peek."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IStack,"cljs/core.cljs",20,1,552,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_peek,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the item from the top of the stack. Is used by cljs.core/peek."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null),null,552,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for collections to provide access to their items as stacks. The top\n  of the stack should be accessed in the most efficient way for the different\n  data structures.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,674,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,674,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Removes watcher that corresponds to key from this.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$sym$cljs$core_SLASH__DASH_remove_DASH_watch,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,667,674,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null))),"Removes watcher that corresponds to key from this."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",755,14,755,23,"Protocol for adding volatile functionality.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_vreset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IVolatile,"cljs/core.cljs",23,1,755,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_vreset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)], true, false)], null),null,755,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Volatile,null], null), null),"Protocol for adding volatile functionality.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4693,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4693,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_remove,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4693,4693,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6498,10,6498,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_BitmapIndexedNode,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6498,6498,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2426,15,2426,16,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the product of nums. (*) returns 1.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__STAR_,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2426,cljs.core.cst$sym$number,2426,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the product of nums. (*) returns 1."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9087,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9087,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns an instance of RegExp which has compiled the provided string."], null),cljs.core.cst$sym$cljs$core_SLASH_re_DASH_pattern,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9087,9087,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Returns an instance of RegExp which has compiled the provided string."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2501,15,2501,18,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the least of the nums.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_min,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2501,cljs.core.cst$sym$number,2501,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the least of the nums."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5978,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5978,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of_DASH_nil_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null)),null,cljs.core.list(null,null),1,5978,5978,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",686,9,686,21,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,"Creates a persistent data structure from tcoll and returns it.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,cljs.core.cst$sym$cljs$core_SLASH__DASH_persistent_BANG_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)),null,cljs.core.list(null,null),1,682,cljs.core.cst$sym$clj,686,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),"Creates a persistent data structure from tcoll and returns it."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",494,4,494,8,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_IIndexed,cljs.core.cst$sym$cljs$core_SLASH__DASH_nth,false,"cljs/core.cljs",8,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,492,494,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3646,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3646,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),cljs.core.cst$kw$doc,"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns tcoll"], null),cljs.core.cst$sym$cljs$core_SLASH_pop_BANG_,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)),null,cljs.core.list(null,null),1,3646,3646,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns tcoll"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3413,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3413,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b,cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_append,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3413,3413,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b,cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9288,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9288,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as pr-str followed by (newline)",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_prn_DASH_str,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,9288,9288,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"Same as pr-str followed by (newline)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",624,14,624,25,"Protocol for reversing a seq.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_rseq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reversed order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IReversible,"cljs/core.cljs",25,1,624,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_rseq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reversed order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null),null,624,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null], null), null),"Protocol for reversing a seq.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2991,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2991,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies? IReversible."], null),cljs.core.cst$sym$cljs$core_SLASH_reversible_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2991,cljs.core.cst$sym$boolean,2991,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns true if coll satisfies? IReversible."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",664,13,664,23,cljs.core.cst$sym$boolean,cljs.core.cst$sym$cljs$core_SLASH_IPending,"Returns true if a value for x has been produced, false otherwise.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IPending,cljs.core.cst$sym$cljs$core_SLASH__DASH_realized_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,661,cljs.core.cst$sym$boolean,664,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if a value for x has been produced, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,671,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,671,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$sym$cljs$core_SLASH__DASH_add_DASH_watch,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,667,671,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null))),"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,573,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,573,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IDerefWithTimeout,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IDerefWithTimeout,cljs.core.cst$sym$cljs$core_SLASH__DASH_deref_DASH_with_DASH_timeout,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)),null,cljs.core.list(null,null),1,572,573,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1663,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1663,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$doc,"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_conj,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null,null,null),1,1663,1663,(2),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",632,9,632,20,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ISorted,"Returns a sorted seq from coll in either ascending or descending order.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$sym$cljs$core_SLASH__DASH_sorted_DASH_seq,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)),null,cljs.core.list(null,null),1,629,cljs.core.cst$sym$clj,632,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null))),"Returns a sorted seq from coll in either ascending or descending order."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4640,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4640,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Take a collection of collections, and return a lazy seq\n  of items from the inner collection"], null),true,cljs.core.cst$sym$cljs$core_SLASH_flatten1,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$colls], null)),null,cljs.core.list(null,null),1,4640,4640,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$colls], null))),"Take a collection of collections, and return a lazy seq\n  of items from the inner collection"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2393,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2393,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_transduce,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2393,2393,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items."]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_fixture1,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9540,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,9540,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9540,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,9540,cljs.core.cst$kw$end_DASH_column,14], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",752,4,752,10,cljs.core.cst$sym$cljs$core_SLASH_ISwap,"Swaps the value of o to be (apply f current-value-of-atom args).",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null))),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_ISwap,cljs.core.cst$sym$cljs$core_SLASH__DASH_swap_BANG_,false,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),null,cljs.core.list(null,null,null,null),1,750,752,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),"Swaps the value of o to be (apply f current-value-of-atom args)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,117,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,117,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_length_STAR_,"cljs/core.cljs",17,1,true,107,117,"*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2053,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2053,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null))),cljs.core.cst$kw$doc,"Delete a property from a JavaScript object."], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH_delete,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,2053,2053,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null))),"Delete a property from a JavaScript object."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,174,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,174,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Internal - do not use!"], null),cljs.core.cst$sym$cljs$core_SLASH_truth_,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,174,174,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Internal - do not use!"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6022,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,6022,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6022,6022,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",9975,10,9975,17,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_MultiFn,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,9975,9975,8,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9668,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9668,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_key_DASH__GT_js,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,9668,9668,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3843,10,3843,22,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_MultiStepper,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3843,3843,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",9661,14,9661,23,null,true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clj_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Recursively transforms clj values to JavaScript"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_key_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,"cljs/core.cljs",23,1,9661,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clj_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Recursively transforms clj values to JavaScript"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_key_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)], true, false)], null),null,9661,cljs.core.PersistentHashSet.EMPTY,null,cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4880,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4880,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_new_DASH_path,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,4880,4880,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4273,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4273,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null))),cljs.core.cst$kw$doc,"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false."], null),cljs.core.cst$sym$cljs$core_SLASH_compare_DASH_and_DASH_set_BANG_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)),null,cljs.core.list(null,null),1,4273,4273,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null))),"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1554,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1554,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null))),cljs.core.cst$kw$doc,"Create a seq from a JavaScript array.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_seq,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,1554,1554,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),"Create a seq from a JavaScript array."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2066,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2066,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_copy_DASH_downward,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)),null,cljs.core.list(null,null),1,2066,2066,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6700,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6700,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array_DASH_node,cljs.core.cst$sym$edit,cljs.core.cst$sym$idx], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pack_DASH_array_DASH_node,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array_DASH_node,cljs.core.cst$sym$edit,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null),1,6700,6700,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array_DASH_node,cljs.core.cst$sym$edit,cljs.core.cst$sym$idx], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4604,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4604,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the first item in each coll, then the second etc.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_interleave,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null)),null,cljs.core.list(null,null),1,4604,4604,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns a lazy seq of the first item in each coll, then the second etc."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9332,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9332,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_print_DASH_map,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9332,9332,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2015,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2015,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IMap"], null),cljs.core.cst$sym$cljs$core_SLASH_map_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2015,cljs.core.cst$sym$boolean,2015,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies IMap"]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_C1,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,807,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,807,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,807,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,807,cljs.core.cst$kw$end_DASH_column,11], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1803,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1803,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$doc,"Returns the value mapped to key, not-found or nil if key not present.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_get,false,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,1803,1803,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),"Returns the value mapped to key, not-found or nil if key not present."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2378,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2378,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns its argument."], null),cljs.core.cst$sym$cljs$core_SLASH_identity,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2378,2378,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns its argument."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4724,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4724,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null))),cljs.core.cst$kw$doc,"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_into,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),null,cljs.core.list(null,null),1,4724,4724,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2619,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2619,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to long by stripping decimal places. Identical to `int'."], null),cljs.core.cst$sym$cljs$core_SLASH_long,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2619,2619,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to long by stripping decimal places. Identical to `int'."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2520,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2520,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_double,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2520,cljs.core.cst$sym$number,2520,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4310,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4310,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a volatile."], null),cljs.core.cst$sym$cljs$core_SLASH_volatile_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4310,cljs.core.cst$sym$boolean,4310,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a volatile."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ChunkBuffer,"cljs/core.cljs",21,true,10,3287,false,3287,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_HashSetIter,"cljs/core.cljs",21,true,10,8310,false,8310,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,542,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,542,cljs.core.cst$kw$end_DASH_column,8,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$kw$doc,"Returns the key of the map entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$sym$cljs$core_SLASH__DASH_key,false,"cljs/core.cljs",8,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,540,542,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the key of the map entry."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta7985], null))),cljs.core.cst$kw$file,"cljs/core.cljs"], null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_t_cljs$core7984,false,"cljs/core.cljs",cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta7985], null)),null,cljs.core.list(null,null),true,3,cljs.core.cst$kw$positional,3746,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta7985], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1636,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1636,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (next (first x))"], null),cljs.core.cst$sym$cljs$core_SLASH_nfirst,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1636,1636,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Same as (next (first x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_StringBufferWriter,"cljs/core.cljs",28,true,10,768,false,768,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1943,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1943,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),cljs.core.cst$kw$doc,"Returns the metadata of obj, returns nil if there is no metadata."], null),cljs.core.cst$sym$cljs$core_SLASH_meta,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,1943,1943,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns the metadata of obj, returns nil if there is no metadata."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5445,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5445,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tl], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tv_DASH_editable_DASH_tail,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tl], null)),null,cljs.core.list(null,null),1,5445,5445,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tl], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,596,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,596,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,cljs.core.cst$kw$doc,"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,cljs.core.cst$sym$cljs$core_SLASH__DASH_kv_DASH_reduce,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),null,cljs.core.list(null,null),1,593,596,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null))),"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",605,14,605,19,"Protocol for adding hashing functionality to a type.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the hash code of o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IHash,"cljs/core.cljs",19,1,605,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the hash code of o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)], true, false)], null),null,605,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 38, [cljs.core.cst$sym$cljs$core_SLASH_Namespace,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_MultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_TaggedLiteral,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$default,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_LazyTransformer,null,cljs.core.cst$sym$cljs$core_SLASH_UUID,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding hashing functionality to a type.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2678,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2678,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise and with complement",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_and_DASH_not,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2678,2678,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise and with complement"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1069,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1069,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Returns true if v is of type cljs.core.Var"], null),cljs.core.cst$sym$cljs$core_SLASH_var_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,1069,cljs.core.cst$sym$boolean,1069,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),"Returns true if v is of type cljs.core.Var"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,643,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,643,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns the comparator for coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$sym$cljs$core_SLASH__DASH_comparator,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,629,643,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the comparator for coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2535,15,2535,32,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the sum of nums. (+) returns 0.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_add_DASH_int,true,"cljs/core.cljs",32,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2535,cljs.core.cst$sym$number,2535,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the sum of nums. (+) returns 0."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1216,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,1216,cljs.core.cst$kw$end_DASH_column,32,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms."], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_ordered_DASH_coll,false,"cljs/core.cljs",32,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1216,cljs.core.cst$sym$number,1216,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2837,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2837,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$fn_DASH_map], null))),cljs.core.cst$kw$doc,"Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implicit this (via the this-as macro) will resolve to the\n  object that the function is attached."], null),true,cljs.core.cst$sym$cljs$core_SLASH_extend_DASH_object_BANG_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$fn_DASH_map], null)),null,cljs.core.list(null,null),1,2837,2837,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$fn_DASH_map], null))),"Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implicit this (via the this-as macro) will resolve to the\n  object that the function is attached."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4933,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4933,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_do_DASH_assoc,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,4933,4933,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9488,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9488,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$m], null))),cljs.core.cst$kw$doc,"Atomically resets the metadata for an atom"], null),cljs.core.cst$sym$cljs$core_SLASH_reset_DASH_meta_BANG_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$m], null)),null,cljs.core.list(null,null),1,9488,9488,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$m], null))),"Atomically resets the metadata for an atom"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8116,10,8116,16,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_KeySeq,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8116,8116,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",600,14,600,20,"Protocol for adding value comparison functionality to a type.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_equiv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if o and other are equal, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,"cljs/core.cljs",20,1,600,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_equiv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if o and other are equal, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)], null)], true, false)], null),null,600,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 40, [cljs.core.cst$sym$cljs$core_SLASH_Namespace,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$js_SLASH_Date,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_TaggedLiteral,null,cljs.core.cst$sym$number,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$default,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_NeverEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_LazyTransformer,null,cljs.core.cst$sym$cljs$core_SLASH_UUID,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding value comparison functionality to a type.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7528,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7528,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_kv_DASH_reduce,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),null,cljs.core.list(null,null),1,7528,7528,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4571,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4571,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy (infinite!) sequence of repetitions of the items in coll."], null),cljs.core.cst$sym$cljs$core_SLASH_cycle,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4571,4571,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a lazy (infinite!) sequence of repetitions of the items in coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,569,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,569,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IDeref,cljs.core.cst$kw$doc,"Returns the value of the reference o.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IDeref,cljs.core.cst$sym$cljs$core_SLASH__DASH_deref,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,567,569,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns the value of the reference o."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10249,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10249,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_writer_DASH_ex_DASH_info,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,10249,10249,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1979,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1979,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))"], null),cljs.core.cst$sym$cljs$core_SLASH_empty_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1979,cljs.core.cst$sym$boolean,1979,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TaggedLiteral,"cljs/core.cljs",23,true,10,10342,false,10342,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2518,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2518,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_short,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2518,cljs.core.cst$sym$number,2518,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9662,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,9662,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$kw$doc,"Recursively transforms clj values to JavaScript",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$sym$cljs$core_SLASH__DASH_clj_DASH__GT_js,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,9661,9662,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Recursively transforms clj values to JavaScript"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,725,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,725,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$kw$doc,"Returns the first chunk in coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$sym$cljs$core_SLASH__DASH_chunked_DASH_first,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,723,725,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the first chunk in coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4754,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4754,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects."], null),cljs.core.cst$sym$cljs$core_SLASH_filterv,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4754,4754,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",10342,10,10342,23,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TaggedLiteral,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,10342,10342,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5442,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5442,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tv_DASH_editable_DASH_root,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,5442,5442,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,883,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,883,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),cljs.core.cst$kw$doc,"Returns the hash code of its argument. Note this is the hash code\n   consistent with =."], null),cljs.core.cst$sym$cljs$core_SLASH_hash,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,883,883,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns the hash code of its argument. Note this is the hash code\n   consistent with =."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2648,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2648,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"quot[ient] of dividing numerator by denominator."], null),cljs.core.cst$sym$cljs$core_SLASH_quot,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null)),null,cljs.core.list(null,null),1,2648,2648,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),"quot[ient] of dividing numerator by denominator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10537,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10537,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null),cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_interns_STAR_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null)),null,cljs.core.list(null,null),1,10537,10537,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null))),"Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2526,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2526,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_double,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2526,cljs.core.cst$sym$number,2526,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,28,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,28,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"Var bound to the name value of the compiler build :target option.\n  For example, if the compiler build :target is :nodejs, *target* will be bound\n  to \"nodejs\". *target* is a Google Closure define and can be set by compiler\n  :closure-defines option.",cljs.core.cst$kw$declared,true], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_target_STAR_,"cljs/core.cljs",11,1,true,22,true,28,"Var bound to the name value of the compiler build :target option.\n  For example, if the compiler build :target is :nodejs, *target* will be bound\n  to \"nodejs\". *target* is a Google Closure define and can be set by compiler\n  :closure-defines option."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3336,10,3336,21,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ChunkedCons,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3336,3336,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4969,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4969,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ranged_DASH_iterator,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,4969,4969,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",700,14,700,30,"Protocol for adding vector functionality to transient collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with the last item removed from it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,"cljs/core.cljs",30,1,700,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with the last item removed from it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)], true, false)], null),null,700,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null], null), null),"Protocol for adding vector functionality to transient collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8187,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8187,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null))),cljs.core.cst$kw$doc,"Returns the key of the map entry."], null),cljs.core.cst$sym$cljs$core_SLASH_key,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null)),null,cljs.core.list(null,null),1,8187,8187,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null))),"Returns the key of the map entry."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2636,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2636,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_longs,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2636,2636,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",3734,16,3734,20,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Same as (not (= obj1 obj2))",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_not_EQ_,true,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,3734,cljs.core.cst$sym$boolean,3734,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Same as (not (= obj1 obj2))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,65,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,65,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Set *print-err-fn* to f."], null),cljs.core.cst$sym$cljs$core_SLASH_set_DASH_print_DASH_err_DASH_fn_BANG_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,65,65,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Set *print-err-fn* to f."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,224,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,224,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript string."], null),cljs.core.cst$sym$cljs$core_SLASH_string_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,224,cljs.core.cst$sym$boolean,224,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a JavaScript string."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1177,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1177,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"EXPERIMENTAL: Return a ES2015 compatible iterator for coll."], null),cljs.core.cst$sym$cljs$core_SLASH_es6_DASH_iterator,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1177,1177,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"EXPERIMENTAL: Return a ES2015 compatible iterator for coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Delay,"cljs/core.cljs",15,true,10,9545,false,9545,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10429,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10429,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_munge_DASH_str,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,10429,10429,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9252,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9252,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a sequence of objects to a string, observing all the\n  options given in opts"], null),cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_str_DASH_with_DASH_opts,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9252,9252,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),"Prints a sequence of objects to a string, observing all the\n  options given in opts"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5938,10,5938,20,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_RecordIter,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5938,5938,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter], null))),null]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_C2,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,808,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,808,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,808,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,808,cljs.core.cst$kw$end_DASH_column,11], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",953,10,953,16,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$_meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Symbol,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,953,953,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$doc,cljs.core.cst$kw$meta],[cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_newline_STAR_,"cljs/core.cljs",76,1,81,18,true,"When set to logical false will drop newlines from printing calls.\n  This is to work around the implicit newlines emitted by standard JavaScript\n  console objects.",new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,81,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,81,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical false will drop newlines from printing calls.\n  This is to work around the implicit newlines emitted by standard JavaScript\n  console objects."], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2572,15,2572,37,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the product of nums. (*) returns 1.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_multiply_DASH_int,true,"cljs/core.cljs",37,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2572,cljs.core.cst$sym$number,2572,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the product of nums. (*) returns 1."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3422,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3422,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_rest,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,3422,3422,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10162,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10162,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Removes all of the methods of multimethod."], null),cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_all_DASH_methods,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),null,cljs.core.list(null,null),1,10162,10162,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),"Removes all of the methods of multimethod."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9747,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9747,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_trampoline,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,9747,9747,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,137,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,137,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_opts,false,"cljs/core.cljs",15,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,137,137,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_1,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,158,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,160,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the most recent value printed",cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,160,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,160,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the most recent value printed"], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5189,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5189,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Creates a new vector containing the contents of coll. JavaScript arrays\n  will be aliased and should not be modified."], null),cljs.core.cst$sym$cljs$core_SLASH_vec,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,5189,5189,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Creates a new vector containing the contents of coll. JavaScript arrays\n  will be aliased and should not be modified."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$doc,cljs.core.cst$kw$meta],[cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_meta_STAR_,"cljs/core.cljs",91,1,97,15,true,"If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false.",new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,97,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,97,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false."], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,669,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,669,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Calls all watchers with this, oldval and newval.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$sym$cljs$core_SLASH__DASH_notify_DASH_watches,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)),null,cljs.core.list(null,null),1,667,669,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null))),"Calls all watchers with this, oldval and newval."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[8,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_MultiFn,"cljs/core.cljs",17,true,10,9975,false,9975,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2609,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2609,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to int by stripping decimal places."], null),cljs.core.cst$sym$cljs$core_SLASH_int,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2609,2609,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to int by stripping decimal places."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8192,10,8192,16,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ValSeq,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8192,8192,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9763,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9763,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_rand,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,9763,9763,1,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),"Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1626,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1626,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (next x))"], null),cljs.core.cst$sym$cljs$core_SLASH_second,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1626,1626,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Same as (first (next x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10516,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10516,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null),cljs.core.cst$sym$cljs$core_SLASH_find_DASH_ns_DASH_obj,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null)),null,cljs.core.list(null,null),1,10516,10516,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),"Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",677,14,677,33,"Protocol for collections which can transformed to transients.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_as_DASH_transient,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,"cljs/core.cljs",33,1,677,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_as_DASH_transient,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null),null,677,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null], null), null),"Protocol for collections which can transformed to transients.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,916,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,916,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seed,cljs.core.cst$sym$hash], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_combine,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seed,cljs.core.cst$sym$hash], null)),null,cljs.core.list(null,null),1,916,916,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seed,cljs.core.cst$sym$hash], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2466,16,2466,17,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__GT_,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2466,cljs.core.cst$sym$boolean,2466,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",737,12,737,17,cljs.core.cst$sym$string,cljs.core.cst$sym$cljs$core_SLASH_INamed,"Returns the name String of x.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.cst$sym$cljs$core_SLASH_INamed,cljs.core.cst$sym$cljs$core_SLASH__DASH_name,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,735,cljs.core.cst$sym$string,737,1,cljs.core.cst$sym$string,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns the name String of x."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8590,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8590,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_replace,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,8590,8590,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),"Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2128,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2128,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is an integer"], null),cljs.core.cst$sym$cljs$core_SLASH_int_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2128,cljs.core.cst$sym$boolean,2128,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is an integer"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5301,10,5301,16,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Subvec,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5301,5301,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1999,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1999,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements Associative"], null),cljs.core.cst$sym$cljs$core_SLASH_associative_QMARK_,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1999,cljs.core.cst$sym$boolean,1999,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll implements Associative"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2614,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2614,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to int by stripping decimal places."], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_int,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2614,2614,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to int by stripping decimal places."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2046,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2046,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj], null))),cljs.core.cst$kw$doc,"Return the JavaScript keys for an object."], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH_keys,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj], null)),null,cljs.core.list(null,null),1,2046,2046,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj], null))),"Return the JavaScript keys for an object."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1269,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,1269,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_Inst,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_Inst,cljs.core.cst$sym$cljs$core_SLASH_inst_DASH_ms_STAR_,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)),null,cljs.core.list(null,null),1,1268,1269,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ES6EntriesIterator,"cljs/core.cljs",28,true,10,5951,false,5951,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3134,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3134,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Keyword"], null),cljs.core.cst$sym$cljs$core_SLASH_keyword_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3134,cljs.core.cst$sym$boolean,3134,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a Keyword"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3773,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3773,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_iter,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3773,3773,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9561,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9561,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is a Delay, returns the (possibly cached) value of its expression, else returns x"], null),cljs.core.cst$sym$cljs$core_SLASH_force,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,9561,9561,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"If x is a Delay, returns the (possibly cached) value of its expression, else returns x"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9780,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9780,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll."], null),cljs.core.cst$sym$cljs$core_SLASH_group_DASH_by,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9780,9780,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",626,9,626,14,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IReversible,"Returns a seq of the items in coll in reversed order.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IReversible,cljs.core.cst$sym$cljs$core_SLASH__DASH_rseq,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,624,cljs.core.cst$sym$clj,626,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a seq of the items in coll in reversed order."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9325,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9325,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as pr followed by (newline).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_prn,true,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,9325,9325,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"Same as pr followed by (newline)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5462,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5462,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tv_DASH_pop_DASH_tail,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,5462,5462,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10191,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10191,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, return it's default-dispatch-val."], null),cljs.core.cst$sym$cljs$core_SLASH_default_DASH_dispatch_DASH_val,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),null,cljs.core.list(null,null),1,10191,10191,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),"Given a multimethod, return it's default-dispatch-val."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",4188,10,4188,14,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$state,cljs.core.cst$sym$meta,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Atom,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$state,cljs.core.cst$sym$meta,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4188,4188,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$state,cljs.core.cst$sym$meta,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6386,cljs.core.cst$kw$column,27,cljs.core.cst$kw$end_DASH_line,6386,cljs.core.cst$kw$end_DASH_column,44,cljs.core.cst$kw$declared,true], null),6,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,"cljs/core.cljs",27,true,10,7109,false,true,7109,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2565,15,2565,33,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the product of nums. (*) returns 1.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_multiply,true,"cljs/core.cljs",33,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2565,cljs.core.cst$sym$number,2565,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the product of nums. (*) returns 1."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,"cljs/core.cljs",22,true,10,7034,false,7034,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4019,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4019,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is even, throws an exception if n is not an integer"], null),cljs.core.cst$sym$cljs$core_SLASH_even_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,4019,cljs.core.cst$sym$boolean,4019,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),"Returns true if n is even, throws an exception if n is not an integer"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1194,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1194,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null))),cljs.core.cst$kw$doc,"EXPERIMENTAL: Given an ES2015 compatible iterator return a seq."], null),cljs.core.cst$sym$cljs$core_SLASH_es6_DASH_iterator_DASH_seq,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)),null,cljs.core.list(null,null),1,1194,1194,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null))),"EXPERIMENTAL: Given an ES2015 compatible iterator return a seq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2542,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2542,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than x, an int."], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_dec,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2542,2542,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns a number one less than x, an int."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",1268,14,1268,18,null,true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$inst_DASH_ms_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_Inst,"cljs/core.cljs",18,1,1268,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$inst_DASH_ms_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)], null)], true, false)], null),null,1268,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$js_SLASH_Date,null], null), null),null,cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6834,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6834,cljs.core.cst$kw$end_DASH_column,38,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$cnt,cljs.core.cst$sym$key], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_collision_DASH_node_DASH_find_DASH_index,false,"cljs/core.cljs",38,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$cnt,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,6834,6834,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$cnt,cljs.core.cst$sym$key], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6118,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,6118,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_persistent_DASH_array_DASH_map_DASH_seq,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,6118,6118,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_RangeIterator,"cljs/core.cljs",23,true,10,8773,false,8773,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_MultiStepper,"cljs/core.cljs",22,true,10,3843,false,3843,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10372,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,10372,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Return true if the value is the data representation of a tagged literal"], null),cljs.core.cst$sym$cljs$core_SLASH_tagged_DASH_literal_QMARK_,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)),null,cljs.core.list(null,null),1,10372,cljs.core.cst$sym$boolean,10372,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),"Return true if the value is the data representation of a tagged literal"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3497,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3497,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_double_DASH_array,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),null,cljs.core.list(null,null),1,3497,3497,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10549,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10549,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null))),cljs.core.cst$kw$doc,"Bootstrap only.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_create_DASH_ns,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),null,cljs.core.list(null,null),1,10549,10549,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),"Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",2923,10,2923,19,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_EmptyList,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,2923,2923,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2300,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2300,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_seq_DASH_reduce,false,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2300,2300,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3553,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3553,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arglist], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_spread,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arglist], null)),null,cljs.core.list(null,null),1,3553,3553,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arglist], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7443,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7443,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$ins,cljs.core.cst$sym$right], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_balance_DASH_left,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$ins,cljs.core.cst$sym$right], null)),null,cljs.core.list(null,null),1,7443,7443,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$ins,cljs.core.cst$sym$right], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2996,cljs.core.cst$kw$column,12,cljs.core.cst$kw$end_DASH_line,2996,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rev], null))),cljs.core.cst$kw$doc,"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil"], null),cljs.core.cst$sym$cljs$core_SLASH_rseq,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rev], null)),null,cljs.core.list(null,null),1,2996,cljs.core.cst$sym$seq,2996,1,cljs.core.cst$sym$seq,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rev], null))),"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10310,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10310,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_cause,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null)),null,cljs.core.list(null,null),1,10310,10310,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),"Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",745,14,745,20,"Protocol for adding resetting functionality.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of o to new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IReset,"cljs/core.cljs",20,1,745,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of o to new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)], true, false)], null),null,745,cljs.core.PersistentHashSet.EMPTY,"Protocol for adding resetting functionality.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",475,14,475,34,"Protocol for creating an empty collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_empty,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,"cljs/core.cljs",34,1,475,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_empty,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null),null,475,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 28, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_LazyTransformer,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for creating an empty collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6036,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6036,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_map_DASH_index_DASH_of,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6036,6036,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10303,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10303,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_message,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null)),null,cljs.core.list(null,null),1,10303,10303,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),"Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6460,11,6460,23,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_NodeIterator,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),2,cljs.core.cst$kw$positional,6460,6460,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9125,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9125,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_string_DASH_print,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,9125,9125,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2519,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2519,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_float,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2519,cljs.core.cst$sym$number,2519,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_fixture2,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9541,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,9541,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9541,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,9541,cljs.core.cst$kw$end_DASH_column,14], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",621,14,621,21,"Marker interface indicating a record object",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IRecord,"cljs/core.cljs",21,1,621,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,621,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null], null), null),"Marker interface indicating a record object",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9283,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9283,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_str,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,9283,9283,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4909,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4909,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_first_DASH_array_DASH_for_DASH_longvec,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)),null,cljs.core.list(null,null),1,4909,4909,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5973,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5973,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_es6_DASH_set_DASH_entries_DASH_iterator,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,5973,5973,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3561,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3561,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null))),cljs.core.cst$kw$doc,"Returns a lazy seq representing the concatenation of the elements in the supplied colls.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_concat,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,3561,3561,(2),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null)),"Returns a lazy seq representing the concatenation of the elements in the supplied colls."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9967,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,9967,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_methods,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)),null,cljs.core.list(null,null),1,9961,9967,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null))),null]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_reserved,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10402,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,10404,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|Object}"], null),cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10404,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,10404,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|Object}"], null)], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",572,14,572,31,null,true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref_DASH_with_DASH_timeout,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IDerefWithTimeout,"cljs/core.cljs",31,1,572,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref_DASH_with_DASH_timeout,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)], null)], true, false)], null),null,572,cljs.core.PersistentHashSet.EMPTY,null,cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,987,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,987,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null))),cljs.core.cst$kw$doc,"Returns a Symbol with the given namespace and name.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_symbol,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,987,987,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),"Returns a Symbol with the given namespace and name."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3442,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3442,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll."], null),cljs.core.cst$sym$cljs$core_SLASH_to_DASH_array_DASH_2d,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3442,3442,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Subvec,"cljs/core.cljs",16,true,10,5301,false,5301,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$jsdoc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10261,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,10261,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@constructor"], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$message,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ExceptionInfo,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$message,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),null,cljs.core.list(null,null),1,10260,10261,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$message,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null))),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@constructor"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2643,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2643,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"Modulus of num and div. Truncates toward negative infinity."], null),cljs.core.cst$sym$cljs$core_SLASH_mod,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null)),null,cljs.core.list(null,null),1,2643,2643,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),"Modulus of num and div. Truncates toward negative infinity."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",547,14,547,18,"Protocol for adding set functionality to a collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll that does not contain v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISet,"cljs/core.cljs",18,1,547,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll that does not contain v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)], null)], true, false)], null),null,547,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null], null), null),"Protocol for adding set functionality to a collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1957,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1957,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast."], null),cljs.core.cst$sym$cljs$core_SLASH_pop,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1957,1957,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",661,14,661,22,"Protocol for types which can have a deferred realization. Currently only\n  implemented by Delay and LazySeq.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_realized_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if a value for x has been produced, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IPending,"cljs/core.cljs",22,1,661,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_realized_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if a value for x has been produced, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)], true, false)], null),null,661,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Delay,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null], null), null),"Protocol for types which can have a deferred realization. Currently only\n  implemented by Delay and LazySeq.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,641,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,641,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns the key for entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$sym$cljs$core_SLASH__DASH_entry_DASH_key,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)),null,cljs.core.list(null,null),1,629,641,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null))),"Returns the key for entry."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_CHAR_MAP,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,285,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,286,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null),cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,286,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,286,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null)], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4943,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4943,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pop_DASH_tail,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,4943,4943,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3636,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3636,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"Returns a transient map that doesn't contain a mapping for key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_dissoc_BANG_,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,3636,3636,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),"Returns a transient map that doesn't contain a mapping for key(s)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8966,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8966,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_reductions,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,8966,8966,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1412,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1412,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements nth in constant time"], null),cljs.core.cst$sym$cljs$core_SLASH_indexed_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1412,cljs.core.cst$sym$boolean,1412,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll implements nth in constant time"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2419,15,2419,16,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__DASH_,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2419,cljs.core.cst$sym$number,2419,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",602,13,602,19,cljs.core.cst$sym$boolean,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,"Returns true if o and other are equal, false otherwise.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IEquiv,cljs.core.cst$sym$cljs$core_SLASH__DASH_equiv,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)),null,cljs.core.list(null,null),1,600,cljs.core.cst$sym$boolean,602,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null))),"Returns true if o and other are equal, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8773,10,8773,23,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_RangeIterator,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8773,8773,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$end,cljs.core.cst$sym$step], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6733,10,6733,19,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayNode,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6733,6733,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3624,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3624,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null))),cljs.core.cst$kw$doc,"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_assoc_BANG_,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,3624,3624,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8572,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8572,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_set,true,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,8572,8572,(0),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2366,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2366,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals."], null),cljs.core.cst$sym$cljs$core_SLASH_reduce_DASH_kv,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2366,2366,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_reset_BANG_,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6399,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,6399,cljs.core.cst$kw$end_DASH_column,55,cljs.core.cst$kw$declared,true,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6399,cljs.core.cst$kw$column,49,cljs.core.cst$kw$end_DASH_line,6399,cljs.core.cst$kw$end_DASH_column,55,cljs.core.cst$kw$declared,true], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8641,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8641,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns the name String of a string, symbol or keyword."], null),cljs.core.cst$sym$cljs$core_SLASH_name,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,8641,8641,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns the name String of a string, symbol or keyword."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7657,10,7657,17,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_RedNode,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7657,7657,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4917,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4917,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_array_DASH_for,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,4917,4917,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",434,14,434,16,"Marker protocol",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_Fn,"cljs/core.cljs",16,1,434,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,434,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$function,null,cljs.core.cst$sym$cljs$core_SLASH_MetaFn,null], null), null),"Marker protocol",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1631,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1631,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (first x))"], null),cljs.core.cst$sym$cljs$core_SLASH_ffirst,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1631,1631,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Same as (first (first x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6713,10,6713,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayNodeIterator,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6713,6713,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8578,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8578,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new sorted set with supplied keys.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_set,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keys)], null),null,cljs.core.list(null),1,8578,8578,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),"Returns a new sorted set with supplied keys."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9269,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9269,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a sequence of objects using string-print, observing all\n  the options given in opts"], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_with_DASH_opts,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9269,9269,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),"Prints a sequence of objects using string-print, observing all\n  the options given in opts"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,"cljs/core.cljs",27,true,10,7916,false,7916,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7916,10,7916,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$cnt,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentTreeMap,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$cnt,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7916,7916,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$cnt,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1375,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1375,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_reduce,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null,null),1,1375,1375,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1408,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1408,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements count in constant time"], null),cljs.core.cst$sym$cljs$core_SLASH_counted_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1408,cljs.core.cst$sym$boolean,1408,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll implements count in constant time"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10377,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10377,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$symbol_QMARK_,cljs.core.cst$sym$tag)], null)], null)))),cljs.core.cst$kw$doc,"Construct a data representation of a tagged literal from a\n  tag symbol and a form."], null),cljs.core.cst$sym$cljs$core_SLASH_tagged_DASH_literal,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null)),null,cljs.core.list(null,null),1,10377,10377,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$symbol_QMARK_,cljs.core.cst$sym$tag)], null)], null)))),"Construct a data representation of a tagged literal from a\n  tag symbol and a form."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9313,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9313,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as print followed by (newline)",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_println,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,9313,9313,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"Same as print followed by (newline)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4806,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4806,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created."], null),cljs.core.cst$sym$cljs$core_SLASH_assoc_DASH_in,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$p__10729,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,4806,4806,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$v], null))),"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,"cljs/core.cljs",27,true,10,8320,false,8320,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2703,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2703,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Test bit at index n"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_test,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2703,cljs.core.cst$sym$boolean,2703,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Test bit at index n"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",10484,10,10484,19,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$name], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Namespace,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,10484,10484,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$name], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7095,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,7095,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$declared,true], null),5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,"cljs/core.cljs",26,true,10,7265,false,true,7265,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7109,10,7109,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$root,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentHashMap,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$root,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7109,7109,6,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$root,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6039,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6039,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_extend_DASH_kv,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,6039,6039,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",750,14,750,19,"Protocol for adding swapping functionality.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_swap_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Swaps the value of o to be (apply f current-value-of-atom args)."], null)),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISwap,"cljs/core.cljs",19,1,750,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_swap_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Swaps the value of o to be (apply f current-value-of-atom args)."], null)),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)], null)], true, false)], null),null,750,cljs.core.PersistentHashSet.EMPTY,"Protocol for adding swapping functionality.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2031,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,2031,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$declared,true], null),4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,"cljs/core.cljs",21,true,10,3336,false,true,3336,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9732,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9732,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use."], null),cljs.core.cst$sym$cljs$core_SLASH_memoize,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,9732,9732,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9479,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9479,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_alter_DASH_meta_BANG_,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),null,cljs.core.list(null),1,9479,9479,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",768,10,768,28,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sb], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_StringBufferWriter,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sb], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,768,768,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sb], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2748,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2748,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is zero, else false"], null),cljs.core.cst$sym$cljs$core_SLASH_zero_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2748,cljs.core.cst$sym$boolean,2748,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if num is zero, else false"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5437,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5437,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tv_DASH_ensure_DASH_editable,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,5437,5437,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3184,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3184,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a keyword without a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_simple_DASH_keyword_QMARK_,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3184,cljs.core.cst$sym$boolean,3184,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a keyword without a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1416,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1416,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH__DASH_indexOf,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),null,cljs.core.list(null,null),1,1416,1416,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_main_DASH_cli_DASH_fn_STAR_,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,249,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,253,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$doc,"When compiled for a command-line target, whatever function\n  *main-cli-fn* is set to will be called with the command-line\n  argv as arguments",cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,253,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,253,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$doc,"When compiled for a command-line target, whatever function\n  *main-cli-fn* is set to will be called with the command-line\n  argv as arguments"], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",564,9,564,17,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IVector,"Returns a new vector with value val added at position n.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IVector,cljs.core.cst$sym$cljs$core_SLASH__DASH_assoc_DASH_n,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,562,cljs.core.cst$sym$clj,564,3,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null))),"Returns a new vector with value val added at position n."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2547,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2547,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than x, an int."], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_dec_DASH_int,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2547,2547,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns a number one less than x, an int."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2816,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2816,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_imap,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)),null,cljs.core.list(null,null),1,2816,2816,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9932,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9932,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_dominates,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)),null,cljs.core.list(null,null),1,9932,9932,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3604,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3604,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),cljs.core.cst$kw$doc,"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception."], null),cljs.core.cst$sym$cljs$core_SLASH_persistent_BANG_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)),null,cljs.core.list(null,null),1,3604,3604,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,61,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,61,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Set *print-fn* to f."], null),cljs.core.cst$sym$cljs$core_SLASH_set_DASH_print_DASH_fn_BANG_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,61,61,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Set *print-fn* to f."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1646,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1646,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (next (next x))"], null),cljs.core.cst$sym$cljs$core_SLASH_nnext,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1646,1646,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Same as (next (next x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$sym$cljs$core_SLASH_Box,"cljs/core.cljs",13,true,10,6397,false,6397,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7468,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7468,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$ins], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_balance_DASH_right,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$ins], null)),null,cljs.core.list(null,null),1,7468,7468,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$ins], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9972,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9972,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_throw_DASH_no_DASH_method_DASH_error,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,9972,9972,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10451,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10451,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$munged_DASH_name], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_demunge_DASH_str,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$munged_DASH_name], null)),null,cljs.core.list(null,null),1,10451,10451,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$munged_DASH_name], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9493,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9493,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1"], null),cljs.core.cst$sym$cljs$core_SLASH_add_DASH_watch,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,9493,9493,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null))),"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4000,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4000,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns false if (pred x) is logical true for every x in\n  coll, else true."], null),cljs.core.cst$sym$cljs$core_SLASH_not_DASH_every_QMARK_,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4000,cljs.core.cst$sym$boolean,4000,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns false if (pred x) is logical true for every x in\n  coll, else true."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2654,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2654,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"remainder of dividing numerator by denominator."], null),cljs.core.cst$sym$cljs$core_SLASH_rem,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null)),null,cljs.core.list(null,null),1,2654,2654,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),"remainder of dividing numerator by denominator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9245,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9245,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_sb_DASH_with_DASH_opts,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9245,9245,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7097,10,7097,21,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_HashMapIter,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7097,7097,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_BitmapIndexedNode,"cljs/core.cljs",27,true,10,6498,false,6498,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6963,10,6963,17,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_NodeSeq,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6963,6963,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4005,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4005,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)"], null),cljs.core.cst$sym$cljs$core_SLASH_some,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4005,4005,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",735,14,735,20,"Protocol for adding a name.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_name,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the name String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_namespace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the namespace String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_INamed,"cljs/core.cljs",20,1,735,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_name,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the name String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_namespace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the namespace String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)], true, false)], null),null,735,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_MultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null], null), null),"Protocol for adding a name.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6397,10,6397,13,cljs.core.PersistentHashSet.EMPTY,null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Box,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6397,6397,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",585,14,585,21,"Protocol for seq types that can reduce themselves.\n  Called by cljs.core/reduce.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IReduce,"cljs/core.cljs",21,1,585,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)], null)], true, false)], null),null,585,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 21, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_Eduction,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayChunk,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for seq types that can reduce themselves.\n  Called by cljs.core/reduce.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2151,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2151,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a negative integer"], null),cljs.core.cst$sym$cljs$core_SLASH_neg_DASH_int_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2151,cljs.core.cst$sym$boolean,2151,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a negative integer"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4507,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4507,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)))),cljs.core.cst$kw$doc,"Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_drop,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4507,4507,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_NodeIterator,"cljs/core.cljs",23,true,11,6460,false,6460,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2038,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2038,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"Create JavaSript object from an even number arguments representing\n  interleaved keys and values.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH_obj,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,2038,2038,(0),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"Create JavaSript object from an even number arguments representing\n  interleaved keys and values."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",682,14,682,34,"Protocol for adding basic functionality to transient collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Adds value val to tcoll and returns tcoll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_persistent_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a persistent data structure from tcoll and returns it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,"cljs/core.cljs",34,1,682,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Adds value val to tcoll and returns tcoll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_persistent_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a persistent data structure from tcoll and returns it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)], true, false)], null),null,682,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,null], null), null),"Protocol for adding basic functionality to transient collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Atom,"cljs/core.cljs",14,true,10,4188,false,4188,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1731,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1731,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$doc,"Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_nth,false,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,1731,1731,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),"Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2007,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2007,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies ISorted"], null),cljs.core.cst$sym$cljs$core_SLASH_sorted_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2007,cljs.core.cst$sym$boolean,2007,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll satisfies ISorted"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,188,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,188,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is nil, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_nil_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,188,cljs.core.cst$sym$boolean,188,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is nil, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4577,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4577,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of [(take n coll) (drop n coll)]"], null),cljs.core.cst$sym$cljs$core_SLASH_split_DASH_at,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4577,4577,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),"Returns a vector of [(take n coll) (drop n coll)]"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8308,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,8308,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$declared,true], null),1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,"cljs/core.cljs",26,true,10,8419,false,true,8419,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_e,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,170,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,172,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the most recent exception caught by the repl",cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,172,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,172,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the most recent exception caught by the repl"], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6050,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6050,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_map_DASH_extend_DASH_kv,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,6050,6050,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9260,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9260,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Same as pr-str-with-opts followed by (newline)"], null),cljs.core.cst$sym$cljs$core_SLASH_prn_DASH_str_DASH_with_DASH_opts,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9260,9260,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),"Same as pr-str-with-opts followed by (newline)"]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_not_DASH_native,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,179,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,179,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,179,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,179,cljs.core.cst$kw$end_DASH_column,16], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9611,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9611,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_random_DASH_sample,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9611,9611,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8292,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8292,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map,cljs.core.cst$sym$keyseq], null))),cljs.core.cst$kw$doc,"Returns a map containing only those entries in map whose key is in keys"], null),cljs.core.cst$sym$cljs$core_SLASH_select_DASH_keys,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map,cljs.core.cst$sym$keyseq], null)),null,cljs.core.list(null,null),1,8292,8292,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map,cljs.core.cst$sym$keyseq], null))),"Returns a map containing only those entries in map whose key is in keys"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2666,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2666,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise and",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_and,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2666,2666,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise and"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3541,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3541,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq",cljs.core.cst$kw$added,"1.9"], null),"1.9",cljs.core.cst$sym$cljs$core_SLASH_bounded_DASH_count,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3541,3541,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4842,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4842,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_update,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),null,cljs.core.list(null,null,null,null,null),1,4842,4842,(6),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_gensym_counter,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9524,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,9526,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null),cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9526,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,9526,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10570,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10570,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null),cljs.core.cst$sym$cljs$core_SLASH_find_DASH_macros_DASH_ns,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null)),null,cljs.core.list(null,null),1,10570,10570,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),"Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3586,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3586,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_list_STAR_,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null)),null,cljs.core.list(null,null,null,null,null),1,3586,3586,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5986,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5986,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of_DASH_keyword_QMARK_,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,5986,5986,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3106,10,3106,17,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Keyword,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3106,3106,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4815,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4815,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_update_DASH_in,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null)),null,cljs.core.list(null,null,null,null,null),1,4815,4815,(6),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10172,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10172,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val_DASH_x,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null))),cljs.core.cst$kw$doc,"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict"], null),cljs.core.cst$sym$cljs$core_SLASH_prefer_DASH_method,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val_DASH_x,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)),null,cljs.core.list(null,null),1,10172,10172,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val_DASH_x,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null))),"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,934,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,934,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_symbol,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null)),null,cljs.core.list(null,null),1,934,934,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1322,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1322,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is already reduced?, returns it, else returns (reduced x)"], null),cljs.core.cst$sym$cljs$core_SLASH_ensure_DASH_reduced,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1322,1322,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"If x is already reduced?, returns it, else returns (reduced x)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6431,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6431,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,6,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_edit_DASH_and_DASH_set,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,6,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,6431,6431,6,true,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6133,10,6133,28,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentArrayMap,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6133,6133,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,923,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,923,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Evaluates x and tests if it is an instance of the type\n  c. Returns true or false"], null),cljs.core.cst$sym$cljs$core_SLASH_instance_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,923,cljs.core.cst$sym$boolean,923,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c,cljs.core.cst$sym$x], null))),"Evaluates x and tests if it is an instance of the type\n  c. Returns true or false"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1204,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,1204,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_basis,cljs.core.cst$sym$count], null))),cljs.core.cst$kw$doc,"Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms."], null),cljs.core.cst$sym$cljs$core_SLASH_mix_DASH_collection_DASH_hash,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_basis,cljs.core.cst$sym$count], null)),null,cljs.core.list(null,null),1,1204,cljs.core.cst$sym$number,1204,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_basis,cljs.core.cst$sym$count], null))),"Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9064,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9064,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups."], null),cljs.core.cst$sym$cljs$core_SLASH_re_DASH_find,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9064,9064,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9654,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9654,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proc,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil"], null),cljs.core.cst$sym$cljs$core_SLASH_run_BANG_,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proc,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9654,9654,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proc,cljs.core.cst$sym$coll], null))),"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil"]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_char_DASH_escapes,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9132,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,9132,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$private,true,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9132,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,9132,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$private,true], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ES6Iterator,"cljs/core.cljs",21,true,10,1168,false,1168,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8263,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8263,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null))),cljs.core.cst$kw$doc,"Returns the value in the map entry."], null),cljs.core.cst$sym$cljs$core_SLASH_val,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null)),null,cljs.core.list(null,null),1,8263,8263,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null))),"Returns the value in the map entry."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta10129], null))),cljs.core.cst$kw$file,"cljs/core.cljs"], null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_t_cljs$core10128,false,"cljs/core.cljs",cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta10129], null)),null,cljs.core.list(null,null),true,3,cljs.core.cst$kw$positional,3746,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta10129], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2528,15,2528,28,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the sum of nums. (+) returns 0.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_add,true,"cljs/core.cljs",28,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2528,cljs.core.cst$sym$number,2528,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the sum of nums. (+) returns 0."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,205,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,205,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is logical false, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_not,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,205,cljs.core.cst$sym$boolean,205,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is logical false, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,757,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,757,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IVolatile,cljs.core.cst$kw$doc,"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IVolatile,cljs.core.cst$sym$cljs$core_SLASH__DASH_vreset_BANG_,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)),null,cljs.core.list(null,null),1,755,757,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null))),"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2259,cljs.core.cst$kw$column,17,cljs.core.cst$kw$end_DASH_line,2259,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator."], null),true,cljs.core.cst$sym$cljs$core_SLASH_fn_DASH__GT_comparator,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,2259,2259,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1934,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1934,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null))),cljs.core.cst$kw$doc,"Returns an object of the same type and value as obj, with\n  map m as its metadata."], null),cljs.core.cst$sym$cljs$core_SLASH_with_DASH_meta,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,1934,1934,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null))),"Returns an object of the same type and value as obj, with\n  map m as its metadata."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1327,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1327,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is reduced?, returns (deref x), else returns x"], null),cljs.core.cst$sym$cljs$core_SLASH_unreduced,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1327,1327,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"If x is reduced?, returns (deref x), else returns x"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2022,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2022,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IRecord"], null),cljs.core.cst$sym$cljs$core_SLASH_record_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2022,cljs.core.cst$sym$boolean,2022,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies IRecord"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,255,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,255,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return x's constructor."], null),cljs.core.cst$sym$cljs$core_SLASH_type,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,255,255,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return x's constructor."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,183,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,183,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Tests if 2 arguments are the same object"], null),cljs.core.cst$sym$cljs$core_SLASH_identical_QMARK_,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,183,cljs.core.cst$sym$boolean,183,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Tests if 2 arguments are the same object"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",739,12,739,22,cljs.core.cst$sym$string,cljs.core.cst$sym$cljs$core_SLASH_INamed,"Returns the namespace String of x.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.cst$sym$cljs$core_SLASH_INamed,cljs.core.cst$sym$cljs$core_SLASH__DASH_namespace,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,735,cljs.core.cst$sym$string,739,1,cljs.core.cst$sym$string,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns the namespace String of x."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2552,15,2552,35,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_divide_DASH_int,true,"cljs/core.cljs",35,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2552,cljs.core.cst$sym$number,2552,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10588,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10588,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null),cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_name,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj], null)),null,cljs.core.list(null,null),1,10588,10588,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj], null))),"Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9806,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9806,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_swap_DASH_global_DASH_hierarchy_BANG_,true,"cljs/core.cljs",30,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),null,cljs.core.list(null),1,9806,9806,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8662,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8662,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the x for which (k x), a number, is greatest.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_max_DASH_key,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,8662,8662,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the x for which (k x), a number, is greatest."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8456,10,8456,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$tree_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentTreeSet,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$tree_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8456,8456,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$tree_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$meta],[cljs.core.cst$sym$cljs$core_SLASH__STAR_out_STAR_,"cljs/core.cljs",36,1,39,8,true,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,39,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,39,cljs.core.cst$kw$end_DASH_column,8,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3287,10,3287,21,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ChunkBuffer,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3287,3287,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,872,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,872,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_string,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,872,872,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ValSeq,"cljs/core.cljs",16,true,10,8192,false,8192,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9968,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,9968,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_prefers,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)),null,cljs.core.list(null,null),1,9961,9968,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4282,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4282,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$val], null))),cljs.core.cst$kw$doc,"Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed."], null),cljs.core.cst$sym$cljs$core_SLASH_set_DASH_validator_BANG_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,4282,4282,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$val], null))),"Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3164,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3164,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword"], null),cljs.core.cst$sym$cljs$core_SLASH_ident_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3164,cljs.core.cst$sym$boolean,3164,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a symbol or keyword"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",577,16,577,21,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$sym$cljs$core_SLASH_IMeta,"Returns the metadata of object o.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IMeta,cljs.core.cst$sym$cljs$core_SLASH__DASH_meta,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,575,cljs.core.cst$sym$clj_DASH_or_DASH_nil,577,1,cljs.core.cst$sym$clj_DASH_or_DASH_nil,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns the metadata of object o."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7441,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,7441,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$declared,true], null),5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_RedNode,"cljs/core.cljs",17,true,10,7657,false,true,7657,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9970,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,9970,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_dispatch_DASH_fn,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)),null,cljs.core.list(null,null),1,9961,9970,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1450,10,1450,28,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_IndexedSeqIterator,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1450,1450,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9963,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,9963,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_add_DASH_method,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)),null,cljs.core.list(null,null),1,9961,9963,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7490,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7490,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$del,cljs.core.cst$sym$right], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_balance_DASH_left_DASH_del,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$del,cljs.core.cst$sym$right], null)),null,cljs.core.list(null,null),1,7490,7490,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$del,cljs.core.cst$sym$right], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4251,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4251,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_swap_BANG_,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,4251,4251,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8257,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8257,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null))),cljs.core.cst$kw$doc,"Returns a sequence of the map's values."], null),cljs.core.cst$sym$cljs$core_SLASH_vals,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null)),null,cljs.core.list(null,null),1,8257,8257,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null))),"Returns a sequence of the map's values."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,732,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,732,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first chunk.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,cljs.core.cst$sym$cljs$core_SLASH__DASH_chunked_DASH_next,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,730,732,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new collection of coll without the first chunk."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2590,15,2590,33,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_subtract,true,"cljs/core.cljs",33,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2590,cljs.core.cst$sym$number,2590,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6419,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6419,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_pair,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,6419,6419,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",534,14,534,18,"Protocol for adding mapping functionality to collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the mapping for key k."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IMap,"cljs/core.cljs",18,1,534,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the mapping for key k."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null)], true, false)], null),null,534,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null], null), null),"Protocol for adding mapping functionality to collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3779,10,3779,17,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_SeqIter,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3779,3779,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8583,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8583,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new sorted set with supplied keys, using the supplied comparator.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_set_DASH_by,true,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keys)], null),null,cljs.core.list(null),1,8583,8583,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),"Returns a new sorted set with supplied keys, using the supplied comparator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[6,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 23, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,"cljs/core.cljs",26,true,10,4979,false,4979,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 21, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1088,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1088,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Return true if x implements ICloneable protocol."], null),cljs.core.cst$sym$cljs$core_SLASH_cloneable_QMARK_,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)),null,cljs.core.list(null,null),1,1088,cljs.core.cst$sym$boolean,1088,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),"Return true if x implements ICloneable protocol."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3172,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3172,cljs.core.cst$kw$end_DASH_column,32,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword with a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_qualified_DASH_ident_QMARK_,false,"cljs/core.cljs",32,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3172,cljs.core.cst$sym$boolean,3172,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a symbol or keyword with a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,855,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,855,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_string_STAR_,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,855,855,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6401,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,6401,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$other], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_key_DASH_test,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$other], null)),null,cljs.core.list(null,null),1,6401,cljs.core.cst$sym$boolean,6401,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$other], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3888,10,3888,25,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$stepper,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_LazyTransformer,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$stepper,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3888,3888,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$stepper,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9962,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,9962,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_reset,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)),null,cljs.core.list(null,null),1,9961,9962,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2082,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2082,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is the value true, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_true_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2082,cljs.core.cst$sym$boolean,2082,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is the value true, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10508,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10508,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ctxt,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null),true,cljs.core.cst$sym$cljs$core_SLASH_find_DASH_ns_DASH_obj_STAR_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ctxt,cljs.core.cst$sym$xs], null)),null,cljs.core.list(null,null),1,10508,10508,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ctxt,cljs.core.cst$sym$xs], null))),"Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,385,cljs.core.cst$kw$column,14,cljs.core.cst$kw$end_DASH_line,385,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$tag,cljs.core.cst$sym$array,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$var_DASH_args], null))),cljs.core.cst$kw$doc,"Creates a new javascript array.\n@param {...*} var_args"], null),cljs.core.cst$sym$cljs$core_SLASH_array,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$var_DASH_args], null)),null,cljs.core.list(null,null),1,385,cljs.core.cst$sym$array,385,1,cljs.core.cst$sym$array,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$var_DASH_args], null))),"Creates a new javascript array.\n@param {...*} var_args"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9304,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,9304,cljs.core.cst$kw$end_DASH_column,8,cljs.core.cst$kw$doc,"Prints the object(s) using string-print.\n  print and println produce output for human consumption."], null),cljs.core.cst$sym$cljs$core_SLASH_print,true,"cljs/core.cljs",8,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs], null)),null,cljs.core.List.EMPTY,1,9301,9304,0,true,null,"Prints the object(s) using string-print.\n  print and println produce output for human consumption."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,556,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,556,cljs.core.cst$kw$end_DASH_column,9,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IStack,cljs.core.cst$kw$doc,"Returns the item from the top of the stack. Is used by cljs.core/peek.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IStack,cljs.core.cst$sym$cljs$core_SLASH__DASH_peek,false,"cljs/core.cljs",9,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,552,556,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the item from the top of the stack. Is used by cljs.core/peek."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",501,14,501,18,"Protocol for collections to provide access to their items as sequences.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first item in the collection coll. Used by cljs.core/first."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_rest,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISeq,"cljs/core.cljs",18,1,501,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first item in the collection coll. Used by cljs.core/first."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_rest,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null),null,501,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ES6IteratorSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_LazyTransformer,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null], null), null),"Protocol for collections to provide access to their items as sequences.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1678,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1678,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll, or nil"], null),cljs.core.cst$sym$cljs$core_SLASH_empty,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1678,1678,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns an empty collection of the same category as coll, or nil"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10167,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10167,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),cljs.core.cst$kw$doc,"Removes the method of multimethod associated with dispatch-value."], null),cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_method,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,10167,10167,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),"Removes the method of multimethod associated with dispatch-value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,"cljs/core.cljs",28,true,10,5640,false,5640,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7509,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7509,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$del], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_balance_DASH_right_DASH_del,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$del], null)),null,cljs.core.list(null,null),1,7509,7509,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$del], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4305,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4305,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null))),cljs.core.cst$kw$doc,"Creates and returns a Volatile with an initial value of val."], null),cljs.core.cst$sym$cljs$core_SLASH_volatile_BANG_,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,4305,4305,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null))),"Creates and returns a Volatile with an initial value of val."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.cst$kw$file,"cljs/core.cljs"], null),cljs.core.cst$sym$cljs$core_SLASH__SLASH_,true,"cljs/core.cljs",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2435,cljs.core.cst$sym$number,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6428,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6428,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_bitpos,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)),null,cljs.core.list(null,null),1,6428,6428,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2672,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2672,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise or",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_or,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2672,2672,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise or"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,816,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,816,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$len], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_fmix,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$len], null)),null,cljs.core.list(null,null),1,816,cljs.core.cst$sym$number,816,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$len], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5200,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5200,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Creates a new vector containing the args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_vector,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$args)], null),null,cljs.core.list(null),1,5200,5200,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Creates a new vector containing the args."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2806,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2806,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_coll,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2806,2806,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6410,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6410,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_clone_DASH_and_DASH_set,false,"cljs/core.cljs",21,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,6410,6410,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6388,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6388,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$len,cljs.core.cst$sym$arr], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH__GT_transient_DASH_hash_DASH_map,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$len,cljs.core.cst$sym$arr], null)),null,cljs.core.list(null,null),1,6388,6388,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$len,cljs.core.cst$sym$arr], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2478,16,2478,18,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__GT__EQ_,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2478,cljs.core.cst$sym$boolean,2478,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8419,10,8419,26,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TransientHashSet,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8419,8419,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4532,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4532,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return a lazy sequence of all but the last n (default 1) items in coll",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_drop_DASH_last,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,4532,4532,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),"Return a lazy sequence of all but the last n (default 1) items in coll"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3764,10,3764,19,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayIter,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3764,3764,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,217,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,217,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x's constructor is Object"], null),cljs.core.cst$sym$cljs$core_SLASH_object_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,217,cljs.core.cst$sym$boolean,217,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x's constructor is Object"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7034,10,7034,22,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayNodeSeq,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7034,7034,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7828,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7828,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$left,cljs.core.cst$sym$right], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_append,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$left,cljs.core.cst$sym$right], null)),null,cljs.core.list(null,null),1,7828,7828,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$left,cljs.core.cst$sym$right], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3741,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3741,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"If coll is empty, returns nil, else coll"], null),cljs.core.cst$sym$cljs$core_SLASH_not_DASH_empty,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3741,3741,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"If coll is empty, returns nil, else coll"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8607,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8607,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_distinct,false,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,8607,8607,1,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4763,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4763,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_partition,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null,null),1,4763,4763,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",9961,14,9961,22,null,true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentHashMap.fromArrays([cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefer_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_default_DASH_dispatch_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_methods,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefers,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dispatch_DASH_fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_get_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null))],[new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,"cljs/core.cljs",22,1,9961,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentHashMap.fromArrays([cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefer_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_default_DASH_dispatch_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_methods,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefers,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dispatch_DASH_fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_get_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null))],[new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null)])], null),null,9961,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_MultiFn,null], null), null),null,cljs.core.list("@interface")]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_DEMUNGE_PATTERN,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,339,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,339,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,339,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,339,cljs.core.cst$kw$end_DASH_column,21], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2604,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2604,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$q], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_fix,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$q], null)),null,cljs.core.list(null,null),1,2604,cljs.core.cst$sym$number,2604,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$q], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_EmptyList,"cljs/core.cljs",19,true,10,2923,false,2923,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_HashMapIter,"cljs/core.cljs",21,true,10,7097,false,7097,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta7988], null))),cljs.core.cst$kw$file,"cljs/core.cljs"], null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_t_cljs$core7987,false,"cljs/core.cljs",cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta7988], null)),null,cljs.core.list(null,null),true,3,cljs.core.cst$kw$positional,3746,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta7988], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",525,14,525,26,"Protocol for adding associativity to collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_contains_DASH_key_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if k is a key in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with a mapping from key k to\n     value v added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,"cljs/core.cljs",26,1,525,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_contains_DASH_key_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if k is a key in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with a mapping from key k to\n     value v added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)], null)], true, false)], null),null,525,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding associativity to collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2689,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2689,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Flip bit at index n"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_flip,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2689,2689,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Flip bit at index n"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3475,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3475,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_long_DASH_array,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),null,cljs.core.list(null,null),1,3475,3475,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9845,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9845,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_descendants,false,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),null,cljs.core.list(null,null),1,9845,9845,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),"Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,795,cljs.core.cst$kw$column,17,cljs.core.cst$kw$end_DASH_line,795,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_imul,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),3,795,cljs.core.cst$sym$number,795,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",9545,10,9545,15,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$value,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Delay,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$value,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,9545,9545,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$value,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4928,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4928,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_for,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,4928,4928,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8268,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8268,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null))),cljs.core.cst$kw$doc,"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_merge,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$maps)], null),null,cljs.core.list(null),1,8268,8268,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",610,14,610,22,"Protocol for adding the ability to a type to be transformed into a sequence.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a seq of o, or nil if o is empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,"cljs/core.cljs",22,1,610,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a seq of o, or nil if o is empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)], true, false)], null),null,610,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 31, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_Eduction,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_ES6IteratorSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_LazyTransformer,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding the ability to a type to be transformed into a sequence.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2638,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2638,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"Modulus of num and div with original javascript behavior. i.e. bug for negative numbers"], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH_mod,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null)),null,cljs.core.list(null,null),1,2638,2638,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),"Modulus of num and div with original javascript behavior. i.e. bug for negative numbers"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2120,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2120,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is an integer."], null),cljs.core.cst$sym$cljs$core_SLASH_integer_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2120,cljs.core.cst$sym$boolean,2120,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),"Returns true if n is an integer."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_MetaFn,"cljs/core.cljs",16,true,10,1881,false,1881,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$meta],[cljs.core.cst$sym$cljs$core_SLASH_NS_CACHE,"cljs/core.cljs",10504,1,10506,11,"Bootstrap only.",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10506,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,10506,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$doc,"Bootstrap only.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4738,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4738,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_mapv,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),null,cljs.core.list(null,null,null,null),1,4738,4738,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8687,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8687,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_partition_DASH_all,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null,null),1,8687,8687,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8916,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8916,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_partition_DASH_by,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,8916,8916,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",615,14,615,25,"Marker interface indicating a persistent collection of sequential items",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISequential,"cljs/core.cljs",25,1,615,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,615,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 23, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_Eduction,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_LazyTransformer,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Marker interface indicating a persistent collection of sequential items",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3207,10,3207,17,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_LazySeq,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3207,3207,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5767,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5767,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Assumes y is a map. Returns true if x equals y, otherwise returns\n  false."], null),true,cljs.core.cst$sym$cljs$core_SLASH_equiv_DASH_map,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,5767,5767,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Assumes y is a map. Returns true if x equals y, otherwise returns\n  false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",4297,10,4297,18,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IVolatile,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$state,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IVolatile,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Volatile,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$state,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4297,4297,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$state,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3519,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3519,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_object_DASH_array,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),null,cljs.core.list(null,null),1,3519,3519,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,181,cljs.core.cst$kw$column,20,cljs.core.cst$kw$end_DASH_line,181,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$declared,true], null),4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Keyword,"cljs/core.cljs",17,true,10,3106,false,true,3106,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9854,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9854,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null))),cljs.core.cst$kw$doc,"Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_derive,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),null,cljs.core.list(null,null),1,9854,9854,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),"Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3797,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3797,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_seq_DASH_iter,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3797,3797,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",723,14,723,25,"Protocol for accessing a collection as sequential chunks.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first chunk in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new collection of coll with the first chunk removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,"cljs/core.cljs",25,1,723,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first chunk in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new collection of coll with the first chunk removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null),null,723,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null], null), null),"Protocol for accessing a collection as sequential chunks.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10324,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,10324,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x names a special form"], null),cljs.core.cst$sym$cljs$core_SLASH_special_DASH_symbol_QMARK_,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10324,cljs.core.cst$sym$boolean,10324,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x names a special form"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3094,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,3094,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_compare_DASH_keywords,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,3094,3094,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9837,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9837,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_ancestors,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),null,cljs.core.list(null,null),1,9837,9837,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),"Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8743,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8743,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null))),cljs.core.cst$kw$doc,"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_subseq,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),null,cljs.core.list(null,null),1,8743,8743,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3809,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,3809,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$declared,true], null),4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_LazyTransformer,"cljs/core.cljs",25,true,10,3888,false,true,3888,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9528,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9528,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null))),cljs.core.cst$kw$doc,"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_gensym,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),null,cljs.core.list(null,null),1,9528,9528,1,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",513,16,513,21,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$sym$cljs$core_SLASH_INext,"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_INext,cljs.core.cst$sym$cljs$core_SLASH__DASH_next,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,511,cljs.core.cst$sym$clj_DASH_or_DASH_nil,513,1,cljs.core.cst$sym$clj_DASH_or_DASH_nil,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6843,10,6843,27,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_HashCollisionNode,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6843,6843,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9557,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,9557,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"returns true if x is a Delay created with delay"], null),cljs.core.cst$sym$cljs$core_SLASH_delay_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,9557,cljs.core.cst$sym$boolean,9557,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"returns true if x is a Delay created with delay"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7017,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7017,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_create_DASH_inode_DASH_seq,false,"cljs/core.cljs",24,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,7017,7017,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4716,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4716,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_flatten,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4716,4716,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",537,9,537,16,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IMap,"Returns a new collection of coll without the mapping for key k.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IMap,cljs.core.cst$sym$cljs$core_SLASH__DASH_dissoc,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,534,cljs.core.cst$sym$clj,537,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),"Returns a new collection of coll without the mapping for key k."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2635,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2635,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_doubles,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2635,2635,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",527,13,527,27,cljs.core.cst$sym$boolean,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,"Returns true if k is a key in coll.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IAssociative,cljs.core.cst$sym$cljs$core_SLASH__DASH_contains_DASH_key_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,525,cljs.core.cst$sym$boolean,527,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),"Returns true if k is a key in coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9516,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9516,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key], null))),cljs.core.cst$kw$doc,"Removes a watch (set by add-watch) from a reference"], null),cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_watch,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,9516,9516,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key], null))),"Removes a watch (set by add-watch) from a reference"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10289,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10289,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null))),cljs.core.cst$kw$doc,"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_info,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),null,cljs.core.list(null,null),1,10289,10289,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2115,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2115,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Returns true if f returns true for fn? or satisfies IFn."], null),cljs.core.cst$sym$cljs$core_SLASH_ifn_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,2115,cljs.core.cst$sym$boolean,2115,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Returns true if f returns true for fn? or satisfies IFn."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",742,14,742,19,"Marker protocol indicating an atom.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IAtom,"cljs/core.cljs",19,1,742,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,742,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Atom,null], null), null),"Marker protocol indicating an atom.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5688,10,5688,25,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentQueue,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5688,5688,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2165,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2165,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a non-negative integer"], null),cljs.core.cst$sym$cljs$core_SLASH_nat_DASH_int_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2165,cljs.core.cst$sym$boolean,2165,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a non-negative integer"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",667,14,667,24,"Protocol for types that can be watched. Currently only implemented by Atom.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_notify_DASH_watches,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Calls all watchers with this, oldval and newval."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Removes watcher that corresponds to key from this."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,"cljs/core.cljs",24,1,667,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_notify_DASH_watches,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Calls all watchers with this, oldval and newval."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Removes watcher that corresponds to key from this."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)], null)], true, false)], null),null,667,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Atom,null], null), null),"Protocol for types that can be watched. Currently only implemented by Atom.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3814,10,3814,17,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iter], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Stepper,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iter], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3814,3814,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iter], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4862,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4862,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pv_DASH_fresh_DASH_node,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit], null)),null,cljs.core.list(null,null),1,4862,4862,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5426,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5426,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$doc,"Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_subvec,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,5426,5426,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),"Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",704,9,704,14,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,"Returns tcoll with the last item removed from it.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,cljs.core.cst$sym$cljs$core_SLASH__DASH_pop_BANG_,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)),null,cljs.core.list(null,null),1,700,cljs.core.cst$sym$clj,704,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),"Returns tcoll with the last item removed from it."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4072,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4072,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_partial,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null)),null,cljs.core.list(null,null,null,null,null),1,4072,4072,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2033,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2033,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is satisfies IChunkedSeq."], null),cljs.core.cst$sym$cljs$core_SLASH_chunked_DASH_seq_QMARK_,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2033,cljs.core.cst$sym$boolean,2033,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is satisfies IChunkedSeq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4587,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4587,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"DEPRECATED: Use 'repeat' instead.\n  Returns a lazy seq of n xs."], null),cljs.core.cst$sym$cljs$core_SLASH_replicate,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4587,4587,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null))),"DEPRECATED: Use 'repeat' instead.\n  Returns a lazy seq of n xs."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,"cljs/core.cljs",25,true,10,5688,false,5688,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8669,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8669,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the x for which (k x), a number, is least.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_min_DASH_key,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,8669,8669,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the x for which (k x), a number, is least."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2826,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2826,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_iset,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,2826,2826,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1312,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1312,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Wraps x in a way such that a reduce will terminate with the value x"], null),cljs.core.cst$sym$cljs$core_SLASH_reduced,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1312,1312,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Wraps x in a way such that a reduce will terminate with the value x"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9052,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9052,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns the result of (re-find re s) if re fully matches s."], null),cljs.core.cst$sym$cljs$core_SLASH_re_DASH_matches,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9052,9052,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),"Returns the result of (re-find re s) if re fully matches s."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9156,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9156,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_writer_DASH_impl,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9156,9156,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8075,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8075,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new array map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_map,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),null,cljs.core.list(null),1,8075,8075,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new array map with supplied mappings."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",707,14,707,27,"Protocol for adding set functionality to a transient collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll without v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,"cljs/core.cljs",27,1,707,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll without v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)], null)], true, false)], null),null,707,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,null], null), null),"Protocol for adding set functionality to a transient collection.",cljs.core.list("@interface")]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_ITER_SYMBOL,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,283,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,283,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,283,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,283,cljs.core.cst$kw$end_DASH_column,19], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2522,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2522,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_byte,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2522,cljs.core.cst$sym$number,2522,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6458,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,6458,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayNode,"cljs/core.cljs",19,true,10,6733,false,true,6733,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5209,10,5209,20,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ChunkedSeq,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5209,5209,6,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4355,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4355,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null))),cljs.core.cst$kw$doc,"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_every_DASH_pred,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),null,cljs.core.list(null,null,null,null),1,4355,4355,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8181,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8181,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null))),cljs.core.cst$kw$doc,"Returns a sequence of the map's keys."], null),cljs.core.cst$sym$cljs$core_SLASH_keys,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null)),null,cljs.core.list(null,null),1,8181,8181,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null))),"Returns a sequence of the map's keys."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,261,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,261,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proto,cljs.core.cst$sym$obj], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_missing_DASH_protocol,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proto,cljs.core.cst$sym$obj], null)),null,cljs.core.list(null,null),1,261,261,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proto,cljs.core.cst$sym$obj], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,276,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,276,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$file], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_load_DASH_file,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$file], null)),null,cljs.core.list(null,null),1,276,276,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$file], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,"cljs/core.cljs",28,true,10,6133,false,6133,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2199,16,2199,25,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns true if no two of the arguments are =",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_distinct_QMARK_,true,"cljs/core.cljs",25,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2199,cljs.core.cst$sym$boolean,2199,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns true if no two of the arguments are ="]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2135,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2135,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a positive integer"], null),cljs.core.cst$sym$cljs$core_SLASH_pos_DASH_int_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2135,cljs.core.cst$sym$boolean,2135,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a positive integer"]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_never_DASH_equiv,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5765,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,5765,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5765,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,5765,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Stepper,"cljs/core.cljs",17,true,10,3814,false,3814,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2524,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2524,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_short,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2524,cljs.core.cst$sym$number,2524,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",8784,10,8784,15,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Range,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8784,8784,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10178,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10178,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, returns a map of dispatch values -> dispatch fns"], null),cljs.core.cst$sym$cljs$core_SLASH_methods,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),null,cljs.core.list(null,null),1,10178,10178,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),"Given a multimethod, returns a map of dispatch values -> dispatch fns"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4025,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4025,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is odd, throws an exception if n is not an integer"], null),cljs.core.cst$sym$cljs$core_SLASH_odd_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,4025,cljs.core.cst$sym$boolean,4025,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),"Returns true if n is odd, throws an exception if n is not an integer"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3304,10,3304,20,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IChunk,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IChunk,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayChunk,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3304,3304,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3811,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3811,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$stepper], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_lazy_DASH_transformer,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$stepper], null)),null,cljs.core.list(null,null),1,3811,3811,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$stepper], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$type,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core7987,"cljs/core.cljs",true,true,3,3746,false,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",1342,8,1342,17,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null))),"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ci_DASH_reduce,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null,null),1,1342,1342,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization"]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_3,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,166,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,168,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the third most recent value printed",cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,168,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,168,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the third most recent value printed"], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9966,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,9966,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_get_DASH_method,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,9961,9966,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1003,10,1003,13,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.cst$sym$_meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Var,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1003,1003,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8957,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8957,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a map from distinct items in coll to the number of times\n  they appear."], null),cljs.core.cst$sym$cljs$core_SLASH_frequencies,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,8957,8957,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a map from distinct items in coll to the number of times\n  they appear."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2011,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2011,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies IReduce"], null),cljs.core.cst$sym$cljs$core_SLASH_reduceable_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2011,cljs.core.cst$sym$boolean,2011,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll satisfies IReduce"]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_string_DASH_hash_DASH_cache,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,851,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,851,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,851,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,851,cljs.core.cst$kw$end_DASH_column,23], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8758,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8758,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null))),cljs.core.cst$kw$doc,"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_rsubseq,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),null,cljs.core.list(null,null),1,8758,8758,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1302,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1302,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one greater than num."], null),cljs.core.cst$sym$cljs$core_SLASH_inc,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1302,1302,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns a number one greater than num."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,270,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,270,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ty], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_type_DASH__GT_str,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ty], null)),null,cljs.core.list(null,null),1,270,270,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ty], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5817,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5817,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$ks], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_obj_DASH_clone,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$ks], null)),null,cljs.core.list(null,null),1,5817,5817,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$ks], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10182,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10182,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),cljs.core.cst$kw$doc,"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default"], null),cljs.core.cst$sym$cljs$core_SLASH_get_DASH_method,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,10182,10182,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10244,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,10244,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_uuid_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10244,cljs.core.cst$sym$boolean,10244,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4906,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4906,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$i,cljs.core.cst$sym$cnt], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_vector_DASH_index_DASH_out_DASH_of_DASH_bounds,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$i,cljs.core.cst$sym$cnt], null)),null,cljs.core.list(null,null),1,4906,4906,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$i,cljs.core.cst$sym$cnt], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5960,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5960,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_es6_DASH_entries_DASH_iterator,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,5960,5960,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2684,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2684,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Clear bit at index n"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_clear,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2684,2684,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Clear bit at index n"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Range,"cljs/core.cljs",15,true,10,8784,false,8784,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4664,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4664,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_filter,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4664,4664,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7377,10,7377,30,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$cnt,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentTreeMapSeq,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$cnt,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7377,7377,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$cnt,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7081,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7081,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_create_DASH_array_DASH_node_DASH_seq,false,"cljs/core.cljs",29,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,7081,7081,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",702,9,702,18,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,"Returns tcoll with value val added at position n.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,cljs.core.cst$sym$cljs$core_SLASH__DASH_assoc_DASH_n_BANG_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,700,cljs.core.cst$sym$clj,702,3,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null))),"Returns tcoll with value val added at position n."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",580,14,580,23,"Protocol for adding metadata to an object.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_with_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new object with value of o and metadata meta added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,"cljs/core.cljs",23,1,580,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_with_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new object with value of o and metadata meta added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)], null)], true, false)], null),null,580,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 35, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core10128,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core10131,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$analyzer_SLASH_t_cljs$analyzer13084,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_MetaFn,null,cljs.core.cst$sym$cljs$core_SLASH_LazyTransformer,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding metadata to an object.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3009,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3009,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$doc,"Creates a new list containing the items.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_list,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xs)], null),null,cljs.core.list(null),1,3009,3009,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),"Creates a new list containing the items."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2411,15,2411,16,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the sum of nums. (+) returns 0.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__PLUS_,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2411,cljs.core.cst$sym$number,2411,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the sum of nums. (+) returns 0."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_IndexedSeqIterator,"cljs/core.cljs",28,true,10,1450,false,1450,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8911,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8911,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of [(take-while pred coll) (drop-while pred coll)]"], null),cljs.core.cst$sym$cljs$core_SLASH_split_DASH_with,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,8911,8911,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns a vector of [(take-while pred coll) (drop-while pred coll)]"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",4860,10,4860,20,cljs.core.PersistentHashSet.EMPTY,null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$arr], null)))]),cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_VectorNode,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$arr], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4860,4860,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$arr], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,404,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,404,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))),cljs.core.cst$kw$doc,"Sets the value at the index.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_aset,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,404,404,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),"Sets the value at the index."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,786,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,786,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_int_DASH_rotate_DASH_left,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,786,cljs.core.cst$sym$number,786,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3192,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3192,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null))),cljs.core.cst$kw$doc,"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_keyword,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,3192,3192,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",3026,10,3026,14,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Cons,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3026,3026,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,34,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,34,cljs.core.cst$kw$end_DASH_column,7,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"Var bound to the current namespace. Only used for bootstrapping.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_ns_STAR_,"cljs/core.cljs",7,1,true,30,34,"Var bound to the current namespace. Only used for bootstrapping.",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_assert_STAR_,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,41,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,43,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,43,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,43,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$dynamic,true], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7438,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7438,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tree,cljs.core.cst$sym$ascending_QMARK_,cljs.core.cst$sym$cnt], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_create_DASH_tree_DASH_map_DASH_seq,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tree,cljs.core.cst$sym$ascending_QMARK_,cljs.core.cst$sym$cnt], null)),null,cljs.core.list(null,null),1,7438,7438,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tree,cljs.core.cst$sym$ascending_QMARK_,cljs.core.cst$sym$cnt], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",481,14,481,25,"Protocol for adding to a collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ICollection,"cljs/core.cljs",25,1,481,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)], null)], true, false)], null),null,481,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 29, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_LazyTransformer,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding to a collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3868,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3868,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_multi_DASH_stepper,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts], null)),null,cljs.core.list(null,null),1,3868,3868,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2631,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2631,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chars,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2631,2631,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2769,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2769,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null))),cljs.core.cst$kw$doc,"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_str,true,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null,null),1,2769,2769,(1),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null)),"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1140,cljs.core.cst$kw$column,12,cljs.core.cst$kw$end_DASH_line,1140,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil"], null),cljs.core.cst$sym$cljs$core_SLASH_next,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1140,cljs.core.cst$sym$seq,1140,1,cljs.core.cst$sym$seq,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",498,14,498,18,"Marker protocol indicating an array sequence.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ASeq,"cljs/core.cljs",18,1,498,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,498,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null], null), null),"Marker protocol indicating an array sequence.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9239,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9239,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_seq_DASH_writer,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9239,9239,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_SeqIter,"cljs/core.cljs",17,true,10,3779,false,3779,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",437,14,437,17,"Protocol for adding the ability to invoke an object as a function.\n  For example, a vector can also be used to look up a value:\n  ([1 2 3 4] 1) => 2",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_invoke,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IFn,"cljs/core.cljs",17,1,437,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_invoke,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)], null)], true, false)], null),null,437,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_MultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_MetaFn,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding the ability to invoke an object as a function.\n  For example, a vector can also be used to look up a value:\n  ([1 2 3 4] 1) => 2",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9047,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,9047,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript RegExp instance."], null),cljs.core.cst$sym$cljs$core_SLASH_regexp_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,9047,cljs.core.cst$sym$boolean,9047,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a JavaScript RegExp instance."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta10132], null))),cljs.core.cst$kw$file,"cljs/core.cljs"], null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_t_cljs$core10131,false,"cljs/core.cljs",cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta10132], null)),null,cljs.core.list(null,null),true,3,cljs.core.cst$kw$positional,3746,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$meta10132], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8066,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8066,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new hash map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_map,true,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),null,cljs.core.list(null),1,8066,8066,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new hash map with supplied mappings."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9888,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9888,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null))),cljs.core.cst$kw$doc,"Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_underive,false,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),null,cljs.core.list(null,null),1,9888,9888,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),"Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2058,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2058,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_copy,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)),null,cljs.core.list(null,null),1,2058,2058,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5795,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5795,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_obj_DASH_map_DASH_compare_DASH_keys,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,5795,5795,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,747,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,747,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IReset,cljs.core.cst$kw$doc,"Sets the value of o to new-value.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IReset,cljs.core.cst$sym$cljs$core_SLASH__DASH_reset_BANG_,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)),null,cljs.core.list(null,null),1,745,747,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null))),"Sets the value of o to new-value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",505,9,505,14,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ISeq,"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ISeq,cljs.core.cst$sym$cljs$core_SLASH__DASH_rest,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,501,cljs.core.cst$sym$clj,505,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3745,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3745,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),cljs.core.cst$sym$cljs$core_SLASH_nil_DASH_iter,false,"cljs/core.cljs",15,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,3745,3745,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9230,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9230,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer."], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_writer,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9230,9230,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null))),"Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2078,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2078,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is the value false, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_false_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2078,cljs.core.cst$sym$boolean,2078,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is the value false, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[6,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_RangedIterator,"cljs/core.cljs",24,true,10,4957,false,4957,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$doc,cljs.core.cst$kw$meta],[cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_readably_STAR_,"cljs/core.cljs",83,1,89,19,true,"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true",new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,89,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,89,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2633,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2633,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ints,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2633,2633,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4394,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4394,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null))),cljs.core.cst$kw$doc,"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_some_DASH_fn,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),null,cljs.core.list(null,null,null,null),1,4394,4394,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10413,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10413,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),true,cljs.core.cst$sym$cljs$core_SLASH_demunge_DASH_pattern,false,"cljs/core.cljs",23,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,10413,10413,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$doc,cljs.core.cst$kw$meta],[cljs.core.cst$sym$cljs$core_SLASH__STAR_flush_DASH_on_DASH_newline_STAR_,"cljs/core.cljs",69,1,74,21,true,"When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true.",new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,74,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,74,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true."], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3432,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3432,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Naive impl of to-array as a start."], null),cljs.core.cst$sym$cljs$core_SLASH_to_DASH_array,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,3432,3432,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Naive impl of to-array as a start."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5415,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5415,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$__hash], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_build_DASH_subvec,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$__hash], null)),null,cljs.core.list(null,null),1,5415,5415,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$__hash], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Namespace,"cljs/core.cljs",19,true,10,10484,false,10484,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2916,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2916,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x implements IList"], null),cljs.core.cst$sym$cljs$core_SLASH_list_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2916,cljs.core.cst$sym$boolean,2916,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x implements IList"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7885,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7885,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$found], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_remove,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$found], null)),null,cljs.core.list(null,null),1,7885,7885,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$found], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueIter,"cljs/core.cljs",29,true,10,5625,false,5625,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_HashCollisionNode,"cljs/core.cljs",27,true,10,6843,false,6843,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,193,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,193,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript array."], null),cljs.core.cst$sym$cljs$core_SLASH_array_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,193,cljs.core.cst$sym$boolean,193,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a JavaScript array."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9914,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9914,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_prefers_STAR_,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)),null,cljs.core.list(null,null),1,9914,9914,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3168,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3168,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword without a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_simple_DASH_ident_QMARK_,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3168,cljs.core.cst$sym$boolean,3168,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a symbol or keyword without a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1083,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1083,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Clone the supplied value which must implement ICloneable."], null),cljs.core.cst$sym$cljs$core_SLASH_clone,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)),null,cljs.core.list(null,null),1,1083,1083,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),"Clone the supplied value which must implement ICloneable."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5781,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5781,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$incr,cljs.core.cst$sym$k,cljs.core.cst$sym$array], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_scan_DASH_array,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$incr,cljs.core.cst$sym$k,cljs.core.cst$sym$array], null)),null,cljs.core.list(null,null),1,5781,5781,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$incr,cljs.core.cst$sym$k,cljs.core.cst$sym$array], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10468,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10468,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_demunge,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,10468,10468,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2694,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2694,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Bitwise complement"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_not,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2694,2694,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Bitwise complement"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9142,cljs.core.cst$kw$column,17,cljs.core.cst$kw$end_DASH_line,9142,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_quote_DASH_string,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9142,9142,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2508,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2508,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_byte,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2508,cljs.core.cst$sym$number,2508,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2494,15,2494,18,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the greatest of the nums.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_max,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2494,cljs.core.cst$sym$number,2494,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the greatest of the nums."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",712,14,712,25,"Protocol for values that can be compared.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_compare,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IComparable,"cljs/core.cljs",25,1,712,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_compare,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null)], true, false)], null),null,712,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$js_SLASH_Date,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_UUID,null], null), null),"Protocol for values that can be compared.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2731,16,2731,18,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__EQ__EQ_,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2731,cljs.core.cst$sym$boolean,2731,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9829,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9829,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_parents,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),null,cljs.core.list(null,null),1,9829,9829,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),"Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1690,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1690,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps"], null),cljs.core.cst$sym$cljs$core_SLASH_count,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1690,1690,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",709,9,709,18,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,"Returns tcoll without v.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,cljs.core.cst$sym$cljs$core_SLASH__DASH_disjoin_BANG_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,707,cljs.core.cst$sym$clj,709,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null))),"Returns tcoll without v."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$meta],[cljs.core.cst$sym$cljs$core_SLASH__STAR_loaded_DASH_libs_STAR_,"cljs/core.cljs",132,1,135,16,true,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,135,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,135,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7265,10,7265,26,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$edit,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TransientHashMap,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$edit,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7265,7265,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$edit,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5996,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5996,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of_DASH_symbol_QMARK_,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,5996,5996,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3285,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,3285,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IChunk,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayChunk,"cljs/core.cljs",20,true,10,3304,false,true,3304,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8106,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8106,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_map_DASH_by,true,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keyvals)], null),null,cljs.core.list(null),1,8106,8106,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3670,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3670,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Applies fn f to the argument list formed by prepending intervening arguments to args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(5),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_apply,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(5),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null)),null,cljs.core.list(null,null,null,null,null),1,3670,3670,(5),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Applies fn f to the argument list formed by prepending intervening arguments to args."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9801,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9801,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),true,cljs.core.cst$sym$cljs$core_SLASH_get_DASH_global_DASH_hierarchy,false,"cljs/core.cljs",28,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,9801,9801,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,866,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,866,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_add_DASH_to_DASH_string_DASH_hash_DASH_cache,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,866,866,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9678,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9678,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Recursively transforms ClojureScript values to JavaScript.\n  sets/vectors/lists become Arrays, Keywords and Symbol become Strings,\n  Maps become Objects. Arbitrary keys are encoded to by key->js."], null),cljs.core.cst$sym$cljs$core_SLASH_clj_DASH__GT_js,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,9678,9678,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Recursively transforms ClojureScript values to JavaScript.\n  sets/vectors/lists become Arrays, Keywords and Symbol become Strings,\n  Maps become Objects. Arbitrary keys are encoded to by key->js."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6053,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,6053,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,"cljs/core.cljs",27,true,10,6318,false,true,6318,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5492,10,5492,25,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$shift,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TransientVector,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$shift,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5492,5492,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$shift,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",730,14,730,26,"Protocol for accessing the chunks of a collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns a new collection of coll without the first chunk."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,"cljs/core.cljs",26,1,730,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns a new collection of coll without the first chunk."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null),null,730,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null], null), null),"Protocol for accessing the chunks of a collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4618,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4618,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_interpose,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4618,4618,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",7544,10,7544,19,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_BlackNode,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7544,7544,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_deref,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6399,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,6399,cljs.core.cst$kw$end_DASH_column,78,cljs.core.cst$kw$declared,true,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6399,cljs.core.cst$kw$column,73,cljs.core.cst$kw$end_DASH_line,6399,cljs.core.cst$kw$end_DASH_column,78,cljs.core.cst$kw$declared,true], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4865,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4865,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pv_DASH_aget,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null),1,4865,4865,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1847,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1847,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null))),cljs.core.cst$kw$doc,"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_assoc,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,1847,1847,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3599,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3599,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time."], null),cljs.core.cst$sym$cljs$core_SLASH_transient,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3599,3599,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new, transient version of the collection, in constant time."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",549,9,549,17,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ISet,"Returns a new collection of coll that does not contain v.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ISet,cljs.core.cst$sym$cljs$core_SLASH__DASH_disjoin,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,547,cljs.core.cst$sym$clj,549,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null))),"Returns a new collection of coll that does not contain v."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3408,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3408,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$rest], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_cons,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$rest], null)),null,cljs.core.list(null,null),1,3408,3408,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$rest], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayIter,"cljs/core.cljs",19,true,10,3764,false,3764,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10318,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10318,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null))),cljs.core.cst$kw$doc,"Returns an JavaScript compatible comparator based upon pred."], null),cljs.core.cst$sym$cljs$core_SLASH_comparator,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null)),null,cljs.core.list(null,null),1,10318,10318,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null))),"Returns an JavaScript compatible comparator based upon pred."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8097,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8097,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new sorted map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_map,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),null,cljs.core.list(null),1,8097,8097,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new sorted map with supplied mappings."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4546,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4546,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_drop_DASH_while,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4546,4546,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",646,14,646,21,"Protocol for writing. Currently only implemented by StringBufferWriter.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_write,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Writes s with writer and returns the result."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_flush,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Flush writer."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IWriter,"cljs/core.cljs",21,1,646,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_write,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Writes s with writer and returns the result."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_flush,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Flush writer."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)], null)], true, false)], null),null,646,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_StringBufferWriter,null], null), null),"Protocol for writing. Currently only implemented by StringBufferWriter.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_KeySeq,"cljs/core.cljs",16,true,10,8116,false,8116,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9568,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,9568,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if a value has been produced for a delay or lazy sequence."], null),cljs.core.cst$sym$cljs$core_SLASH_realized_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,9568,cljs.core.cst$sym$boolean,9568,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if a value has been produced for a delay or lazy sequence."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,49,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,49,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$doc,"Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.",cljs.core.cst$kw$dynamic,true], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_fn_STAR_,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_], null)),null,cljs.core.List.EMPTY,1,true,45,49,1,true,null,"Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2217,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2217,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object."], null),cljs.core.cst$sym$cljs$core_SLASH_compare,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2217,cljs.core.cst$sym$number,2217,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4029,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4029,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value."], null),cljs.core.cst$sym$cljs$core_SLASH_complement,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,4029,cljs.core.cst$sym$boolean,4029,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_lookup_DASH_sentinel,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2076,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,2076,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$private,true,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2076,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2076,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$private,true], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",691,9,691,16,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,cljs.core.cst$sym$cljs$core_SLASH__DASH_assoc_BANG_,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,689,cljs.core.cst$sym$clj,691,3,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null))),"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$doc,cljs.core.cst$kw$meta],[cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_dup_STAR_,"cljs/core.cljs",99,1,105,14,true,"When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false.",new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,105,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,105,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false."], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3761,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3761,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_string_DASH_iter,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3761,3761,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9663,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,9663,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$kw$doc,"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$sym$cljs$core_SLASH__DASH_key_DASH__GT_js,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,9661,9663,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",567,14,567,20,"Protocol for adding dereference functionality to a reference.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the reference o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IDeref,"cljs/core.cljs",20,1,567,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the reference o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)], true, false)], null),null,567,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_Reduced,null,cljs.core.cst$sym$cljs$core_SLASH_Volatile,null,cljs.core.cst$sym$cljs$core_SLASH_Delay,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$analyzer_SLASH_t_cljs$analyzer13084,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null], null), null),"Protocol for adding dereference functionality to a reference.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3973,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3973,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sequence,true,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null,null),1,3973,3973,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4039,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4039,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a function that takes any number of arguments and returns x."], null),cljs.core.cst$sym$cljs$core_SLASH_constantly,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4039,4039,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns a function that takes any number of arguments and returns x."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",4957,10,4957,24,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),null,cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_RangedIterator,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4957,4957,6,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5293,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5293,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_chunked_DASH_seq,false,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null,null),1,5293,5293,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",629,14,629,21,"Protocol for a collection which can represent their items\n  in a sorted manner. ",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq_DASH_from,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_entry_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key for entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_comparator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the comparator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISorted,"cljs/core.cljs",21,1,629,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.fromArray([cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq_DASH_from,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_entry_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key for entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_comparator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the comparator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)], true, false)], null),null,629,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null], null), null),"Protocol for a collection which can represent their items\n  in a sorted manner. ",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",360,14,360,24,cljs.core.cst$sym$array,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null))),"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_make_DASH_array,true,"cljs/core.cljs",24,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null)),null,cljs.core.list(null,null,null),1,360,cljs.core.cst$sym$array,360,(2),cljs.core.cst$sym$array,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2632,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2632,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_shorts,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2632,2632,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_unchecked_DASH_if_STAR_,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,20,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,20,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,20,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,20,cljs.core.cst$kw$end_DASH_column,20], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1563,10,1563,14,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ci,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_RSeq,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ci,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1563,1563,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ci,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,146,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,146,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Set *print-fn* to console.log"], null),cljs.core.cst$sym$cljs$core_SLASH_enable_DASH_console_DASH_print_BANG_,false,"cljs/core.cljs",28,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,146,146,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),"Set *print-fn* to console.log"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,650,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,650,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$kw$doc,"Flush writer.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$sym$cljs$core_SLASH__DASH_flush,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)),null,cljs.core.list(null,null),1,646,650,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null))),"Flush writer."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1433,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1433,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH__DASH_lastIndexOf,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),null,cljs.core.list(null,null),1,1433,1433,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2382,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2382,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null))),cljs.core.cst$kw$doc,"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_completing,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),null,cljs.core.list(null,null),1,2382,2382,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2582,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2582,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_negate_DASH_int,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2582,2582,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",4979,10,4979,26,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 23, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 21, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 23, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentVector,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4979,4979,6,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 21, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2791,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2791,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false."], null),true,cljs.core.cst$sym$cljs$core_SLASH_equiv_DASH_sequential,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2791,2791,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1230,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,1230,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms."], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_unordered_DASH_coll,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1230,cljs.core.cst$sym$number,1230,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4582,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4582,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a lazy (infinite!, or length n if supplied) sequence of xs.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_repeat,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4582,4582,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),"Returns a lazy (infinite!, or length n if supplied) sequence of xs."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2559,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2559,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_inc,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2559,2559,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2759,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2759,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns the nth next of coll, (seq coll) when n is 0."], null),cljs.core.cst$sym$cljs$core_SLASH_nthnext,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2759,2759,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),"Returns the nth next of coll, (seq coll) when n is 0."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9573,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9573,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_preserving_DASH_reduced,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)),null,cljs.core.list(null,null),1,9573,9573,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4292,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4292,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref], null))),cljs.core.cst$kw$doc,"Gets the validator-fn for a var/ref/agent/atom."], null),cljs.core.cst$sym$cljs$core_SLASH_get_DASH_validator,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref], null)),null,cljs.core.list(null,null),1,4292,4292,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref], null))),"Gets the validator-fn for a var/ref/agent/atom."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_StringIter,"cljs/core.cljs",20,true,10,3752,false,3752,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,200,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,200,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript number."], null),cljs.core.cst$sym$cljs$core_SLASH_number_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,200,cljs.core.cst$sym$boolean,200,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a JavaScript number."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",684,9,684,15,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,"Adds value val to tcoll and returns tcoll.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,cljs.core.cst$sym$cljs$core_SLASH__DASH_conj_BANG_,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,682,cljs.core.cst$sym$clj,684,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null))),"Adds value val to tcoll and returns tcoll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",6055,10,6055,31,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentArrayMapSeq,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6055,6055,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3425,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3425,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_next,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,3425,3425,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayList,"cljs/core.cljs",19,true,10,8676,false,8676,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9308,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9308,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"print to a string, returning it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_print_DASH_str,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,9308,9308,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"print to a string, returning it"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4014,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4014,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns false if (pred x) is logical true for any x in coll,\n  else true."], null),cljs.core.cst$sym$cljs$core_SLASH_not_DASH_any_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4014,cljs.core.cst$sym$boolean,4014,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns false if (pred x) is logical true for any x in coll,\n  else true."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",418,14,418,24,cljs.core.cst$sym$array,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null))),"Returns an array with components set to the values in aseq. Optional type\n  argument accepted for compatibility with Clojure.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_into_DASH_array,false,"cljs/core.cljs",24,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),null,cljs.core.list(null,null),1,418,cljs.core.cst$sym$array,418,2,cljs.core.cst$sym$array,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),"Returns an array with components set to the values in aseq. Optional type\n  argument accepted for compatibility with Clojure."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,607,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,607,cljs.core.cst$kw$end_DASH_column,9,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IHash,cljs.core.cst$kw$doc,"Returns the hash code of o.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IHash,cljs.core.cst$sym$cljs$core_SLASH__DASH_hash,false,"cljs/core.cljs",9,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,605,607,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns the hash code of o."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3180,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3180,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol with a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_qualified_DASH_symbol_QMARK_,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3180,cljs.core.cst$sym$boolean,3180,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a symbol with a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",697,9,697,17,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,"Returns a new transient collection of tcoll without the mapping for key.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,cljs.core.cst$sym$cljs$core_SLASH__DASH_dissoc_BANG_,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,695,cljs.core.cst$sym$clj,697,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null))),"Returns a new transient collection of tcoll without the mapping for key."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",1308,10,1308,17,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Reduced,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1308,1308,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3301,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3301,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$capacity], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_buffer,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$capacity], null)),null,cljs.core.list(null,null),1,3301,3301,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$capacity], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2102,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2102,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return true if s satisfies ISeqable"], null),cljs.core.cst$sym$cljs$core_SLASH_seqable_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,2102,cljs.core.cst$sym$boolean,2102,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Return true if s satisfies ISeqable"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,929,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,929,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Symbol"], null),cljs.core.cst$sym$cljs$core_SLASH_symbol_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,929,cljs.core.cst$sym$boolean,929,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a Symbol"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,832,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,832,cljs.core.cst$kw$end_DASH_column,38,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_hash_DASH_unencoded_DASH_chars,false,"cljs/core.cljs",38,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)),null,cljs.core.list(null,null),1,832,cljs.core.cst$sym$number,832,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2523,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2523,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_char,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2523,cljs.core.cst$sym$number,2523,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,341,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,341,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Returns highest resolution time offered by host in milliseconds."], null),cljs.core.cst$sym$cljs$core_SLASH_system_DASH_time,false,"cljs/core.cljs",18,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,341,341,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),"Returns highest resolution time offered by host in milliseconds."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[0,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_NeverEquiv,"cljs/core.cljs",20,true,10,5758,false,5758,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",441,4,441,11,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null))),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,22,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_IFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_invoke,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,22,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),null,cljs.core.list(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),1,437,441,22,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1985,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1985,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x satisfies ICollection"], null),cljs.core.cst$sym$cljs$core_SLASH_coll_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1985,cljs.core.cst$sym$boolean,1985,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x satisfies ICollection"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$static,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$static,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],["1.2","cljs/core.cljs",13,true,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),7,4785,4785,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null))),"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied."]),"1.2",cljs.core.cst$sym$cljs$core_SLASH_get_DASH_in,false,"cljs/core.cljs",13,true,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,4785,4785,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1641,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1641,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (next x))"], null),cljs.core.cst$sym$cljs$core_SLASH_fnext,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1641,1641,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Same as (first (next x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",618,14,618,19,"Marker interface indicating a persistent list",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IList,"cljs/core.cljs",19,1,618,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,618,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_List,null], null), null),"Marker interface indicating a persistent list",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeIterator,"cljs/core.cljs",27,true,10,6713,false,6713,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1406,cljs.core.cst$kw$column,45,cljs.core.cst$kw$end_DASH_line,1406,cljs.core.cst$kw$end_DASH_column,49,cljs.core.cst$kw$declared,true], null),5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_List,"cljs/core.cljs",14,true,10,2849,false,true,2849,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,544,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,544,cljs.core.cst$kw$end_DASH_column,8,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$kw$doc,"Returns the value of the map entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$sym$cljs$core_SLASH__DASH_val,false,"cljs/core.cljs",8,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,540,544,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the value of the map entry."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2630,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2630,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_bytes,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2630,2630,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocols,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$factory,cljs.core.cst$kw$arglists],["cljs/core.cljs",5827,10,5827,16,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$positional,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)))]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ObjMap,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5827,5827,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,939,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,939,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_compare_DASH_symbols,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,939,939,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",612,16,612,20,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,"Returns a seq of o, or nil if o is empty.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ISeqable,cljs.core.cst$sym$cljs$core_SLASH__DASH_seq,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,610,cljs.core.cst$sym$clj_DASH_or_DASH_nil,612,1,cljs.core.cst$sym$clj_DASH_or_DASH_nil,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns a seq of o, or nil if o is empty."])]),null,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$seen,cljs.core.PersistentHashSet.fromArray([cljs.core.cst$sym$form,cljs.core.cst$sym$tag,cljs.core.cst$sym$_AMPERSAND_,cljs.core.with_meta(cljs.core.cst$sym$stepper,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$uuid,cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$defrecord_STAR_,cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$obj,cljs.core.cst$sym$fqn,cljs.core.cst$sym$first,cljs.core.cst$sym$try,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$rear,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$iter,cljs.core.cst$sym$step,cljs.core.cst$sym$boolean,cljs.core.cst$sym$update_DASH_count,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$chunk,cljs.core.cst$sym$meta7988,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$rest,cljs.core.cst$kw$meta,cljs.core.cst$kw$dup,cljs.core.cst$sym$comp,cljs.core.cst$sym$meta10129,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$kw$else,cljs.core.cst$sym$left,cljs.core.cst$kw$cljs$core_SLASH_none,cljs.core.cst$sym$shift,cljs.core.cst$sym$iters,cljs.core.cst$sym$xform,cljs.core.cst$kw$validator,cljs.core.cst$sym$finally,cljs.core.cst$kw$default,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$loop_STAR_,cljs.core.cst$sym$watches,cljs.core.cst$kw$ns,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$v,cljs.core.cst$sym$riter,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$meta,cljs.core.cst$sym$_meta,cljs.core.cst$sym$afn,cljs.core.cst$sym$tree,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$front,cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$val,cljs.core.cst$sym$key,cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$root_DASH_iter,cljs.core.cst$sym$do,cljs.core.cst$sym$vec,cljs.core.cst$kw$fallback_DASH_impl,cljs.core.cst$kw$flush_DASH_on_DASH_newline,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$kw$no_DASH_test,cljs.core.cst$sym$validator,cljs.core.cst$sym$letfn_STAR_,cljs.core.cst$sym$if,cljs.core.cst$sym$arr,cljs.core.cst$sym$new,cljs.core.cst$kw$descendants,cljs.core.cst$sym$ns,cljs.core.cst$kw$ancestors,cljs.core.cst$sym$value,cljs.core.cst$sym$name,cljs.core.cst$kw$readably,cljs.core.cst$kw$more_DASH_marker,cljs.core.cst$sym$fields,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$nexts,cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$base_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$deftype_STAR_,cljs.core.cst$sym$let_STAR_,cljs.core.cst$sym$start,cljs.core.cst$sym$coll,cljs.core.cst$sym$not_DASH_native,cljs.core.cst$sym$js_STAR_,cljs.core.cst$sym$strobj,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$fn_STAR_,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$recur,cljs.core.cst$sym$ci,cljs.core.cst$kw$print_DASH_length,cljs.core.cst$sym$state,cljs.core.cst$kw$ok,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$parents,cljs.core.cst$sym$cnt,cljs.core.cst$sym$node,cljs.core.cst$sym$sym,cljs.core.cst$sym$sb,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$keys,cljs.core.cst$sym$set_BANG_,cljs.core.cst$kw$tag,cljs.core.cst$sym$tree_DASH_map,cljs.core.cst$sym$_DOT_,cljs.core.cst$sym$var,cljs.core.cst$kw$mutable,cljs.core.cst$sym$quote,cljs.core.cst$sym$root,cljs.core.cst$sym$str,cljs.core.cst$sym$nodes,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$hash_DASH_map,cljs.core.cst$kw$arglists,cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$sym$catch,cljs.core.cst$kw$alt_DASH_impl,cljs.core.cst$sym$ext_DASH_map_DASH_iter,cljs.core.cst$sym$tail,cljs.core.cst$sym$record,cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$count,cljs.core.cst$kw$keywordize_DASH_keys,cljs.core.cst$sym$meta10132,cljs.core.cst$sym$off,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$right,cljs.core.cst$sym$throw,cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$meta7985,cljs.core.cst$kw$cljs$core_SLASH_not_DASH_found,cljs.core.cst$sym$more,cljs.core.cst$sym$def,cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], true),cljs.core.cst$kw$order,cljs.core.PersistentVector.fromArray([cljs.core.cst$kw$flush_DASH_on_DASH_newline,cljs.core.cst$kw$readably,cljs.core.cst$kw$meta,cljs.core.cst$kw$dup,cljs.core.cst$kw$print_DASH_length,cljs.core.cst$kw$else,cljs.core.cst$sym$sb,cljs.core.cst$kw$default,cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$mutable,cljs.core.cst$sym$_meta,cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$meta,cljs.core.cst$sym$ci,cljs.core.cst$sym$afn,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$off,cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.cst$kw$arglists,cljs.core.cst$sym$quote,cljs.core.cst$sym$meta7985,cljs.core.cst$sym$meta7988,cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts,cljs.core.with_meta(cljs.core.cst$sym$stepper,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$state,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches,cljs.core.cst$kw$validator,cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$nodes,cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$key,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$not_DASH_native,cljs.core.cst$kw$cljs$core_SLASH_not_DASH_found,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$tree_DASH_map,cljs.core.cst$sym$step,cljs.core.cst$kw$cljs$core_SLASH_none,cljs.core.cst$kw$more_DASH_marker,cljs.core.cst$kw$alt_DASH_impl,cljs.core.cst$kw$fallback_DASH_impl,cljs.core.cst$kw$val,cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$coll,cljs.core.cst$kw$keywordize_DASH_keys,cljs.core.cst$kw$parents,cljs.core.cst$kw$descendants,cljs.core.cst$kw$ancestors,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$uuid,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$defrecord_STAR_,cljs.core.cst$sym$try,cljs.core.cst$sym$finally,cljs.core.cst$sym$loop_STAR_,cljs.core.cst$sym$do,cljs.core.cst$sym$letfn_STAR_,cljs.core.cst$sym$if,cljs.core.cst$sym$new,cljs.core.cst$sym$deftype_STAR_,cljs.core.cst$sym$let_STAR_,cljs.core.cst$sym$js_STAR_,cljs.core.cst$sym$fn_STAR_,cljs.core.cst$sym$recur,cljs.core.cst$sym$set_BANG_,cljs.core.cst$sym$_DOT_,cljs.core.cst$sym$var,cljs.core.cst$sym$catch,cljs.core.cst$sym$throw,cljs.core.cst$sym$def,cljs.core.cst$kw$ok,cljs.core.cst$kw$no_DASH_test,cljs.core.cst$sym$tag,cljs.core.cst$sym$form,cljs.core.cst$kw$ns,cljs.core.cst$sym$obj,cljs.core.cst$sym$meta10129,cljs.core.cst$sym$meta10132], true)], null),null]));
});})(G__16002))
);

return G__16002;
});

cljs.js.empty_state.cljs$core$IFn$_invoke$arity$1 = (function (init){
var G__16003 = cljs.js.empty_state.cljs$core$IFn$_invoke$arity$0();
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(G__16003,init);

return G__16003;
});

cljs.js.empty_state.cljs$lang$maxFixedArity = 1;

cljs.js.load_analysis_cache_BANG_ = (function cljs$js$load_analysis_cache_BANG_(state,ns,cache){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,ns], null),cache);
});
cljs.js.load_source_map_BANG_ = (function cljs$js$load_source_map_BANG_(state,ns,sm_json){
var sm = cljs.source_map.decode.cljs$core$IFn$_invoke$arity$1(JSON.parse(sm_json));
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$source_DASH_maps,ns], null),sm);
});
cljs.js.sm_data = (function cljs$js$sm_data(){
var G__16009 = new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$source_DASH_map,cljs.core.sorted_map(),cljs.core.cst$kw$gen_DASH_col,(0),cljs.core.cst$kw$gen_DASH_line,(0)], null);
return (cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__16009) : cljs.core.atom.call(null,G__16009));
});
cljs.js.prefix = (function cljs$js$prefix(s,pre){
return [cljs.core.str(pre),cljs.core.str(s)].join('');
});
cljs.js.append_source_map = (function cljs$js$append_source_map(state,name,source,sb,sm_data,p__16010){
var map__16015 = p__16010;
var map__16015__$1 = ((((!((map__16015 == null)))?((((map__16015.cljs$lang$protocol_mask$partition0$ & (64))) || (map__16015.cljs$core$ISeq$))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__16015):map__16015);
var opts = map__16015__$1;
var output_dir = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16015__$1,cljs.core.cst$kw$output_DASH_dir);
var asset_path = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16015__$1,cljs.core.cst$kw$asset_DASH_path);
var t = (new Date()).valueOf();
var smn = (cljs.core.truth_(name)?clojure.string.replace(cljs.core.munge([cljs.core.str(name)].join('')),".","/"):[cljs.core.str("cljs-"),cljs.core.str(t)].join(''));
var ts = (new Date()).valueOf();
var out = (function (){var or__6244__auto__ = output_dir;
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return asset_path;
}
})();
var src = (function (){var G__16017 = [cljs.core.str(smn),cljs.core.str(".cljs?rel="),cljs.core.str(ts)].join('');
if(cljs.core.truth_(out)){
return cljs.js.prefix(G__16017,[cljs.core.str(out),cljs.core.str("/")].join(''));
} else {
return G__16017;
}
})();
var file = (function (){var G__16018 = [cljs.core.str(smn),cljs.core.str(".js?rel="),cljs.core.str(ts)].join('');
if(cljs.core.truth_(out)){
return cljs.js.prefix(G__16018,[cljs.core.str(out),cljs.core.str("/")].join(''));
} else {
return G__16018;
}
})();
var json = cljs.source_map.encode(cljs.core.PersistentArrayMap.fromArray([src,cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(sm_data)], true, false),new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$lines,(cljs.core.cst$kw$gen_DASH_line.cljs$core$IFn$_invoke$arity$1(sm_data) + (3)),cljs.core.cst$kw$file,file,cljs.core.cst$kw$sources_DASH_content,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [source], null)], null));
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([json], 0));
} else {
}

cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$source_DASH_maps,name], null),cljs.source_map.invert_reverse_map(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(sm_data)));

return sb.append([cljs.core.str("\n//# sourceURL="),cljs.core.str(file),cljs.core.str("\n//# sourceMappingURL=data:application/json;base64,"),cljs.core.str(goog.crypt.base64.encodeString(json))].join(''));
});
cljs.js.current_alias_map = (function cljs$js$current_alias_map(){
return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.env._STAR_compiler_STAR_) : cljs.core.deref.call(null,cljs.env._STAR_compiler_STAR_)),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,cljs.analyzer._STAR_cljs_ns_STAR_,cljs.core.cst$kw$requires], null));
});
cljs.js._STAR_loaded_STAR_ = (function (){var G__16019 = cljs.core.PersistentHashSet.EMPTY;
return (cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__16019) : cljs.core.atom.call(null,G__16019));
})();
/**
 * Like cljs.core/run!, but for an async procedure, and with the
 *   ability to break prior to processing the entire collection.
 * 
 *   Chains successive calls to the supplied procedure for items in
 *   the collection. The procedure should accept an item from the
 *   collection and a callback of one argument. If the break? predicate,
 *   when applied to the procedure callback value, yields a truthy
 *   result, terminates early calling the supplied cb with the callback
 *   value. Otherwise, when complete, calls cb with nil.
 */
cljs.js.run_async_BANG_ = (function cljs$js$run_async_BANG_(proc,coll,break_QMARK_,cb){
if(cljs.core.seq(coll)){
var G__16026 = cljs.core.first(coll);
var G__16027 = ((function (G__16026){
return (function (res){
if(cljs.core.truth_((break_QMARK_.cljs$core$IFn$_invoke$arity$1 ? break_QMARK_.cljs$core$IFn$_invoke$arity$1(res) : break_QMARK_.call(null,res)))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
return cljs$js$run_async_BANG_(proc,cljs.core.rest(coll),break_QMARK_,cb);
}
});})(G__16026))
;
return (proc.cljs$core$IFn$_invoke$arity$2 ? proc.cljs$core$IFn$_invoke$arity$2(G__16026,G__16027) : proc.call(null,G__16026,G__16027));
} else {
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(null) : cb.call(null,null));
}
});
cljs.js.process_deps = (function cljs$js$process_deps(bound_vars,names,opts,cb){
return cljs.js.run_async_BANG_((function (name,cb__$1){
return (cljs.js.require.cljs$core$IFn$_invoke$arity$5 ? cljs.js.require.cljs$core$IFn$_invoke$arity$5(bound_vars,name,null,opts,cb__$1) : cljs.js.require.call(null,bound_vars,name,null,opts,cb__$1));
}),names,cljs.core.cst$kw$error,cb);
});
cljs.js.process_macros_deps = (function cljs$js$process_macros_deps(bound_vars,cache,opts,cb){
return cljs.js.process_deps(bound_vars,cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.vals(cljs.core.cst$kw$require_DASH_macros.cljs$core$IFn$_invoke$arity$1(cache))),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,cljs.core.cst$kw$macros_DASH_ns,true),cb);
});
cljs.js.process_libs_deps = (function cljs$js$process_libs_deps(bound_vars,cache,opts,cb){
return cljs.js.process_deps(bound_vars,cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.vals(cljs.core.cst$kw$requires.cljs$core$IFn$_invoke$arity$1(cache)),cljs.core.vals(cljs.core.cst$kw$imports.cljs$core$IFn$_invoke$arity$1(cache)))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(opts,cljs.core.cst$kw$macros_DASH_ns),cb);
});
cljs.js.require = (function cljs$js$require(var_args){
var args16028 = [];
var len__7319__auto___16057 = arguments.length;
var i__7320__auto___16058 = (0);
while(true){
if((i__7320__auto___16058 < len__7319__auto___16057)){
args16028.push((arguments[i__7320__auto___16058]));

var G__16059 = (i__7320__auto___16058 + (1));
i__7320__auto___16058 = G__16059;
continue;
} else {
}
break;
}

var G__16030 = args16028.length;
switch (G__16030) {
case 2:
return cljs.js.require.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.js.require.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.js.require.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.js.require.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args16028.length)].join('')));

}
});

cljs.js.require.cljs$core$IFn$_invoke$arity$2 = (function (name,cb){
return cljs.js.require.cljs$core$IFn$_invoke$arity$3(name,null,cb);
});

cljs.js.require.cljs$core$IFn$_invoke$arity$3 = (function (name,opts,cb){
return cljs.js.require.cljs$core$IFn$_invoke$arity$4(null,name,opts,cb);
});

cljs.js.require.cljs$core$IFn$_invoke$arity$4 = (function (bound_vars,name,opts,cb){
return cljs.js.require.cljs$core$IFn$_invoke$arity$5(bound_vars,name,null,opts,cb);
});

cljs.js.require.cljs$core$IFn$_invoke$arity$5 = (function (bound_vars,name,reload,opts,cb){
var bound_vars__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$_STAR_compiler_STAR_,cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$0(),cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_,cljs.tagged_literals._STAR_cljs_data_readers_STAR_,cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_,cljs.core.cst$kw$load_DASH_macros.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_,cljs.core.cst$kw$analyze_DASH_deps.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_,(function (){var or__6244__auto__ = cljs.core.cst$kw$load.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return cljs.js._STAR_load_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_,(function (){var or__6244__auto__ = cljs.core.cst$kw$eval.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return cljs.js._STAR_eval_fn_STAR_;
}
})()], null),bound_vars], 0));
var aname = (function (){var G__16031 = name;
if(cljs.core.truth_(cljs.core.cst$kw$macros_DASH_ns.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.analyzer.macro_ns_name(G__16031);
} else {
return G__16031;
}
})();
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$reload,reload)){
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.js._STAR_loaded_STAR_,cljs.core.disj,aname);
} else {
}

if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$reload_DASH_all,reload)){
var G__16032_16061 = cljs.js._STAR_loaded_STAR_;
var G__16033_16062 = cljs.core.PersistentHashSet.EMPTY;
(cljs.core.reset_BANG_.cljs$core$IFn$_invoke$arity$2 ? cljs.core.reset_BANG_.cljs$core$IFn$_invoke$arity$2(G__16032_16061,G__16033_16062) : cljs.core.reset_BANG_.call(null,G__16032_16061,G__16033_16062));
} else {
}

if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([[cljs.core.str("Loading "),cljs.core.str(name),cljs.core.str((cljs.core.truth_(cljs.core.cst$kw$macros_DASH_ns.cljs$core$IFn$_invoke$arity$1(opts))?" macros":null)),cljs.core.str(" namespace")].join('')], 0));
} else {
}

if(!(cljs.core.contains_QMARK_((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.js._STAR_loaded_STAR_) : cljs.core.deref.call(null,cljs.js._STAR_loaded_STAR_)),aname))){
var env = cljs.core.cst$kw$_STAR_env_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
try{return cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1).call(null,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$name,name,cljs.core.cst$kw$macros,cljs.core.cst$kw$macros_DASH_ns.cljs$core$IFn$_invoke$arity$1(opts),cljs.core.cst$kw$path,cljs.js.ns__GT_relpath(name)], null),((function (env,bound_vars__$1,aname){
return (function (resource){
if((cljs.core.map_QMARK_(resource)) || ((resource == null))){
} else {
throw (new Error([cljs.core.str("Assert failed: "),cljs.core.str("*load-fn* may only return a map or nil"),cljs.core.str("\n"),cljs.core.str("(or (map? resource) (nil? resource))")].join('')));
}

if(cljs.core.truth_(resource)){
var map__16036 = resource;
var map__16036__$1 = ((((!((map__16036 == null)))?((((map__16036.cljs$lang$protocol_mask$partition0$ & (64))) || (map__16036.cljs$core$ISeq$))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__16036):map__16036);
var lang = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16036__$1,cljs.core.cst$kw$lang);
var source = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16036__$1,cljs.core.cst$kw$source);
var cache = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16036__$1,cljs.core.cst$kw$cache);
var source_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16036__$1,cljs.core.cst$kw$source_DASH_map);
var pred__16038 = cljs.core._EQ_;
var expr__16039 = lang;
if(cljs.core.truth_((pred__16038.cljs$core$IFn$_invoke$arity$2 ? pred__16038.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$clj,expr__16039) : pred__16038.call(null,cljs.core.cst$kw$clj,expr__16039)))){
var G__16042 = bound_vars__$1;
var G__16043 = source;
var G__16044 = name;
var G__16045 = opts;
var G__16046 = ((function (G__16042,G__16043,G__16044,G__16045,pred__16038,expr__16039,map__16036,map__16036__$1,lang,source,cache,source_map,env,bound_vars__$1,aname){
return (function (res){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.js._STAR_loaded_STAR_,cljs.core.conj,aname);

var G__16047 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,true], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16047) : cb.call(null,G__16047));
}
});})(G__16042,G__16043,G__16044,G__16045,pred__16038,expr__16039,map__16036,map__16036__$1,lang,source,cache,source_map,env,bound_vars__$1,aname))
;
return (cljs.js.eval_str_STAR_.cljs$core$IFn$_invoke$arity$5 ? cljs.js.eval_str_STAR_.cljs$core$IFn$_invoke$arity$5(G__16042,G__16043,G__16044,G__16045,G__16046) : cljs.js.eval_str_STAR_.call(null,G__16042,G__16043,G__16044,G__16045,G__16046));
} else {
if(cljs.core.truth_((pred__16038.cljs$core$IFn$_invoke$arity$2 ? pred__16038.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$js,expr__16039) : pred__16038.call(null,cljs.core.cst$kw$js,expr__16039)))){
return cljs.js.process_macros_deps(bound_vars__$1,cache,opts,((function (pred__16038,expr__16039,map__16036,map__16036__$1,lang,source,cache,source_map,env,bound_vars__$1,aname){
return (function (res){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
return cljs.js.process_libs_deps(bound_vars__$1,cache,opts,((function (pred__16038,expr__16039,map__16036,map__16036__$1,lang,source,cache,source_map,env,bound_vars__$1,aname){
return (function (res__$1){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
var res__$2 = (function (){try{cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1).call(null,resource);

if(cljs.core.truth_(cache)){
cljs.js.load_analysis_cache_BANG_(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1),aname,cache);
} else {
}

if(cljs.core.truth_(source_map)){
return cljs.js.load_source_map_BANG_(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1),aname,source_map);
} else {
return null;
}
}catch (e16048){var cause = e16048;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(env,[cljs.core.str("Could not require "),cljs.core.str(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
} else {
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.js._STAR_loaded_STAR_,cljs.core.conj,aname);

var G__16049 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,true], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16049) : cb.call(null,G__16049));
}
}
});})(pred__16038,expr__16039,map__16036,map__16036__$1,lang,source,cache,source_map,env,bound_vars__$1,aname))
);
}
});})(pred__16038,expr__16039,map__16036,map__16036__$1,lang,source,cache,source_map,env,bound_vars__$1,aname))
);
} else {
var G__16050 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(env,[cljs.core.str("Invalid :lang specified "),cljs.core.str(lang),cljs.core.str(", only :clj or :js allowed")].join('')));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16050) : cb.call(null,G__16050));
}
}
} else {
var G__16053 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(env,(function (){var G__16054 = (cljs.core.truth_(cljs.core.cst$kw$macros_DASH_ns.cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.cst$kw$undeclared_DASH_macros_DASH_ns:cljs.core.cst$kw$undeclared_DASH_ns);
var G__16055 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_DASH_sym,name,cljs.core.cst$kw$js_DASH_provide,cljs.core.name(name)], null);
return (cljs.analyzer.error_message.cljs$core$IFn$_invoke$arity$2 ? cljs.analyzer.error_message.cljs$core$IFn$_invoke$arity$2(G__16054,G__16055) : cljs.analyzer.error_message.call(null,G__16054,G__16055));
})()));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16053) : cb.call(null,G__16053));
}
});})(env,bound_vars__$1,aname))
);
}catch (e16034){var cause = e16034;
var G__16035 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(env,[cljs.core.str("Could not require "),cljs.core.str(name)].join(''),cause));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16035) : cb.call(null,G__16035));
}} else {
var G__16056 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,true], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16056) : cb.call(null,G__16056));
}
});

cljs.js.require.cljs$lang$maxFixedArity = 5;


cljs.js.load_deps = (function cljs$js$load_deps(var_args){
var args16064 = [];
var len__7319__auto___16069 = arguments.length;
var i__7320__auto___16070 = (0);
while(true){
if((i__7320__auto___16070 < len__7319__auto___16069)){
args16064.push((arguments[i__7320__auto___16070]));

var G__16071 = (i__7320__auto___16070 + (1));
i__7320__auto___16070 = G__16071;
continue;
} else {
}
break;
}

var G__16066 = args16064.length;
switch (G__16066) {
case 5:
return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
case 6:
return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args16064.length)].join('')));

}
});

cljs.js.load_deps.cljs$core$IFn$_invoke$arity$5 = (function (bound_vars,ana_env,lib,deps,cb){
return (cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6 ? cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(bound_vars,ana_env,lib,deps,null,cb) : cljs.js.analyze_deps.call(null,bound_vars,ana_env,lib,deps,null,cb));
});

cljs.js.load_deps.cljs$core$IFn$_invoke$arity$6 = (function (bound_vars,ana_env,lib,deps,opts,cb){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Loading dependencies for",lib], 0));
} else {
}

var _STAR_cljs_dep_set_STAR_16067 = cljs.analyzer._STAR_cljs_dep_set_STAR_;
cljs.analyzer._STAR_cljs_dep_set_STAR_ = cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars),lib),cljs.core.update_in,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$dep_DASH_path], null),cljs.core.conj,lib);

try{if(cljs.core.every_QMARK_(((function (_STAR_cljs_dep_set_STAR_16067){
return (function (p1__16063_SHARP_){
return !(cljs.core.contains_QMARK_(cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars),p1__16063_SHARP_));
});})(_STAR_cljs_dep_set_STAR_16067))
,deps)){
} else {
throw (new Error([cljs.core.str("Assert failed: "),cljs.core.str([cljs.core.str("Circular dependency detected "),cljs.core.str(cljs.core.cst$kw$dep_DASH_path.cljs$core$IFn$_invoke$arity$1(cljs.core.meta(cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars))))].join('')),cljs.core.str("\n"),cljs.core.str("(every? (fn* [p1__16063#] (not (contains? (:*cljs-dep-set* bound-vars) p1__16063#))) deps)")].join('')));
}

if(cljs.core.seq(deps)){
var dep = cljs.core.first(deps);
return cljs.js.require.cljs$core$IFn$_invoke$arity$4(bound_vars,dep,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(opts,cljs.core.cst$kw$context),cljs.core.cst$kw$ns),((function (dep,_STAR_cljs_dep_set_STAR_16067){
return (function (res){
if(cljs.core.not(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$6(bound_vars,ana_env,lib,cljs.core.next(deps),opts,cb);
} else {
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
}
});})(dep,_STAR_cljs_dep_set_STAR_16067))
);
} else {
var G__16068 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16068) : cb.call(null,G__16068));
}
}finally {cljs.analyzer._STAR_cljs_dep_set_STAR_ = _STAR_cljs_dep_set_STAR_16067;
}});

cljs.js.load_deps.cljs$lang$maxFixedArity = 6;

cljs.js.analyze_deps = (function cljs$js$analyze_deps(var_args){
var args16074 = [];
var len__7319__auto___16097 = arguments.length;
var i__7320__auto___16098 = (0);
while(true){
if((i__7320__auto___16098 < len__7319__auto___16097)){
args16074.push((arguments[i__7320__auto___16098]));

var G__16099 = (i__7320__auto___16098 + (1));
i__7320__auto___16098 = G__16099;
continue;
} else {
}
break;
}

var G__16076 = args16074.length;
switch (G__16076) {
case 5:
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
case 6:
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args16074.length)].join('')));

}
});

cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$5 = (function (bound_vars,ana_env,lib,deps,cb){
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(bound_vars,ana_env,lib,deps,null,cb);
});

cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6 = (function (bound_vars,ana_env,lib,deps,opts,cb){
var compiler = (function (){var G__16077 = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);
return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16077) : cljs.core.deref.call(null,G__16077));
})();
var _STAR_cljs_dep_set_STAR_16078 = cljs.analyzer._STAR_cljs_dep_set_STAR_;
cljs.analyzer._STAR_cljs_dep_set_STAR_ = cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars),lib),cljs.core.update_in,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$dep_DASH_path], null),cljs.core.conj,lib);

try{if(cljs.core.every_QMARK_(((function (_STAR_cljs_dep_set_STAR_16078,compiler){
return (function (p1__16073_SHARP_){
return !(cljs.core.contains_QMARK_(cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars),p1__16073_SHARP_));
});})(_STAR_cljs_dep_set_STAR_16078,compiler))
,deps)){
} else {
throw (new Error([cljs.core.str("Assert failed: "),cljs.core.str([cljs.core.str("Circular dependency detected "),cljs.core.str(cljs.core.cst$kw$dep_DASH_path.cljs$core$IFn$_invoke$arity$1(cljs.core.meta(cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars))))].join('')),cljs.core.str("\n"),cljs.core.str("(every? (fn* [p1__16073#] (not (contains? (:*cljs-dep-set* bound-vars) p1__16073#))) deps)")].join('')));
}

if(cljs.core.seq(deps)){
var dep = cljs.core.first(deps);
try{return cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars).call(null,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$name,dep,cljs.core.cst$kw$path,cljs.js.ns__GT_relpath(dep)], null),((function (dep,_STAR_cljs_dep_set_STAR_16078,compiler){
return (function (resource){
if((cljs.core.map_QMARK_(resource)) || ((resource == null))){
} else {
throw (new Error([cljs.core.str("Assert failed: "),cljs.core.str("*load-fn* may only return a map or nil"),cljs.core.str("\n"),cljs.core.str("(or (map? resource) (nil? resource))")].join('')));
}

if(cljs.core.truth_(resource)){
var map__16081 = resource;
var map__16081__$1 = ((((!((map__16081 == null)))?((((map__16081.cljs$lang$protocol_mask$partition0$ & (64))) || (map__16081.cljs$core$ISeq$))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__16081):map__16081);
var name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16081__$1,cljs.core.cst$kw$name);
var lang = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16081__$1,cljs.core.cst$kw$lang);
var source = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16081__$1,cljs.core.cst$kw$source);
var pred__16083 = cljs.core._EQ_;
var expr__16084 = lang;
if(cljs.core.truth_((pred__16083.cljs$core$IFn$_invoke$arity$2 ? pred__16083.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$clj,expr__16084) : pred__16083.call(null,cljs.core.cst$kw$clj,expr__16084)))){
var G__16086 = bound_vars;
var G__16087 = source;
var G__16088 = name;
var G__16089 = opts;
var G__16090 = ((function (G__16086,G__16087,G__16088,G__16089,pred__16083,expr__16084,map__16081,map__16081__$1,name,lang,source,dep,_STAR_cljs_dep_set_STAR_16078,compiler){
return (function (res){
if(cljs.core.not(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(bound_vars,ana_env,lib,cljs.core.next(deps),opts,cb);
} else {
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
}
});})(G__16086,G__16087,G__16088,G__16089,pred__16083,expr__16084,map__16081,map__16081__$1,name,lang,source,dep,_STAR_cljs_dep_set_STAR_16078,compiler))
;
return (cljs.js.analyze_str_STAR_.cljs$core$IFn$_invoke$arity$5 ? cljs.js.analyze_str_STAR_.cljs$core$IFn$_invoke$arity$5(G__16086,G__16087,G__16088,G__16089,G__16090) : cljs.js.analyze_str_STAR_.call(null,G__16086,G__16087,G__16088,G__16089,G__16090));
} else {
if(cljs.core.truth_((pred__16083.cljs$core$IFn$_invoke$arity$2 ? pred__16083.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$js,expr__16084) : pred__16083.call(null,cljs.core.cst$kw$js,expr__16084)))){
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(bound_vars,ana_env,lib,cljs.core.next(deps),opts,cb);
} else {
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(ana_env,[cljs.core.str("Invalid :lang specified "),cljs.core.str(lang),cljs.core.str(", only :clj or :js allowed")].join('')));
}
}
} else {
var G__16093 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(ana_env,(function (){var G__16094 = cljs.core.cst$kw$undeclared_DASH_ns;
var G__16095 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_DASH_sym,dep,cljs.core.cst$kw$js_DASH_provide,cljs.core.name(dep)], null);
return (cljs.analyzer.error_message.cljs$core$IFn$_invoke$arity$2 ? cljs.analyzer.error_message.cljs$core$IFn$_invoke$arity$2(G__16094,G__16095) : cljs.analyzer.error_message.call(null,G__16094,G__16095));
})()));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16093) : cb.call(null,G__16093));
}
});})(dep,_STAR_cljs_dep_set_STAR_16078,compiler))
);
}catch (e16079){var cause = e16079;
var G__16080 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(ana_env,[cljs.core.str("Could not analyze dep "),cljs.core.str(dep)].join(''),cause));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16080) : cb.call(null,G__16080));
}} else {
var G__16096 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16096) : cb.call(null,G__16096));
}
}finally {cljs.analyzer._STAR_cljs_dep_set_STAR_ = _STAR_cljs_dep_set_STAR_16078;
}});

cljs.js.analyze_deps.cljs$lang$maxFixedArity = 6;

cljs.js.load_macros = (function cljs$js$load_macros(bound_vars,k,macros,reload,reloads,opts,cb){
if(cljs.core.seq(macros)){
var nsym = cljs.core.first(cljs.core.vals(macros));
var k__$1 = (function (){var or__6244__auto__ = (reload.cljs$core$IFn$_invoke$arity$1 ? reload.cljs$core$IFn$_invoke$arity$1(k) : reload.call(null,k));
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
var or__6244__auto____$1 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(reloads,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,nsym], null));
if(cljs.core.truth_(or__6244__auto____$1)){
return or__6244__auto____$1;
} else {
var or__6244__auto____$2 = (function (){var and__6232__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(nsym,cljs.core.name);
if(and__6232__auto__){
var and__6232__auto____$1 = cljs.core.cst$kw$_STAR_reload_DASH_macros_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);
if(cljs.core.truth_(and__6232__auto____$1)){
return cljs.core.cst$kw$reload;
} else {
return and__6232__auto____$1;
}
} else {
return and__6232__auto__;
}
})();
if(cljs.core.truth_(or__6244__auto____$2)){
return or__6244__auto____$2;
} else {
return null;
}
}
}
})();
return cljs.js.require.cljs$core$IFn$_invoke$arity$5(bound_vars,nsym,k__$1,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,cljs.core.cst$kw$macros_DASH_ns,true),cljs.core.cst$kw$context),cljs.core.cst$kw$ns),((function (nsym,k__$1){
return (function (res){
if(cljs.core.not(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return cljs$js$load_macros(bound_vars,k__$1,cljs.core.next(macros),reload,reloads,opts,cb);
} else {
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
}
});})(nsym,k__$1))
);
} else {
var G__16109 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16109) : cb.call(null,G__16109));
}
});
cljs.js.ns_side_effects = (function cljs$js$ns_side_effects(var_args){
var args16110 = [];
var len__7319__auto___16135 = arguments.length;
var i__7320__auto___16136 = (0);
while(true){
if((i__7320__auto___16136 < len__7319__auto___16135)){
args16110.push((arguments[i__7320__auto___16136]));

var G__16137 = (i__7320__auto___16136 + (1));
i__7320__auto___16136 = G__16137;
continue;
} else {
}
break;
}

var G__16112 = args16110.length;
switch (G__16112) {
case 5:
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
case 6:
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args16110.length)].join('')));

}
});

cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$5 = (function (bound_vars,ana_env,ast,opts,cb){
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6(false,bound_vars,ana_env,ast,opts,cb);
});

cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6 = (function (load,bound_vars,ana_env,p__16113,opts,cb){
var map__16114 = p__16113;
var map__16114__$1 = ((((!((map__16114 == null)))?((((map__16114.cljs$lang$protocol_mask$partition0$ & (64))) || (map__16114.cljs$core$ISeq$))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__16114):map__16114);
var ast = map__16114__$1;
var op = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16114__$1,cljs.core.cst$kw$op);
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Namespace side effects for",cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast)], 0));
} else {
}

if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$ns,op)){
var map__16116 = ast;
var map__16116__$1 = ((((!((map__16116 == null)))?((((map__16116.cljs$lang$protocol_mask$partition0$ & (64))) || (map__16116.cljs$core$ISeq$))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__16116):map__16116);
var deps = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16116__$1,cljs.core.cst$kw$deps);
var uses = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16116__$1,cljs.core.cst$kw$uses);
var requires = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16116__$1,cljs.core.cst$kw$requires);
var require_macros = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16116__$1,cljs.core.cst$kw$require_DASH_macros);
var use_macros = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16116__$1,cljs.core.cst$kw$use_DASH_macros);
var reload = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16116__$1,cljs.core.cst$kw$reload);
var reloads = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16116__$1,cljs.core.cst$kw$reloads);
var env = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);
var check_uses_and_load_macros = ((function (map__16116,map__16116__$1,deps,uses,requires,require_macros,use_macros,reload,reloads,env,map__16114,map__16114__$1,ast,op){
return (function cljs$js$check_uses_and_load_macros(res){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
var res__$1 = (function (){try{if(cljs.core.truth_((function (){var and__6232__auto__ = cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);
if(cljs.core.truth_(and__6232__auto__)){
return cljs.core.seq(uses);
} else {
return and__6232__auto__;
}
})())){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Checking uses"], 0));
} else {
}

cljs.analyzer.check_uses(uses,env);

return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null);
} else {
return null;
}
}catch (e16130){var cause = e16130;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(ana_env,[cljs.core.str("Could not parse ns form "),cljs.core.str(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast))].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
if(cljs.core.truth_(cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars))){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Processing :use-macros for",cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast)], 0));
} else {
}

return cljs.js.load_macros(bound_vars,cljs.core.cst$kw$use_DASH_macros,use_macros,reload,reloads,opts,((function (res__$1,map__16116,map__16116__$1,deps,uses,requires,require_macros,use_macros,reload,reloads,env,map__16114,map__16114__$1,ast,op){
return (function (res__$2){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
} else {
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Processing :require-macros for",cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast)], 0));
} else {
}

return cljs.js.load_macros(bound_vars,cljs.core.cst$kw$require_DASH_macros,require_macros,reloads,reloads,opts,((function (res__$1,map__16116,map__16116__$1,deps,uses,requires,require_macros,use_macros,reload,reloads,env,map__16114,map__16114__$1,ast,op){
return (function (res__$3){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$3))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$3) : cb.call(null,res__$3));
} else {
var res__$4 = (function (){try{if(cljs.core.seq(use_macros)){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Checking :use-macros for",cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast)], 0));
} else {
}

cljs.analyzer.check_use_macros(use_macros,env);
} else {
}

return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null);
}catch (e16131){var cause = e16131;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(ana_env,[cljs.core.str("Could not parse ns form "),cljs.core.str(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast))].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$4))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$4) : cb.call(null,res__$4));
} else {
var G__16132 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,ast], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16132) : cb.call(null,G__16132));
}
}
});})(res__$1,map__16116,map__16116__$1,deps,uses,requires,require_macros,use_macros,reload,reloads,env,map__16114,map__16114__$1,ast,op))
);
}
});})(res__$1,map__16116,map__16116__$1,deps,uses,requires,require_macros,use_macros,reload,reloads,env,map__16114,map__16114__$1,ast,op))
);
} else {
var G__16133 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,ast], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16133) : cb.call(null,G__16133));
}
}
}
});})(map__16116,map__16116__$1,deps,uses,requires,require_macros,use_macros,reload,reloads,env,map__16114,map__16114__$1,ast,op))
;
if(cljs.core.truth_((function (){var and__6232__auto__ = load;
if(cljs.core.truth_(and__6232__auto__)){
return cljs.core.seq(deps);
} else {
return and__6232__auto__;
}
})())){
return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$6(bound_vars,ana_env,cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast),deps,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(opts,cljs.core.cst$kw$macros_DASH_ns),check_uses_and_load_macros);
} else {
if(cljs.core.truth_((function (){var and__6232__auto__ = cljs.core.not(load);
if(and__6232__auto__){
var and__6232__auto____$1 = cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);
if(cljs.core.truth_(and__6232__auto____$1)){
return cljs.core.seq(deps);
} else {
return and__6232__auto____$1;
}
} else {
return and__6232__auto__;
}
})())){
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(bound_vars,ana_env,cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast),deps,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(opts,cljs.core.cst$kw$macros_DASH_ns),check_uses_and_load_macros);
} else {
return check_uses_and_load_macros(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null));

}
}
} else {
var G__16134 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,ast], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16134) : cb.call(null,G__16134));
}
});

cljs.js.ns_side_effects.cljs$lang$maxFixedArity = 6;

cljs.js.analyze_str_STAR_ = (function cljs$js$analyze_str_STAR_(bound_vars,source,name,opts,cb){
var rdr = cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3(source,(1),name);
var eof = {};
var aenv = cljs.analyzer.empty_env();
var the_ns = (function (){var or__6244__auto__ = cljs.core.cst$kw$ns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return cljs.core.cst$sym$cljs$user;
}
})();
var bound_vars__$1 = (function (){var G__16172 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([bound_vars,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_,the_ns], null)], 0));
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__16172,cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_,cljs.js.sm_data());
} else {
return G__16172;
}
})();
return ((function (rdr,eof,aenv,the_ns,bound_vars__$1){
return (function cljs$js$analyze_str_STAR__$_analyze_loop(last_ast,ns){
while(true){
var _STAR_compiler_STAR_16188 = cljs.env._STAR_compiler_STAR_;
var _STAR_cljs_ns_STAR_16189 = cljs.analyzer._STAR_cljs_ns_STAR_;
var _STAR_cljs_static_fns_STAR_16190 = cljs.analyzer._STAR_cljs_static_fns_STAR_;
var _STAR_ns_STAR_16191 = cljs.core._STAR_ns_STAR_;
var _STAR_passes_STAR_16192 = cljs.analyzer._STAR_passes_STAR_;
var _STAR_alias_map_STAR_16193 = cljs.tools.reader._STAR_alias_map_STAR_;
var _STAR_data_readers_STAR_16194 = cljs.tools.reader._STAR_data_readers_STAR_;
var resolve_symbol16195 = cljs.tools.reader.resolve_symbol;
var _STAR_source_map_data_STAR_16196 = cljs.compiler._STAR_source_map_data_STAR_;
cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_ns_STAR_ = ns;

cljs.analyzer._STAR_cljs_static_fns_STAR_ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);

cljs.core._STAR_ns_STAR_ = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(ns);

cljs.analyzer._STAR_passes_STAR_ = cljs.core.cst$kw$_STAR_passes_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.tools.reader._STAR_alias_map_STAR_ = cljs.js.current_alias_map();

cljs.tools.reader._STAR_data_readers_STAR_ = cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.tools.reader.resolve_symbol = cljs.js.resolve_symbol;

cljs.compiler._STAR_source_map_data_STAR_ = cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

try{var res = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$eof,eof,cljs.core.cst$kw$read_DASH_cond,cljs.core.cst$kw$allow,cljs.core.cst$kw$features,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$cljs,null], null), null)], null),rdr)], null);
}catch (e16197){var cause = e16197;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv,[cljs.core.str("Could not analyze "),cljs.core.str(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
var form = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res);
if(!((eof === form))){
var aenv__$1 = (function (){var G__16198 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(aenv,cljs.core.cst$kw$ns,cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1(cljs.analyzer._STAR_cljs_ns_STAR_));
var G__16198__$1 = (cljs.core.truth_(cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__16198,cljs.core.cst$kw$context,cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts)):G__16198);
if(cljs.core.truth_(cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__16198__$1,cljs.core.cst$kw$def_DASH_emits_DASH_var,true);
} else {
return G__16198__$1;
}
})();
var res__$1 = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4(aenv__$1,form,null,opts)], null);
}catch (e16199){var cause = e16199;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv__$1,[cljs.core.str("Could not analyze "),cljs.core.str(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
var ast = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res__$1);
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$ns,cljs.core.cst$kw$op.cljs$core$IFn$_invoke$arity$1(ast))){
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$5(bound_vars__$1,aenv__$1,ast,opts,((function (last_ast,ns,ast,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_16188,_STAR_cljs_ns_STAR_16189,_STAR_cljs_static_fns_STAR_16190,_STAR_ns_STAR_16191,_STAR_passes_STAR_16192,_STAR_alias_map_STAR_16193,_STAR_data_readers_STAR_16194,resolve_symbol16195,_STAR_source_map_data_STAR_16196,rdr,eof,aenv,the_ns,bound_vars__$1){
return (function (res__$2){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
} else {
return cljs$js$analyze_str_STAR__$_analyze_loop(ast,cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast));
}
});})(last_ast,ns,ast,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_16188,_STAR_cljs_ns_STAR_16189,_STAR_cljs_static_fns_STAR_16190,_STAR_ns_STAR_16191,_STAR_passes_STAR_16192,_STAR_alias_map_STAR_16193,_STAR_data_readers_STAR_16194,resolve_symbol16195,_STAR_source_map_data_STAR_16196,rdr,eof,aenv,the_ns,bound_vars__$1))
);
} else {
var G__16201 = ast;
var G__16202 = ns;
last_ast = G__16201;
ns = G__16202;
continue;
}
}
} else {
var G__16200 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,last_ast], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16200) : cb.call(null,G__16200));
}
}
}finally {cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_16196;

cljs.tools.reader.resolve_symbol = resolve_symbol16195;

cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_16194;

cljs.tools.reader._STAR_alias_map_STAR_ = _STAR_alias_map_STAR_16193;

cljs.analyzer._STAR_passes_STAR_ = _STAR_passes_STAR_16192;

cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_16191;

cljs.analyzer._STAR_cljs_static_fns_STAR_ = _STAR_cljs_static_fns_STAR_16190;

cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_16189;

cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_16188;
}break;
}
});})(rdr,eof,aenv,the_ns,bound_vars__$1))
.call(null,null,the_ns);
});
/**
 * Analyze ClojureScript source. The compiler state will be populated with
 * the results of analyzes. The parameters:
 * 
 * state (atom)
 *   the compiler state
 * 
 * source (string)
 *   the ClojureScript source
 * 
 * name (symbol)
 *   optional, the name of the source
 * 
 * opts (map)
 *   compilation options.
 * 
 * :eval - the eval function to invoke, see *eval-fn*
 * :load - library resolution function, see *load-fn*
 * 
 * cb (function)
 *   callback, will be invoked with a map. If successful the map will contain
 *   a key :value, the actual value is not meaningful. If unsuccessful the
 *   map will contain a key :error with an ex-info instance describing the cause
 *   of failure.
 */
cljs.js.analyze_str = (function cljs$js$analyze_str(var_args){
var args16203 = [];
var len__7319__auto___16206 = arguments.length;
var i__7320__auto___16207 = (0);
while(true){
if((i__7320__auto___16207 < len__7319__auto___16206)){
args16203.push((arguments[i__7320__auto___16207]));

var G__16208 = (i__7320__auto___16207 + (1));
i__7320__auto___16207 = G__16208;
continue;
} else {
}
break;
}

var G__16205 = args16203.length;
switch (G__16205) {
case 3:
return cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args16203.length)].join('')));

}
});

cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$3 = (function (state,source,cb){
return cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$4(state,source,null,cb);
});

cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$4 = (function (state,source,name,cb){
return cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$5(state,source,name,null,cb);
});

cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$5 = (function (state,source,name,opts,cb){
if(cljs.core.truth_(cljs.js.atom_QMARK_(state))){
} else {
throw (new Error("Assert failed: (atom? state)"));
}

if(typeof source === 'string'){
} else {
throw (new Error("Assert failed: (string? source)"));
}

if(cljs.core.truth_(cljs.js.valid_name_QMARK_(name))){
} else {
throw (new Error("Assert failed: (valid-name? name)"));
}

if(cljs.core.truth_(cljs.js.valid_opts_QMARK_(opts))){
} else {
throw (new Error("Assert failed: (valid-opts? opts)"));
}

if(cljs.core.fn_QMARK_(cb)){
} else {
throw (new Error("Assert failed: (fn? cb)"));
}

return cljs.js.analyze_str_STAR_(new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$_STAR_compiler_STAR_,state,cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_,cljs.tagged_literals._STAR_cljs_data_readers_STAR_,cljs.core.cst$kw$_STAR_passes_STAR_,(function (){var or__6244__auto__ = cljs.core.cst$kw$passes.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return cljs.analyzer._STAR_passes_STAR_;
}
})(),cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_,cljs.core.cst$kw$analyze_DASH_deps.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_,cljs.core.cst$kw$load_DASH_macros.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_,(function (){var or__6244__auto__ = cljs.core.cst$kw$load.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return cljs.js._STAR_load_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_,(function (){var or__6244__auto__ = cljs.core.cst$kw$eval.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return cljs.js._STAR_eval_fn_STAR_;
}
})()], null),source,name,opts,cb);
});

cljs.js.analyze_str.cljs$lang$maxFixedArity = 5;

cljs.js.eval_STAR_ = (function cljs$js$eval_STAR_(bound_vars,form,opts,cb){
var the_ns = (function (){var or__6244__auto__ = cljs.core.cst$kw$ns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return cljs.core.cst$sym$cljs$user;
}
})();
var bound_vars__$1 = (function (){var G__16226 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([bound_vars,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_,the_ns], null)], 0));
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__16226,cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_,cljs.js.sm_data());
} else {
return G__16226;
}
})();
var _STAR_compiler_STAR_16227 = cljs.env._STAR_compiler_STAR_;
var _STAR_eval_fn_STAR_16228 = cljs.js._STAR_eval_fn_STAR_;
var _STAR_cljs_ns_STAR_16229 = cljs.analyzer._STAR_cljs_ns_STAR_;
var _STAR_cljs_static_fns_STAR_16230 = cljs.analyzer._STAR_cljs_static_fns_STAR_;
var _STAR_ns_STAR_16231 = cljs.core._STAR_ns_STAR_;
var _STAR_alias_map_STAR_16232 = cljs.tools.reader._STAR_alias_map_STAR_;
var _STAR_data_readers_STAR_16233 = cljs.tools.reader._STAR_data_readers_STAR_;
var resolve_symbol16234 = cljs.tools.reader.resolve_symbol;
var _STAR_source_map_data_STAR_16235 = cljs.compiler._STAR_source_map_data_STAR_;
cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.js._STAR_eval_fn_STAR_ = cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_ns_STAR_ = cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_static_fns_STAR_ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);

cljs.core._STAR_ns_STAR_ = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1));

cljs.tools.reader._STAR_alias_map_STAR_ = cljs.js.current_alias_map();

cljs.tools.reader._STAR_data_readers_STAR_ = cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.tools.reader.resolve_symbol = cljs.js.resolve_symbol;

cljs.compiler._STAR_source_map_data_STAR_ = cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

try{var aenv = cljs.analyzer.empty_env();
var aenv__$1 = (function (){var G__16236 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(aenv,cljs.core.cst$kw$ns,cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1(cljs.analyzer._STAR_cljs_ns_STAR_));
var G__16236__$1 = (cljs.core.truth_(cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__16236,cljs.core.cst$kw$context,cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts)):G__16236);
if(cljs.core.truth_(cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__16236__$1,cljs.core.cst$kw$def_DASH_emits_DASH_var,true);
} else {
return G__16236__$1;
}
})();
var res = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4(aenv__$1,form,null,opts)], null);
}catch (e16237){var cause = e16237;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv__$1,[cljs.core.str("Could not eval "),cljs.core.str(form)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
var ast = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res);
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$ns,cljs.core.cst$kw$op.cljs$core$IFn$_invoke$arity$1(ast))){
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6(true,bound_vars__$1,aenv__$1,ast,opts,((function (ast,aenv,aenv__$1,res,_STAR_compiler_STAR_16227,_STAR_eval_fn_STAR_16228,_STAR_cljs_ns_STAR_16229,_STAR_cljs_static_fns_STAR_16230,_STAR_ns_STAR_16231,_STAR_alias_map_STAR_16232,_STAR_data_readers_STAR_16233,resolve_symbol16234,_STAR_source_map_data_STAR_16235,the_ns,bound_vars__$1){
return (function (res__$1){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
var src = [cljs.core.str("goog.provide(\""),cljs.core.str(cljs.core.munge(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast))),cljs.core.str("\")")].join('');
var G__16238 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,(cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$source,src], null)) : cljs.js._STAR_eval_fn_STAR_.call(null,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$source,src], null)))], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16238) : cb.call(null,G__16238));
}
});})(ast,aenv,aenv__$1,res,_STAR_compiler_STAR_16227,_STAR_eval_fn_STAR_16228,_STAR_cljs_ns_STAR_16229,_STAR_cljs_static_fns_STAR_16230,_STAR_ns_STAR_16231,_STAR_alias_map_STAR_16232,_STAR_data_readers_STAR_16233,resolve_symbol16234,_STAR_source_map_data_STAR_16235,the_ns,bound_vars__$1))
);
} else {
var src = (function (){var sb__7230__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_16239_16242 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_16240_16243 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (_STAR_print_newline_STAR_16239_16242,_STAR_print_fn_STAR_16240_16243,sb__7230__auto__,ast,aenv,aenv__$1,res,_STAR_compiler_STAR_16227,_STAR_eval_fn_STAR_16228,_STAR_cljs_ns_STAR_16229,_STAR_cljs_static_fns_STAR_16230,_STAR_ns_STAR_16231,_STAR_alias_map_STAR_16232,_STAR_data_readers_STAR_16233,resolve_symbol16234,_STAR_source_map_data_STAR_16235,the_ns,bound_vars__$1){
return (function (x__7231__auto__){
return sb__7230__auto__.append(x__7231__auto__);
});})(_STAR_print_newline_STAR_16239_16242,_STAR_print_fn_STAR_16240_16243,sb__7230__auto__,ast,aenv,aenv__$1,res,_STAR_compiler_STAR_16227,_STAR_eval_fn_STAR_16228,_STAR_cljs_ns_STAR_16229,_STAR_cljs_static_fns_STAR_16230,_STAR_ns_STAR_16231,_STAR_alias_map_STAR_16232,_STAR_data_readers_STAR_16233,resolve_symbol16234,_STAR_source_map_data_STAR_16235,the_ns,bound_vars__$1))
;

try{cljs.compiler.emit(ast);
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_16240_16243;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_16239_16242;
}
return [cljs.core.str(sb__7230__auto__)].join('');
})();
var G__16241 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,(cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$source,src], null)) : cljs.js._STAR_eval_fn_STAR_.call(null,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$source,src], null)))], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16241) : cb.call(null,G__16241));
}
}
}finally {cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_16235;

cljs.tools.reader.resolve_symbol = resolve_symbol16234;

cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_16233;

cljs.tools.reader._STAR_alias_map_STAR_ = _STAR_alias_map_STAR_16232;

cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_16231;

cljs.analyzer._STAR_cljs_static_fns_STAR_ = _STAR_cljs_static_fns_STAR_16230;

cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_16229;

cljs.js._STAR_eval_fn_STAR_ = _STAR_eval_fn_STAR_16228;

cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_16227;
}});
/**
 * Evaluate a single ClojureScript form. The parameters:
 * 
 * state (atom)
 *   the compiler state
 * 
 * form (s-expr)
 *   the ClojureScript source
 * 
 * opts (map)
 *   compilation options.
 * 
 *   :eval - the eval function to invoke, see *eval-fn*
 *   :load - library resolution function, see *load-fn*
 * 
 * cb (function)
 *   callback, will be invoked with a map. If successful the map will contain
 *   a key :value with the result of evalution. If unsuccessful the map will
 *   contain a key :error with an ex-info instance describing the cause of
 *   failure.
 */
cljs.js.eval = (function cljs$js$eval(var_args){
var args16244 = [];
var len__7319__auto___16247 = arguments.length;
var i__7320__auto___16248 = (0);
while(true){
if((i__7320__auto___16248 < len__7319__auto___16247)){
args16244.push((arguments[i__7320__auto___16248]));

var G__16249 = (i__7320__auto___16248 + (1));
i__7320__auto___16248 = G__16249;
continue;
} else {
}
break;
}

var G__16246 = args16244.length;
switch (G__16246) {
case 3:
return cljs.js.eval.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.js.eval.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args16244.length)].join('')));

}
});

cljs.js.eval.cljs$core$IFn$_invoke$arity$3 = (function (state,form,cb){
return cljs.js.eval.cljs$core$IFn$_invoke$arity$4(state,form,null,cb);
});

cljs.js.eval.cljs$core$IFn$_invoke$arity$4 = (function (state,form,opts,cb){
return cljs.js.eval_STAR_(new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$_STAR_compiler_STAR_,state,cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_,cljs.tagged_literals._STAR_cljs_data_readers_STAR_,cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_,cljs.core.cst$kw$analyze_DASH_deps.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_,cljs.core.cst$kw$load_DASH_macros.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_,(function (){var or__6244__auto__ = cljs.core.cst$kw$load.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return cljs.js._STAR_load_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_,(function (){var or__6244__auto__ = cljs.core.cst$kw$eval.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return cljs.js._STAR_eval_fn_STAR_;
}
})()], null),form,opts,cb);
});

cljs.js.eval.cljs$lang$maxFixedArity = 4;

cljs.js.compile_str_STAR_ = (function cljs$js$compile_str_STAR_(bound_vars,source,name,opts,cb){
var rdr = cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3(source,(1),name);
var eof = {};
var aenv = cljs.analyzer.empty_env();
var sb = (new goog.string.StringBuffer());
var the_ns = (function (){var or__6244__auto__ = cljs.core.cst$kw$ns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return cljs.core.cst$sym$cljs$user;
}
})();
var bound_vars__$1 = (function (){var G__16287 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([bound_vars,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_,the_ns], null)], 0));
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__16287,cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_,cljs.js.sm_data());
} else {
return G__16287;
}
})();
return ((function (rdr,eof,aenv,sb,the_ns,bound_vars__$1){
return (function cljs$js$compile_str_STAR__$_compile_loop(ns){
while(true){
var _STAR_compiler_STAR_16304 = cljs.env._STAR_compiler_STAR_;
var _STAR_eval_fn_STAR_16305 = cljs.js._STAR_eval_fn_STAR_;
var _STAR_cljs_ns_STAR_16306 = cljs.analyzer._STAR_cljs_ns_STAR_;
var _STAR_cljs_static_fns_STAR_16307 = cljs.analyzer._STAR_cljs_static_fns_STAR_;
var _STAR_ns_STAR_16308 = cljs.core._STAR_ns_STAR_;
var _STAR_alias_map_STAR_16309 = cljs.tools.reader._STAR_alias_map_STAR_;
var _STAR_data_readers_STAR_16310 = cljs.tools.reader._STAR_data_readers_STAR_;
var resolve_symbol16311 = cljs.tools.reader.resolve_symbol;
var _STAR_source_map_data_STAR_16312 = cljs.compiler._STAR_source_map_data_STAR_;
cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.js._STAR_eval_fn_STAR_ = cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_ns_STAR_ = ns;

cljs.analyzer._STAR_cljs_static_fns_STAR_ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);

cljs.core._STAR_ns_STAR_ = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(ns);

cljs.tools.reader._STAR_alias_map_STAR_ = cljs.js.current_alias_map();

cljs.tools.reader._STAR_data_readers_STAR_ = cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.tools.reader.resolve_symbol = cljs.js.resolve_symbol;

cljs.compiler._STAR_source_map_data_STAR_ = cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

try{var res = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$eof,eof,cljs.core.cst$kw$read_DASH_cond,cljs.core.cst$kw$allow,cljs.core.cst$kw$features,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$cljs,null], null), null)], null),rdr)], null);
}catch (e16313){var cause = e16313;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv,[cljs.core.str("Could not compile "),cljs.core.str(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
var form = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res);
if(!((eof === form))){
var aenv__$1 = (function (){var G__16314 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(aenv,cljs.core.cst$kw$ns,cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1(cljs.analyzer._STAR_cljs_ns_STAR_));
var G__16314__$1 = (cljs.core.truth_(cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__16314,cljs.core.cst$kw$context,cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts)):G__16314);
if(cljs.core.truth_(cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__16314__$1,cljs.core.cst$kw$def_DASH_emits_DASH_var,true);
} else {
return G__16314__$1;
}
})();
var res__$1 = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4(aenv__$1,form,null,opts)], null);
}catch (e16315){var cause = e16315;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv__$1,[cljs.core.str("Could not compile "),cljs.core.str(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
var ast = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res__$1);
sb.append((function (){var sb__7230__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_16316_16319 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_16317_16320 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (ns,_STAR_print_newline_STAR_16316_16319,_STAR_print_fn_STAR_16317_16320,sb__7230__auto__,ast,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_16304,_STAR_eval_fn_STAR_16305,_STAR_cljs_ns_STAR_16306,_STAR_cljs_static_fns_STAR_16307,_STAR_ns_STAR_16308,_STAR_alias_map_STAR_16309,_STAR_data_readers_STAR_16310,resolve_symbol16311,_STAR_source_map_data_STAR_16312,rdr,eof,aenv,sb,the_ns,bound_vars__$1){
return (function (x__7231__auto__){
return sb__7230__auto__.append(x__7231__auto__);
});})(ns,_STAR_print_newline_STAR_16316_16319,_STAR_print_fn_STAR_16317_16320,sb__7230__auto__,ast,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_16304,_STAR_eval_fn_STAR_16305,_STAR_cljs_ns_STAR_16306,_STAR_cljs_static_fns_STAR_16307,_STAR_ns_STAR_16308,_STAR_alias_map_STAR_16309,_STAR_data_readers_STAR_16310,resolve_symbol16311,_STAR_source_map_data_STAR_16312,rdr,eof,aenv,sb,the_ns,bound_vars__$1))
;

try{cljs.compiler.emit(ast);
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_16317_16320;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_16316_16319;
}
return [cljs.core.str(sb__7230__auto__)].join('');
})());

if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$ns,cljs.core.cst$kw$op.cljs$core$IFn$_invoke$arity$1(ast))){
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$5(bound_vars__$1,aenv__$1,ast,opts,((function (ns,ast,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_16304,_STAR_eval_fn_STAR_16305,_STAR_cljs_ns_STAR_16306,_STAR_cljs_static_fns_STAR_16307,_STAR_ns_STAR_16308,_STAR_alias_map_STAR_16309,_STAR_data_readers_STAR_16310,resolve_symbol16311,_STAR_source_map_data_STAR_16312,rdr,eof,aenv,sb,the_ns,bound_vars__$1){
return (function (res__$2){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
} else {
return cljs$js$compile_str_STAR__$_compile_loop(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast));
}
});})(ns,ast,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_16304,_STAR_eval_fn_STAR_16305,_STAR_cljs_ns_STAR_16306,_STAR_cljs_static_fns_STAR_16307,_STAR_ns_STAR_16308,_STAR_alias_map_STAR_16309,_STAR_data_readers_STAR_16310,resolve_symbol16311,_STAR_source_map_data_STAR_16312,rdr,eof,aenv,sb,the_ns,bound_vars__$1))
);
} else {
var G__16321 = ns;
ns = G__16321;
continue;
}
}
} else {
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.append_source_map(cljs.env._STAR_compiler_STAR_,name,source,sb,(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.compiler._STAR_source_map_data_STAR_) : cljs.core.deref.call(null,cljs.compiler._STAR_source_map_data_STAR_)),opts);
} else {
}

var G__16318 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,sb.toString()], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__16318) : cb.call(null,G__16318));
}
}
}finally {cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_16312;

cljs.tools.reader.resolve_symbol = resolve_symbol16311;

cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_16310;

cljs.tools.reader._STAR_alias_map_STAR_ = _STAR_alias_map_STAR_16309;

cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_16308;

cljs.analyzer._STAR_cljs_static_fns_STAR_ = _STAR_cljs_static_fns_STAR_16307;

cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_16306;

cljs.js._STAR_eval_fn_STAR_ = _STAR_eval_fn_STAR_16305;

cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_16304;
}break;
}
});})(rdr,eof,aenv,sb,the_ns,bound_vars__$1))
.call(null,the_ns);
});
/**
 * Compile ClojureScript source into JavaScript. The parameters:
 * 
 * state (atom)
 *   the compiler state
 * 
 * source (string)
 *   the ClojureScript source
 * 
 * name (symbol)
 *   optional, the name of the source
 * 
 * opts (map)
 *   compilation options.
 * 
 *   :load       - library resolution function, see *load-fn*
 *   :source-map - set to true to generate inline source map information
 * 
 * cb (function)
 *   callback, will be invoked with a map. If successful the map will contain
 *   a key :value with the compilation result (string). If unsuccessful the map
 *   will contain a key :error with an ex-info instance describing the cause
 *   of failure.
 */
cljs.js.compile_str = (function cljs$js$compile_str(var_args){
var args16322 = [];
var len__7319__auto___16325 = arguments.length;
var i__7320__auto___16326 = (0);
while(true){
if((i__7320__auto___16326 < len__7319__auto___16325)){
args16322.push((arguments[i__7320__auto___16326]));

var G__16327 = (i__7320__auto___16326 + (1));
i__7320__auto___16326 = G__16327;
continue;
} else {
}
break;
}

var G__16324 = args16322.length;
switch (G__16324) {
case 3:
return cljs.js.compile_str.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.js.compile_str.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.js.compile_str.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args16322.length)].join('')));

}
});

cljs.js.compile_str.cljs$core$IFn$_invoke$arity$3 = (function (state,source,cb){
return cljs.js.compile_str.cljs$core$IFn$_invoke$arity$4(state,source,null,cb);
});

cljs.js.compile_str.cljs$core$IFn$_invoke$arity$4 = (function (state,source,name,cb){
return cljs.js.compile_str.cljs$core$IFn$_invoke$arity$5(state,source,name,null,cb);
});

cljs.js.compile_str.cljs$core$IFn$_invoke$arity$5 = (function (state,source,name,opts,cb){
if(cljs.core.truth_(cljs.js.atom_QMARK_(state))){
} else {
throw (new Error("Assert failed: (atom? state)"));
}

if(typeof source === 'string'){
} else {
throw (new Error("Assert failed: (string? source)"));
}

if(cljs.core.truth_(cljs.js.valid_name_QMARK_(name))){
} else {
throw (new Error("Assert failed: (valid-name? name)"));
}

if(cljs.core.truth_(cljs.js.valid_opts_QMARK_(opts))){
} else {
throw (new Error("Assert failed: (valid-opts? opts)"));
}

if(cljs.core.fn_QMARK_(cb)){
} else {
throw (new Error("Assert failed: (fn? cb)"));
}

return cljs.js.compile_str_STAR_(new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$_STAR_compiler_STAR_,state,cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_,cljs.tagged_literals._STAR_cljs_data_readers_STAR_,cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_,cljs.core.cst$kw$analyze_DASH_deps.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_,cljs.core.cst$kw$load_DASH_macros.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_,(function (){var or__6244__auto__ = cljs.core.cst$kw$load.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return cljs.js._STAR_load_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_,(function (){var or__6244__auto__ = cljs.core.cst$kw$eval.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return cljs.js._STAR_eval_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_,(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))?cljs.js.sm_data():null)], null),source,name,opts,cb);
});

cljs.js.compile_str.cljs$lang$maxFixedArity = 5;

cljs.js.eval_str_STAR_ = (function cljs$js$eval_str_STAR_(bound_vars,source,name,opts,cb){
var rdr = cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3(source,(1),name);
var eof = {};
var aenv = cljs.analyzer.empty_env();
var sb = (new goog.string.StringBuffer());
var the_ns = (function (){var or__6244__auto__ = cljs.core.cst$kw$ns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return cljs.core.cst$sym$cljs$user;
}
})();
var bound_vars__$1 = (function (){var G__16369 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([bound_vars,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_,the_ns], null)], 0));
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__16369,cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_,cljs.js.sm_data());
} else {
return G__16369;
}
})();
var aname = (function (){var G__16370 = name;
if(cljs.core.truth_(cljs.core.cst$kw$macros_DASH_ns.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.analyzer.macro_ns_name(G__16370);
} else {
return G__16370;
}
})();
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Evaluating",name], 0));
} else {
}

return ((function (rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function cljs$js$eval_str_STAR__$_compile_loop(ns){
while(true){
var _STAR_compiler_STAR_16388 = cljs.env._STAR_compiler_STAR_;
var _STAR_eval_fn_STAR_16389 = cljs.js._STAR_eval_fn_STAR_;
var _STAR_cljs_ns_STAR_16390 = cljs.analyzer._STAR_cljs_ns_STAR_;
var _STAR_cljs_static_fns_STAR_16391 = cljs.analyzer._STAR_cljs_static_fns_STAR_;
var _STAR_ns_STAR_16392 = cljs.core._STAR_ns_STAR_;
var _STAR_alias_map_STAR_16393 = cljs.tools.reader._STAR_alias_map_STAR_;
var _STAR_data_readers_STAR_16394 = cljs.tools.reader._STAR_data_readers_STAR_;
var resolve_symbol16395 = cljs.tools.reader.resolve_symbol;
var _STAR_source_map_data_STAR_16396 = cljs.compiler._STAR_source_map_data_STAR_;
cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.js._STAR_eval_fn_STAR_ = cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_ns_STAR_ = ns;

cljs.analyzer._STAR_cljs_static_fns_STAR_ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);

cljs.core._STAR_ns_STAR_ = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(ns);

cljs.tools.reader._STAR_alias_map_STAR_ = cljs.js.current_alias_map();

cljs.tools.reader._STAR_data_readers_STAR_ = cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.tools.reader.resolve_symbol = cljs.js.resolve_symbol;

cljs.compiler._STAR_source_map_data_STAR_ = cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

try{var res = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$eof,eof,cljs.core.cst$kw$read_DASH_cond,cljs.core.cst$kw$allow,cljs.core.cst$kw$features,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$cljs,null], null), null)], null),rdr)], null);
}catch (e16397){var cause = e16397;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv,[cljs.core.str("Could not eval "),cljs.core.str(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
var form = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res);
if(!((eof === form))){
var aenv__$1 = (function (){var G__16398 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(aenv,cljs.core.cst$kw$ns,cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1(ns));
var G__16398__$1 = (cljs.core.truth_(cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__16398,cljs.core.cst$kw$context,cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts)):G__16398);
if(cljs.core.truth_(cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__16398__$1,cljs.core.cst$kw$def_DASH_emits_DASH_var,true);
} else {
return G__16398__$1;
}
})();
var res__$1 = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4(aenv__$1,form,null,opts)], null);
}catch (e16399){var cause = e16399;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv__$1,[cljs.core.str("Could not eval "),cljs.core.str(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
var ast = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res__$1);
var ns_SINGLEQUOTE_ = cljs.analyzer._STAR_cljs_ns_STAR_;
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$ns,cljs.core.cst$kw$op.cljs$core$IFn$_invoke$arity$1(ast))){
sb.append((function (){var sb__7230__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_16400_16405 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_16401_16406 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (ns,_STAR_print_newline_STAR_16400_16405,_STAR_print_fn_STAR_16401_16406,sb__7230__auto__,ast,ns_SINGLEQUOTE_,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_16388,_STAR_eval_fn_STAR_16389,_STAR_cljs_ns_STAR_16390,_STAR_cljs_static_fns_STAR_16391,_STAR_ns_STAR_16392,_STAR_alias_map_STAR_16393,_STAR_data_readers_STAR_16394,resolve_symbol16395,_STAR_source_map_data_STAR_16396,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function (x__7231__auto__){
return sb__7230__auto__.append(x__7231__auto__);
});})(ns,_STAR_print_newline_STAR_16400_16405,_STAR_print_fn_STAR_16401_16406,sb__7230__auto__,ast,ns_SINGLEQUOTE_,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_16388,_STAR_eval_fn_STAR_16389,_STAR_cljs_ns_STAR_16390,_STAR_cljs_static_fns_STAR_16391,_STAR_ns_STAR_16392,_STAR_alias_map_STAR_16393,_STAR_data_readers_STAR_16394,resolve_symbol16395,_STAR_source_map_data_STAR_16396,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname))
;

try{cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([[cljs.core.str("goog.provide(\""),cljs.core.str(cljs.core.munge(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast))),cljs.core.str("\");")].join('')], 0));
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_16401_16406;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_16400_16405;
}
return [cljs.core.str(sb__7230__auto__)].join('');
})());

return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6(true,bound_vars__$1,aenv__$1,ast,opts,((function (ns,ast,ns_SINGLEQUOTE_,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_16388,_STAR_eval_fn_STAR_16389,_STAR_cljs_ns_STAR_16390,_STAR_cljs_static_fns_STAR_16391,_STAR_ns_STAR_16392,_STAR_alias_map_STAR_16393,_STAR_data_readers_STAR_16394,resolve_symbol16395,_STAR_source_map_data_STAR_16396,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function (res__$2){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
} else {
return cljs$js$eval_str_STAR__$_compile_loop(ns_SINGLEQUOTE_);
}
});})(ns,ast,ns_SINGLEQUOTE_,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_16388,_STAR_eval_fn_STAR_16389,_STAR_cljs_ns_STAR_16390,_STAR_cljs_static_fns_STAR_16391,_STAR_ns_STAR_16392,_STAR_alias_map_STAR_16393,_STAR_data_readers_STAR_16394,resolve_symbol16395,_STAR_source_map_data_STAR_16396,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname))
);
} else {
sb.append((function (){var sb__7230__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_16402_16407 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_16403_16408 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (ns,_STAR_print_newline_STAR_16402_16407,_STAR_print_fn_STAR_16403_16408,sb__7230__auto__,ast,ns_SINGLEQUOTE_,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_16388,_STAR_eval_fn_STAR_16389,_STAR_cljs_ns_STAR_16390,_STAR_cljs_static_fns_STAR_16391,_STAR_ns_STAR_16392,_STAR_alias_map_STAR_16393,_STAR_data_readers_STAR_16394,resolve_symbol16395,_STAR_source_map_data_STAR_16396,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function (x__7231__auto__){
return sb__7230__auto__.append(x__7231__auto__);
});})(ns,_STAR_print_newline_STAR_16402_16407,_STAR_print_fn_STAR_16403_16408,sb__7230__auto__,ast,ns_SINGLEQUOTE_,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_16388,_STAR_eval_fn_STAR_16389,_STAR_cljs_ns_STAR_16390,_STAR_cljs_static_fns_STAR_16391,_STAR_ns_STAR_16392,_STAR_alias_map_STAR_16393,_STAR_data_readers_STAR_16394,resolve_symbol16395,_STAR_source_map_data_STAR_16396,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname))
;

try{cljs.compiler.emit(ast);
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_16403_16408;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_16402_16407;
}
return [cljs.core.str(sb__7230__auto__)].join('');
})());

var G__16409 = ns_SINGLEQUOTE_;
ns = G__16409;
continue;
}
}
} else {
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.append_source_map(cljs.env._STAR_compiler_STAR_,aname,source,sb,(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.compiler._STAR_source_map_data_STAR_) : cljs.core.deref.call(null,cljs.compiler._STAR_source_map_data_STAR_)),opts);
} else {
}

var js_source = sb.toString();
var evalm = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$lang,cljs.core.cst$kw$clj,cljs.core.cst$kw$name,name,cljs.core.cst$kw$path,cljs.js.ns__GT_relpath(name),cljs.core.cst$kw$source,js_source,cljs.core.cst$kw$cache,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.env._STAR_compiler_STAR_) : cljs.core.deref.call(null,cljs.env._STAR_compiler_STAR_)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,aname], null))], null);
var complete = ((function (ns,js_source,evalm,form,res,_STAR_compiler_STAR_16388,_STAR_eval_fn_STAR_16389,_STAR_cljs_ns_STAR_16390,_STAR_cljs_static_fns_STAR_16391,_STAR_ns_STAR_16392,_STAR_alias_map_STAR_16393,_STAR_data_readers_STAR_16394,resolve_symbol16395,_STAR_source_map_data_STAR_16396,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function (res__$1){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([js_source], 0));
} else {
}

var res__$2 = (function (){try{return new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns,ns,cljs.core.cst$kw$value,(cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1(evalm) : cljs.js._STAR_eval_fn_STAR_.call(null,evalm))], null);
}catch (e16404){var cause = e16404;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv,"ERROR",cause));
}})();
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
}
});})(ns,js_source,evalm,form,res,_STAR_compiler_STAR_16388,_STAR_eval_fn_STAR_16389,_STAR_cljs_ns_STAR_16390,_STAR_cljs_static_fns_STAR_16391,_STAR_ns_STAR_16392,_STAR_alias_map_STAR_16393,_STAR_data_readers_STAR_16394,resolve_symbol16395,_STAR_source_map_data_STAR_16396,rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname))
;
var temp__4655__auto__ = cljs.core.cst$kw$cache_DASH_source.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(temp__4655__auto__)){
var f = temp__4655__auto__;
return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(evalm,complete) : f.call(null,evalm,complete));
} else {
return complete(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null));
}
}
}
}finally {cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_16396;

cljs.tools.reader.resolve_symbol = resolve_symbol16395;

cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_16394;

cljs.tools.reader._STAR_alias_map_STAR_ = _STAR_alias_map_STAR_16393;

cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_16392;

cljs.analyzer._STAR_cljs_static_fns_STAR_ = _STAR_cljs_static_fns_STAR_16391;

cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_16390;

cljs.js._STAR_eval_fn_STAR_ = _STAR_eval_fn_STAR_16389;

cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_16388;
}break;
}
});})(rdr,eof,aenv,sb,the_ns,bound_vars__$1,aname))
.call(null,cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1));
});
/**
 * Evalute ClojureScript source given as a string. The parameters:
 * 
 *   state (atom)
 *  the compiler state
 * 
 *   source (string)
 *  the ClojureScript source
 * 
 *   name (symbol)
 *  optional, the name of the source
 * 
 *   opts (map)
 *  compilation options.
 * 
 *  :eval         - eval function to invoke, see *eval-fn*
 *  :load         - library resolution function, see *load-fn*
 *  :source-map   - set to true to generate inline source map information
 *  :cache-source - optional, a function to run side-effects with the
 *                  compilation result prior to actual evalution. This function
 *                  takes two arguments, the first is the eval map, the source
 *                  will be under :source. The second argument is a callback of
 *                  one argument. If an error occurs an :error key should be
 *                  supplied.
 * 
 *   cb (function)
 *  callback, will be invoked with a map. If succesful the map will contain
 *  a :value key with the result of evaluation and :ns the current namespace.
 *  If unsuccessful will contain a :error key with an ex-info instance describing
 *  the cause of failure.
 */
cljs.js.eval_str = (function cljs$js$eval_str(var_args){
var args16410 = [];
var len__7319__auto___16413 = arguments.length;
var i__7320__auto___16414 = (0);
while(true){
if((i__7320__auto___16414 < len__7319__auto___16413)){
args16410.push((arguments[i__7320__auto___16414]));

var G__16415 = (i__7320__auto___16414 + (1));
i__7320__auto___16414 = G__16415;
continue;
} else {
}
break;
}

var G__16412 = args16410.length;
switch (G__16412) {
case 3:
return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args16410.length)].join('')));

}
});

cljs.js.eval_str.cljs$core$IFn$_invoke$arity$3 = (function (state,source,cb){
return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$4(state,source,null,cb);
});

cljs.js.eval_str.cljs$core$IFn$_invoke$arity$4 = (function (state,source,name,cb){
return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$5(state,source,name,null,cb);
});

cljs.js.eval_str.cljs$core$IFn$_invoke$arity$5 = (function (state,source,name,opts,cb){
if(cljs.core.truth_(cljs.js.atom_QMARK_(state))){
} else {
throw (new Error("Assert failed: (atom? state)"));
}

if(typeof source === 'string'){
} else {
throw (new Error("Assert failed: (string? source)"));
}

if(cljs.core.truth_(cljs.js.valid_name_QMARK_(name))){
} else {
throw (new Error("Assert failed: (valid-name? name)"));
}

if(cljs.core.truth_(cljs.js.valid_opts_QMARK_(opts))){
} else {
throw (new Error("Assert failed: (valid-opts? opts)"));
}

if(cljs.core.fn_QMARK_(cb)){
} else {
throw (new Error("Assert failed: (fn? cb)"));
}

return cljs.js.eval_str_STAR_(new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$_STAR_compiler_STAR_,state,cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_,cljs.tagged_literals._STAR_cljs_data_readers_STAR_,cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_,cljs.core.cst$kw$analyze_DASH_deps.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_,cljs.core.cst$kw$load_DASH_macros.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_,(function (){var or__6244__auto__ = cljs.core.cst$kw$load.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return cljs.js._STAR_load_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_,(function (){var or__6244__auto__ = cljs.core.cst$kw$eval.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__6244__auto__)){
return or__6244__auto__;
} else {
return cljs.js._STAR_eval_fn_STAR_;
}
})()], null),source,name,opts,cb);
});

cljs.js.eval_str.cljs$lang$maxFixedArity = 5;

